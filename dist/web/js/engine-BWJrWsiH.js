var e=Object.defineProperty,t=(t,i,a)=>((t,i,a)=>i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[i]=a)(t,"symbol"!=typeof i?i+"":i,a);import{c as i,a,b as s,d as r,B as n,p as o,e as c,f as l,v as u,i as m,g as h,h as y,S as g,C as d,M as p,j as f,k as b,l as S,m as v,n as T,U as k}from"./models-D6RH2t8d.js";class A{calculateIncome(e){const t=i(e.economy.reactors,e.economy.mines),n=a(e.economy.constructionQueue),o=s(e.fleet.homeSystem),c=r(t,n),l=r(c,o);e.resources.metalIncome=l.metal,e.resources.energyIncome=l.energy,e.resources.metal+=l.metal,e.resources.energy+=l.energy,e.resources.metal=Math.max(0,e.resources.metal),e.resources.energy=Math.max(0,e.resources.energy)}getNetIncome(e){const t=i(e.economy.reactors,e.economy.mines),n=a(e.economy.constructionQueue),o=s(e.fleet.homeSystem),c=r(t,n);return r(c,o)}isEconomyStalled(e){const t=this.getNetIncome(e);return t.metal<=0||t.energy<=0}getIncomeBreakdown(e){const t={...n},r=i(e.economy.reactors,e.economy.mines);return{baseIncome:t,structureBonus:{metal:r.metal-n.metal,energy:r.energy-n.energy},constructionDrain:a(e.economy.constructionQueue),fleetUpkeep:s(e.fleet.homeSystem),netIncome:this.getNetIncome(e)}}processConstruction(e){this.isEconomyStalled(e),this.advanceExistingConstruction(e)}advanceExistingConstruction(e){const{completedOrders:t,remainingQueue:i}=o(e.economy.constructionQueue);e.economy.constructionQueue=i;for(const a of t)this.applyCompletedOrder(e,a)}applyCompletedOrder(e,t){switch(t.unitType){case"frigate":e.fleet.homeSystem.frigates+=t.quantity;break;case"cruiser":e.fleet.homeSystem.cruisers+=t.quantity;break;case"battleship":e.fleet.homeSystem.battleships+=t.quantity;break;case"reactor":e.economy.reactors+=t.quantity;break;case"mine":e.economy.mines+=t.quantity}}canAffordAndSustainBuildOrder(e,t){const i=[],a=c(e.resources,t);if(!a){const e=t.resourceDrainPerTurn.metal*t.turnsRemaining,a=t.resourceDrainPerTurn.energy*t.turnsRemaining;i.push(`Insufficient resources: need ${e} metal, ${a} energy`)}const s=this.getNetIncome(e),r=l(s,t);return r||i.push(`Insufficient income to sustain construction drain: ${t.resourceDrainPerTurn.metal} metal/turn, ${t.resourceDrainPerTurn.energy} energy/turn`),{canAfford:a,canSustain:r,errors:i}}addBuildOrder(e,t){const n=u(t);if(!n.isValid)return{success:!1,errors:n.errors};const o=this.canAffordAndSustainBuildOrder(e,t);if(!o.canAfford)return{success:!1,errors:o.errors};const c=[...e.economy.constructionQueue,t],l=a(c),m=i(e.economy.reactors,e.economy.mines),h=s(e.fleet.homeSystem),y=r(r(m,l),h);return y.metal<=0||y.energy<=0?{success:!1,errors:["Adding this build order would stall the economy (income â‰¤ 0)"]}:(e.economy.constructionQueue.push(t),{success:!0,errors:[]})}cancelBuildOrder(e,t){return t<0||t>=e.economy.constructionQueue.length?{success:!1,errors:["Invalid build order index"]}:(e.economy.constructionQueue.splice(t,1),{success:!0,errors:[]})}getTotalConstructionDrain(e){return a(e.economy.constructionQueue)}hasActiveConstruction(e){return e.economy.constructionQueue.length>0}getConstructionStatus(e){return e.economy.constructionQueue.map((e,t)=>({order:e,index:t,completionTurn:e.turnsRemaining}))}applyUpkeep(e){this.validateEconomicState(e).isValid}validateEconomicState(e){const t=[],i=[],a=this.getIncomeBreakdown(e),s=a.netIncome;s.metal<=0&&(t.push("Metal income is zero or negative - economy stalled"),i.push("Reduce fleet size or build more mines")),s.energy<=0&&(t.push("Energy income is zero or negative - economy stalled"),i.push("Reduce fleet size or build more reactors")),s.metal>0&&s.metal<1e3&&(t.push("Metal income is critically low"),i.push("Consider building mines or reducing military spending")),s.energy>0&&s.energy<1e3&&(t.push("Energy income is critically low"),i.push("Consider building reactors or reducing military spending"));const r=a.constructionDrain.metal/a.baseIncome.metal,n=a.constructionDrain.energy/a.baseIncome.energy;r>.8&&(t.push("Construction is consuming excessive metal resources"),i.push("Consider reducing construction queue or building more mines")),n>.8&&(t.push("Construction is consuming excessive energy resources"),i.push("Consider reducing construction queue or building more reactors"));const o=a.fleetUpkeep.metal/a.baseIncome.metal,c=a.fleetUpkeep.energy/a.baseIncome.energy;o>.7&&(t.push("Fleet upkeep is consuming excessive metal"),i.push("Consider reducing fleet size or building more mines")),c>.7&&(t.push("Fleet upkeep is consuming excessive energy"),i.push("Consider reducing fleet size or building more reactors")),e.resources.metal>5e4&&s.metal>2e3&&i.push("Consider investing excess metal in fleet or economic expansion"),e.resources.energy>5e4&&s.energy>2e3&&i.push("Consider investing excess energy in fleet or economic expansion");const l=this.validateStructureViability(e);return t.push(...l),{isValid:0===t.length,warnings:t,recommendations:i}}validateStructureViability(e){const t=[];if(e.economy.reactors>0){m("reactor",e.economy.reactors,15)||t.push("Additional reactors may not be cost-effective (payback > 15 turns)")}if(e.economy.mines>0){m("mine",e.economy.mines,15)||t.push("Additional mines may not be cost-effective (payback > 15 turns)")}return t}getEconomicEfficiency(e){const t=this.getIncomeBreakdown(e),i=h(e.fleet.homeSystem),a=Math.max(0,Math.min(1,t.netIncome.metal/t.baseIncome.metal)),s=Math.max(0,Math.min(1,t.netIncome.energy/t.baseIncome.energy)),r=(t.structureBonus.metal+t.structureBonus.energy)/(t.baseIncome.metal+t.baseIncome.energy),n=i>0?i/(t.fleetUpkeep.metal+t.fleetUpkeep.energy):0;return{overallEfficiency:(a+s+Math.min(1,r)+Math.min(1,.1*n))/4,metalEfficiency:a,energyEfficiency:s,structureEfficiency:r,fleetEfficiency:n}}getEconomicRecommendations(e){const t=[],i=this.getIncomeBreakdown(e).netIncome;return i.metal<=0&&t.push({priority:"high",action:"Reduce fleet size or build mines immediately",reason:"Metal income is zero or negative"}),i.energy<=0&&t.push({priority:"high",action:"Reduce fleet size or build reactors immediately",reason:"Energy income is zero or negative"}),i.metal>0&&i.metal<2e3&&t.push({priority:"medium",action:"Build additional mines",reason:"Metal income is low but positive"}),i.energy>0&&i.energy<2e3&&t.push({priority:"medium",action:"Build additional reactors",reason:"Energy income is low but positive"}),e.resources.metal>3e4&&i.metal>5e3&&t.push({priority:"low",action:"Invest in fleet expansion",reason:"Excess metal resources available"}),e.resources.energy>3e4&&i.energy>5e3&&t.push({priority:"low",action:"Invest in fleet expansion or scanning",reason:"Excess energy resources available"}),t}}class M extends y{constructor(){super("aggressor",{militaryFocus:.8,economicFocus:.2,aggressionLevel:.9,deceptionChance:.1,adaptiveVariation:.2})}makeDecision(e,t){return t.threatLevel=this.calculateThreatLevel(e,t),t.economicAdvantage=this.calculateEconomicAdvantage(e,t),this.shouldAdaptBehavior()&&t.threatLevel>.7?this.makeDefensiveDecision(t):Math.random()<this.behaviorProbabilities.militaryFocus?this.makeMilitaryDecision(e,t):this.makeEconomicDecision(t)}makeDefensiveDecision(e){return this.canAffordBuild(e.resources,"battleship")?{type:"build",buildType:"battleship",buildQuantity:1}:this.canAffordBuild(e.resources,"cruiser")?{type:"build",buildType:"cruiser",buildQuantity:Math.floor(3*Math.random())+1}:this.canAffordBuild(e.resources,"frigate")?{type:"build",buildType:"frigate",buildQuantity:Math.floor(5*Math.random())+1}:{type:"wait"}}makeMilitaryDecision(e,t){const i=t.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships>=5&&t.threatLevel<.8){const a=e.player.fleet.homeSystem,s=this.planAttackFleet(i,a);if(s&&this.hasAvailableFleet(t,s))return{type:"attack",attackTarget:"player_home",attackFleet:s}}return this.buildMilitaryUnits(t)}planAttackFleet(e,t){if(e.frigates+e.cruisers+e.battleships<3)return null;const i=.6+.2*Math.random();return{frigates:Math.floor(e.frigates*i),cruisers:Math.floor(e.cruisers*i),battleships:Math.floor(e.battleships*i)}}buildMilitaryUnits(e){return this.canAffordBuild(e.resources,"frigate",3)?{type:"build",buildType:"frigate",buildQuantity:Math.floor(3*Math.random())+1}:this.canAffordBuild(e.resources,"cruiser",2)?{type:"build",buildType:"cruiser",buildQuantity:Math.floor(2*Math.random())+1}:this.canAffordBuild(e.resources,"battleship")?{type:"build",buildType:"battleship",buildQuantity:1}:{type:"wait"}}makeEconomicDecision(e){if(e.resources.metalIncome+e.resources.energyIncome<15e3){if(e.resources.metalIncome<e.resources.energyIncome&&this.canAffordBuild(e.resources,"mine"))return{type:"build",buildType:"mine",buildQuantity:1};if(this.canAffordBuild(e.resources,"reactor"))return{type:"build",buildType:"reactor",buildQuantity:1}}return this.buildMilitaryUnits(e)}}class I extends y{constructor(){super("economist",{militaryFocus:.25,economicFocus:.75,aggressionLevel:.3,deceptionChance:.1,adaptiveVariation:.25})}makeDecision(e,t){return t.threatLevel=this.calculateThreatLevel(e,t),t.economicAdvantage=this.calculateEconomicAdvantage(e,t),t.threatLevel>.5&&Math.random()<this.behaviorProbabilities.militaryFocus?this.makeMilitaryDecision(e,t):Math.random()<this.behaviorProbabilities.economicFocus?this.makeEconomicDecision(t):this.makeDefensiveMilitaryDecision(t)}makeEconomicDecision(e){if(e.resources.metalIncome+e.resources.energyIncome<25e3)if(e.resources.metalIncome<=e.resources.energyIncome){if(this.canAffordBuild(e.resources,"mine"))return{type:"build",buildType:"mine",buildQuantity:1}}else if(this.canAffordBuild(e.resources,"reactor"))return{type:"build",buildType:"reactor",buildQuantity:1};return this.makeDefensiveMilitaryDecision(e)}makeMilitaryDecision(e,t){const i=t.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships>=10&&t.economicAdvantage>.3){const a=e.player.fleet.homeSystem,s=this.planConservativeAttack(i,a);if(s&&this.hasAvailableFleet(t,s))return{type:"attack",attackTarget:"player_home",attackFleet:s}}return this.makeDefensiveMilitaryDecision(t)}planConservativeAttack(e,t){if(this.calculateFleetStrength(e)<2*this.calculateFleetStrength(t))return null;const i=.4+.1*Math.random();return{frigates:Math.floor(e.frigates*i),cruisers:Math.floor(e.cruisers*i),battleships:Math.floor(e.battleships*i)}}makeDefensiveMilitaryDecision(e){const t=e.fleet.homeSystem;if(t.frigates+t.cruisers+t.battleships<8){if(this.canAffordBuild(e.resources,"cruiser"))return{type:"build",buildType:"cruiser",buildQuantity:1};if(this.canAffordBuild(e.resources,"frigate",2))return{type:"build",buildType:"frigate",buildQuantity:2};if(this.canAffordBuild(e.resources,"battleship"))return{type:"build",buildType:"battleship",buildQuantity:1}}return e.resources.energy>=2500&&Math.random()<.3?{type:"scan",scanType:"deep"}:{type:"wait"}}}class D extends y{constructor(){super("trickster",{militaryFocus:.4,economicFocus:.3,aggressionLevel:.6,deceptionChance:.7,adaptiveVariation:.3}),t(this,"lastDeceptionTurn",0),t(this,"deceptionCooldown",3)}makeDecision(e,t){t.threatLevel=this.calculateThreatLevel(e,t),t.economicAdvantage=this.calculateEconomicAdvantage(e,t);const i=e.player.intelligence.lastScanTurn;return e.turn-i>3&&Math.random()<.3?this.makeStraightforwardDecision(e,t):Math.random()<this.behaviorProbabilities.deceptionChance?this.makeDeceptiveDecision(e,t):this.makeBalancedDecision(e,t)}makeDeceptiveDecision(e,t){const i=e.turn;return i-this.lastDeceptionTurn>=this.deceptionCooldown&&t.resources.energy>=1e3&&Math.random()<.4?(this.lastDeceptionTurn=i,{type:"scan",scanType:"basic"}):this.buildUnexpectedUnits(t,e)}buildUnexpectedUnits(e,t){const i=t.player.fleet.homeSystem;switch(this.getDominantUnitType(i)){case"frigate":if(this.canAffordBuild(e.resources,"cruiser"))return{type:"build",buildType:"cruiser",buildQuantity:Math.floor(2*Math.random())+1};break;case"cruiser":if(this.canAffordBuild(e.resources,"battleship"))return{type:"build",buildType:"battleship",buildQuantity:1};break;case"battleship":if(this.canAffordBuild(e.resources,"frigate",3))return{type:"build",buildType:"frigate",buildQuantity:Math.floor(4*Math.random())+2}}const a=["frigate","cruiser","battleship"],s=a[Math.floor(Math.random()*a.length)];return this.canAffordBuild(e.resources,s)?{type:"build",buildType:s,buildQuantity:1}:{type:"wait"}}makeStraightforwardDecision(e,t){const i=t.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships>=6&&t.threatLevel<.6){const a=e.player.fleet.homeSystem,s=this.planOptimalAttack(i,a);if(s&&this.hasAvailableFleet(t,s))return{type:"attack",attackTarget:"player_home",attackFleet:s}}return this.buildOptimalUnits(t,e)}planOptimalAttack(e,t){if(this.calculateFleetStrength(e)<1.2*this.calculateFleetStrength(t))return null;const i=.5+.2*Math.random();return{frigates:Math.floor(e.frigates*i),cruisers:Math.floor(e.cruisers*i),battleships:Math.floor(e.battleships*i)}}buildOptimalUnits(e,t){const i=t.player.fleet.homeSystem,a=this.getOptimalCounter(i);return this.canAffordBuild(e.resources,a.unitType,a.quantity)?{type:"build",buildType:a.unitType,buildQuantity:a.quantity}:this.canAffordBuild(e.resources,"frigate")?{type:"build",buildType:"frigate",buildQuantity:1}:{type:"wait"}}getOptimalCounter(e){switch(this.getDominantUnitType(e)){case"frigate":return{unitType:"battleship",quantity:1};case"cruiser":return{unitType:"frigate",quantity:3};case"battleship":return{unitType:"cruiser",quantity:2}}}makeBalancedDecision(e,t){return Math.random()<.5?this.makeEconomicDecision(t):this.makeMilitaryDecision(t)}makeEconomicDecision(e){return e.resources.metalIncome<15e3&&this.canAffordBuild(e.resources,"mine")?{type:"build",buildType:"mine",buildQuantity:1}:e.resources.energyIncome<15e3&&this.canAffordBuild(e.resources,"reactor")?{type:"build",buildType:"reactor",buildQuantity:1}:this.makeMilitaryDecision(e)}makeMilitaryDecision(e){const t=["frigate","cruiser","battleship"],i=t[Math.floor(Math.random()*t.length)];return this.canAffordBuild(e.resources,i)?{type:"build",buildType:i,buildQuantity:1}:{type:"wait"}}}class E extends y{constructor(){super("hybrid",{militaryFocus:.6,economicFocus:.6,aggressionLevel:.5,deceptionChance:.2,adaptiveVariation:.4}),t(this,"currentStrategy"),t(this,"strategyChangeTimer",0),t(this,"strategyDuration",3),this.currentStrategy=this.selectInitialStrategy()}makeDecision(e,t){return t.threatLevel=this.calculateThreatLevel(e,t),t.economicAdvantage=this.calculateEconomicAdvantage(e,t),this.shouldAdaptBehavior()&&this.adaptStrategy(e,t),this.strategyChangeTimer++,this.strategyChangeTimer>=this.strategyDuration&&(this.currentStrategy=this.selectNewStrategy(e,t),this.strategyChangeTimer=0,this.strategyDuration=Math.floor(3*Math.random())+2),this.executeStrategy(e,t)}selectInitialStrategy(){const e=["aggressive","economic","defensive","opportunistic"];return e[Math.floor(Math.random()*e.length)]}selectNewStrategy(e,t){if(t.threatLevel>.7)return Math.random()<.7?"defensive":"aggressive";if(t.economicAdvantage<-.3)return Math.random()<.6?"economic":"opportunistic";if(t.economicAdvantage>.3)return Math.random()<.6?"aggressive":"opportunistic";const i=["aggressive","economic","defensive","opportunistic"];return i[Math.floor(Math.random()*i.length)]}adaptStrategy(e,t){const i=e.player.fleet.homeSystem;i.frigates+i.cruisers+i.battleships>5&&t.threatLevel>.5&&(this.currentStrategy=Math.random()<.6?"defensive":"aggressive");e.player.resources.metalIncome+e.player.resources.energyIncome>2e4&&t.economicAdvantage<0&&(this.currentStrategy=Math.random()<.5?"economic":"aggressive")}executeStrategy(e,t){switch(this.currentStrategy){case"aggressive":return this.makeAggressiveDecision(e,t);case"economic":return this.makeEconomicDecision(e,t);case"defensive":return this.makeDefensiveDecision(e,t);case"opportunistic":return this.makeOpportunisticDecision(e,t)}}makeAggressiveDecision(e,t){const i=t.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships>=4){const a=e.player.fleet.homeSystem,s=this.planAggressiveAttack(i,a);if(s&&this.hasAvailableFleet(t,s))return{type:"attack",attackTarget:"player_home",attackFleet:s}}return this.canAffordBuild(t.resources,"frigate",2)?{type:"build",buildType:"frigate",buildQuantity:Math.floor(3*Math.random())+1}:this.canAffordBuild(t.resources,"cruiser")?{type:"build",buildType:"cruiser",buildQuantity:1}:{type:"wait"}}makeEconomicDecision(e,t){if(t.resources.metalIncome+t.resources.energyIncome<2e4)if(t.resources.metalIncome<=t.resources.energyIncome){if(this.canAffordBuild(t.resources,"mine"))return{type:"build",buildType:"mine",buildQuantity:1}}else if(this.canAffordBuild(t.resources,"reactor"))return{type:"build",buildType:"reactor",buildQuantity:1};const i=t.fleet.homeSystem;return i.frigates+i.cruisers+i.battleships<3&&this.canAffordBuild(t.resources,"cruiser")?{type:"build",buildType:"cruiser",buildQuantity:1}:{type:"wait"}}makeDefensiveDecision(e,t){const i=t.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships<8){const i=e.player.fleet.homeSystem,a=this.getDefensiveCounter(i);if(this.canAffordBuild(t.resources,a))return{type:"build",buildType:a,buildQuantity:1}}return t.resources.energy>=2500&&Math.random()<.4?{type:"scan",scanType:"deep"}:{type:"wait"}}makeOpportunisticDecision(e,t){const i=e.player.fleet.homeSystem;if(i.frigates+i.cruisers+i.battleships<=2&&t.fleet.homeSystem.frigates+t.fleet.homeSystem.cruisers+t.fleet.homeSystem.battleships>=3){const e={frigates:Math.floor(.8*t.fleet.homeSystem.frigates),cruisers:Math.floor(.8*t.fleet.homeSystem.cruisers),battleships:Math.floor(.8*t.fleet.homeSystem.battleships)};if(this.hasAvailableFleet(t,e))return{type:"attack",attackTarget:"player_home",attackFleet:e}}return e.player.resources.metalIncome+e.player.resources.energyIncome>t.resources.metalIncome+t.resources.energyIncome?this.makeEconomicDecision(e,t):this.canAffordBuild(t.resources,"cruiser")?{type:"build",buildType:"cruiser",buildQuantity:1}:this.canAffordBuild(t.resources,"frigate")?{type:"build",buildType:"frigate",buildQuantity:2}:{type:"wait"}}planAggressiveAttack(e,t){if(e.frigates+e.cruisers+e.battleships<2)return null;const i=.7+.2*Math.random();return{frigates:Math.floor(e.frigates*i),cruisers:Math.floor(e.cruisers*i),battleships:Math.floor(e.battleships*i)}}getDefensiveCounter(e){switch(this.getDominantUnitType(e)){case"frigate":return"battleship";case"cruiser":return"frigate";case"battleship":return"cruiser"}}}class w{constructor(e){t(this,"aiArchetype"),t(this,"aiState"),this.aiArchetype=this.createArchetype(e),this.aiState=this.initializeAIState(e)}createArchetype(e){switch(e){case"aggressor":return new M;case"economist":return new I;case"trickster":return new D;case"hybrid":return new E;default:throw new Error(`Unknown AI archetype: ${e}`)}}initializeAIState(e){return{resources:{metal:1e4,energy:1e4,metalIncome:1e4,energyIncome:1e4},fleet:{homeSystem:{frigates:0,cruisers:0,battleships:0},inTransit:{outbound:[]}},economy:{reactors:0,mines:0,constructionQueue:[]},intelligence:{lastScanTurn:0,knownEnemyFleet:{frigates:0,cruisers:0,battleships:0},scanAccuracy:.7,lastScanData:null,misinformationActive:!1},archetype:e,behaviorProbabilities:this.getBehaviorProbabilities(e),threatLevel:0,economicAdvantage:0}}getBehaviorProbabilities(e){switch(e){case"aggressor":return{militaryFocus:.8,economicFocus:.2,aggressionLevel:.9,deceptionChance:.1,adaptiveVariation:.2};case"economist":return{militaryFocus:.25,economicFocus:.75,aggressionLevel:.3,deceptionChance:.1,adaptiveVariation:.25};case"trickster":return{militaryFocus:.4,economicFocus:.3,aggressionLevel:.6,deceptionChance:.7,adaptiveVariation:.3};case"hybrid":return{militaryFocus:.6,economicFocus:.6,aggressionLevel:.5,deceptionChance:.2,adaptiveVariation:.4}}}processTurn(e){this.updateAIState(e);const t=this.aiArchetype.makeDecision(e,this.aiState);return this.aiState.lastPlayerAction=t,t}updateAIState(e){this.aiState.resources={...e.ai.resources},this.aiState.fleet={...e.ai.fleet},this.aiState.economy={...e.ai.economy},this.aiState.intelligence={...e.ai.intelligence},this.aiState.threatLevel=this.calculateThreatLevel(e),this.aiState.economicAdvantage=this.calculateEconomicAdvantage(e)}calculateThreatLevel(e){const t=e.player.fleet.homeSystem,i=this.aiState.fleet.homeSystem,a=this.calculateFleetStrength(t),s=this.calculateFleetStrength(i);if(0===s)return 1;const r=a/s;return Math.min(1,Math.max(0,r-.5))}calculateEconomicAdvantage(e){const t=e.player.resources.metalIncome+e.player.resources.energyIncome,i=this.aiState.resources.metalIncome+this.aiState.resources.energyIncome;return t+i===0?0:(i-t)/(i+t)}calculateFleetStrength(e){return 1*e.frigates+2.5*e.cruisers+5*e.battleships}getAIState(){return{...this.aiState}}getArchetype(){return this.aiState.archetype}}class F{canAffordScan(e,t){const i=g[t];if(!i)throw new Error(`Unknown scan type: ${t}`);return e.resources.metal>=i.metal&&e.resources.energy>=i.energy}deductScanCost(e,t){const i=g[t];if(!i)throw new Error(`Unknown scan type: ${t}`);e.resources.metal-=i.metal,e.resources.energy-=i.energy}performBasicScan(e,t){const i=e.fleet.homeSystem,a=i.frigates+i.cruisers+i.battleships,s=1+2*(Math.random()-.5)*.3;return{scanType:"basic",timestamp:t,fleetData:{frigates:Math.max(0,Math.round(a*s)),cruisers:0,battleships:0},accuracy:.7,dataAge:0}}performDeepScan(e,t){const i=e.fleet.homeSystem,a=e=>{const t=1+2*(Math.random()-.5)*.1;return Math.max(0,Math.round(e*t))};return{scanType:"deep",timestamp:t,fleetData:{frigates:a(i.frigates),cruisers:a(i.cruisers),battleships:a(i.battleships)},economicData:{reactors:e.economy.reactors,mines:e.economy.mines},accuracy:.9,dataAge:0}}performAdvancedScan(e,t){const i=e.fleet.homeSystem,a=i.frigates+i.cruisers+i.battleships;e.economy.constructionQueue;let s=this.determineStrategicIntent(e);const r=this.categorizeFleetSize(a);return{scanType:"advanced",timestamp:t,fleetData:{frigates:"small"===r?Math.floor(.6*a):"medium"===r?Math.floor(.5*a):Math.floor(.4*a),cruisers:Math.floor(.3*a),battleships:Math.floor(.1*a)},strategicIntent:s,accuracy:.95,dataAge:0}}determineStrategicIntent(e){const t=e.fleet.homeSystem,i=t.frigates+t.cruisers+t.battleships,a=e.economy.constructionQueue;e.economy.reactors,e.economy.mines;const s=a.filter(e=>["frigate","cruiser","battleship"].includes(e.unitType)).length,r=a.filter(e=>["reactor","mine"].includes(e.unitType)).length;return s>r&&i>100?"Major offensive operations planned within 2-3 turns. Heavy military buildup detected.":r>s?"Focusing on economic expansion. Defensive posture likely for next few turns.":i<50?"Rebuilding phase detected. Vulnerable to immediate pressure.":t.battleships>t.frigates+t.cruisers?"Heavy battleship focus suggests anti-frigate strategy preparation.":t.frigates>t.cruisers+t.battleships?"Frigate swarm tactics detected. Likely targeting cruiser-heavy fleets.":"Balanced development approach. Strategic intentions unclear."}categorizeFleetSize(e){return e<100?"small":e<500?"medium":"large"}storeScanResult(e,t){t.dataAge=0,e.intelligence.scanHistory||(e.intelligence.scanHistory=[]),e.intelligence.scanHistory.push(t),e.intelligence.lastScanTurn=t.timestamp,t.fleetData&&(e.intelligence.knownEnemyFleet={frigates:t.fleetData.frigates||0,cruisers:t.fleetData.cruisers||0,battleships:t.fleetData.battleships||0}),e.intelligence.scanAccuracy=t.accuracy,e.intelligence.scanHistory&&e.intelligence.scanHistory.length>10&&(e.intelligence.scanHistory=e.intelligence.scanHistory.slice(-10))}applyMisinformation(e,t){if(Math.random()<t){const t={...e};if(t.isMisinformation=!0,t.fleetData){const e=.5;t.fleetData={frigates:Math.max(0,Math.round((t.fleetData.frigates||0)*(1+2*(Math.random()-.5)*e))),cruisers:Math.max(0,Math.round((t.fleetData.cruisers||0)*(1+2*(Math.random()-.5)*e))),battleships:Math.max(0,Math.round((t.fleetData.battleships||0)*(1+2*(Math.random()-.5)*e)))}}return t.accuracy*=.5,t}return e}ageIntelligenceData(e,t){e.intelligence.scanHistory&&e.intelligence.scanHistory.forEach(e=>{e.dataAge=t-e.timestamp,e.accuracy=Math.max(.1,e.accuracy-e.dataAge*d)})}calculateIntelligenceGap(e,t){const i=this.getLatestScan(e);if(!i)return{lastKnownFleet:{frigates:0,cruisers:0,battleships:0},lastScanTurn:0,estimatedInTransit:0,confidence:0};const a=t-i.timestamp,s=Math.max(0,1-a*d),r=a>2?Math.floor(.3*(e.intelligence.knownEnemyFleet.frigates+e.intelligence.knownEnemyFleet.cruisers+e.intelligence.knownEnemyFleet.battleships)):0;return{lastKnownFleet:e.intelligence.knownEnemyFleet,lastScanTurn:i.timestamp,estimatedInTransit:r,confidence:s}}getLatestScan(e){const t=e.intelligence.scanHistory;return t&&t.length>0?t[t.length-1]:null}getScansByType(e,t){return e.intelligence.scanHistory?.filter(e=>e.scanType===t)||[]}formatScanResult(e){const t=e.dataAge>0?` (${e.dataAge} turns old)`:" (fresh)",i=e.isMisinformation?" [UNRELIABLE]":"";let a=`${e.scanType.toUpperCase()} SCAN - Turn ${e.timestamp}${t}${i}\n`;if(a+=`Accuracy: ${Math.round(100*e.accuracy)}%\n`,e.fleetData){a+="Fleet Composition:\n",a+=`  Frigates: ${e.fleetData.frigates||0}\n`,a+=`  Cruisers: ${e.fleetData.cruisers||0}\n`,a+=`  Battleships: ${e.fleetData.battleships||0}\n`;a+=`  Total Ships: ${(e.fleetData.frigates||0)+(e.fleetData.cruisers||0)+(e.fleetData.battleships||0)}\n`}return e.economicData&&(a+="Economic Infrastructure:\n",a+=`  Reactors: ${e.economicData.reactors}\n`,a+=`  Mines: ${e.economicData.mines}\n`),e.strategicIntent&&(a+="Strategic Assessment:\n",a+=`  ${e.strategicIntent}\n`),a}formatIntelligenceGap(e,t){let i="INTELLIGENCE ASSESSMENT\n";return i+=`Last scan: ${t-e.lastScanTurn} turns ago (Turn ${e.lastScanTurn})\n`,i+=`Data confidence: ${Math.round(100*e.confidence)}%\n`,e.estimatedInTransit>0&&(i+=`WARNING: Estimated ${e.estimatedInTransit} ships may be in transit (invisible to scans)\n`),i+="Last known fleet composition:\n",i+=`  Frigates: ${e.lastKnownFleet.frigates}\n`,i+=`  Cruisers: ${e.lastKnownFleet.cruisers}\n`,i+=`  Battleships: ${e.lastKnownFleet.battleships}\n`,e.confidence<.5&&(i+="CAUTION: Intelligence data is highly unreliable. Consider new scan.\n"),i}performScan(e,t,i,a){if(!this.canAffordScan(e,i))return null;let s;switch(this.deductScanCost(e,i),i){case"basic":s=this.performBasicScan(t,a);break;case"deep":s=this.performDeepScan(t,a);break;case"advanced":s=this.performAdvancedScan(t,a);break;default:throw new Error(`Unknown scan type: ${i}`)}return s=this.applyMisinformation(s,e.intelligence.misinformationChance||p),this.storeScanResult(e,s),s}}class C{constructor(e={}){t(this,"gameState"),t(this,"economyEngine"),t(this,"aiEngine"),t(this,"intelligenceEngine"),this.economyEngine=new A,this.aiEngine=new w(e.aiArchetype||"hybrid"),this.intelligenceEngine=new F,this.gameState=this.initializeGameState(e)}initializeGameState(e){const t=e.startingResources||{metal:1e4,energy:1e4},i=()=>({resources:{metal:t.metal,energy:t.energy,metalIncome:1e4,energyIncome:1e4},fleet:{homeSystem:{frigates:50,cruisers:20,battleships:10},inTransit:{outbound:[]}},economy:{reactors:0,mines:0,constructionQueue:[]},intelligence:{lastScanTurn:0,knownEnemyFleet:{frigates:0,cruisers:0,battleships:0},scanAccuracy:.7,scanHistory:[],misinformationChance:.2}});return{turn:1,player:i(),ai:i(),combatLog:[],gamePhase:"early",isGameOver:!1,playerHasBeenAttacked:!1,aiHasBeenAttacked:!1}}processTurn(e){const t=[],i=[];try{this.processIncomePhase();this.processAIPhase();const e=this.processCombatPhase();i.push(...e);const a=this.checkVictoryConditions();return a.gameEnded||(this.prepareNextTurn(),this.updateGamePhase()),{success:!0,combatEvents:i,gameEnded:a.gameEnded,winner:a.winner,victoryType:a.victoryType,errors:t}}catch(a){return t.push(`Turn processing failed: ${a instanceof Error?a.message:"Unknown error"}`),{success:!1,combatEvents:i,gameEnded:!1,errors:t}}}updateGamePhase(){const e=this.gameState.turn;this.gameState.gamePhase=e<=5?"early":e<=15?"mid":e<=25?"late":"endgame"}processIncomePhase(){this.economyEngine.calculateIncome(this.gameState.player),this.economyEngine.processConstruction(this.gameState.player),this.economyEngine.calculateIncome(this.gameState.ai),this.economyEngine.processConstruction(this.gameState.ai),this.intelligenceEngine.ageIntelligenceData(this.gameState.player,this.gameState.turn),this.intelligenceEngine.ageIntelligenceData(this.gameState.ai,this.gameState.turn)}processAIPhase(){const e=this.aiEngine.processTurn(this.gameState);return this.applyAIDecision(e),e}applyAIDecision(e){switch(e.type){case"build":e.buildType&&e.buildQuantity&&this.applyAIBuildDecision(e.buildType,e.buildQuantity);break;case"attack":e.attackFleet&&e.attackTarget&&this.applyAIAttackDecision(e.attackFleet,e.attackTarget);break;case"scan":e.scanType&&this.applyAIScanDecision(e.scanType)}}applyAIBuildDecision(e,t){let i;if("reactor"===e||"mine"===e){const a="reactor"===e?this.gameState.ai.economy.reactors:this.gameState.ai.economy.mines;i=this.createStructureBuildOrderInternal(e,t,a)}else i=this.createUnitBuildOrderInternal(e,t);this.economyEngine.addBuildOrder(this.gameState.ai,i)}applyAIAttackDecision(e,t){const i=this.gameState.ai.fleet.homeSystem;if(i.frigates>=e.frigates&&i.cruisers>=e.cruisers&&i.battleships>=e.battleships){i.frigates-=e.frigates,i.cruisers-=e.cruisers,i.battleships-=e.battleships;const a={composition:e,target:t,arrivalTurn:this.gameState.turn+1,returnTurn:this.gameState.turn+3,missionType:"outbound"};this.gameState.ai.fleet.inTransit.outbound.push(a)}}applyAIScanDecision(e){this.intelligenceEngine.performScan(this.gameState.ai,this.gameState.player,e,this.gameState.turn)}createStructureBuildOrderInternal(e,t,i){return f(e,t,i)}createUnitBuildOrderInternal(e,t){const i=k[e];return b(e,t,i)}processCombatPhase(){const e=[],t=this.processPlayerFleetMovements();e.push(...t);const i=this.processAIFleetMovements();return e.push(...i),this.gameState.combatLog.push(...e),e}processPlayerFleetMovements(){const e=[],t=this.gameState.player.fleet.inTransit.outbound,{updated:i,combatMovements:a,returning:s}=S(t,this.gameState.turn);this.gameState.player.fleet.inTransit.outbound=i;for(const r of a){const t=v(r,this.gameState.ai.fleet.homeSystem,this.gameState.turn);this.gameState.ai.fleet.homeSystem=t.updatedDefenderFleet,t.returningFleet&&this.gameState.player.fleet.inTransit.outbound.push(t.returningFleet),this.gameState.aiHasBeenAttacked=!0,this.returnOperationalCosts(this.gameState.player,t.combatResult.attackerCasualties),this.returnOperationalCosts(this.gameState.ai,t.combatResult.defenderCasualties);const i={turn:this.gameState.turn,attacker:"player",attackerFleet:r.composition,defenderFleet:this.gameState.ai.fleet.homeSystem,outcome:t.combatResult.outcome,casualties:{attacker:t.combatResult.attackerCasualties,defender:t.combatResult.defenderCasualties},survivors:{attacker:t.combatResult.attackerSurvivors,defender:t.combatResult.defenderSurvivors}};e.push(i)}for(const r of s)if(r.arrivalTurn<=this.gameState.turn){const e=this.gameState.player.fleet.homeSystem;e.frigates+=r.composition.frigates,e.cruisers+=r.composition.cruisers,e.battleships+=r.composition.battleships}else this.gameState.player.fleet.inTransit.outbound.push(r);return e}processAIFleetMovements(){const e=[],t=this.gameState.ai.fleet.inTransit.outbound,{updated:i,combatMovements:a,returning:s}=S(t,this.gameState.turn);this.gameState.ai.fleet.inTransit.outbound=i;for(const r of a){const t=v(r,this.gameState.player.fleet.homeSystem,this.gameState.turn);this.gameState.player.fleet.homeSystem=t.updatedDefenderFleet,t.returningFleet&&this.gameState.ai.fleet.inTransit.outbound.push(t.returningFleet),this.gameState.playerHasBeenAttacked=!0,this.returnOperationalCosts(this.gameState.ai,t.combatResult.attackerCasualties),this.returnOperationalCosts(this.gameState.player,t.combatResult.defenderCasualties);const i={turn:this.gameState.turn,attacker:"ai",attackerFleet:r.composition,defenderFleet:this.gameState.player.fleet.homeSystem,outcome:t.combatResult.outcome,casualties:{attacker:t.combatResult.attackerCasualties,defender:t.combatResult.defenderCasualties},survivors:{attacker:t.combatResult.attackerSurvivors,defender:t.combatResult.defenderSurvivors}};e.push(i)}for(const r of s)if(r.arrivalTurn<=this.gameState.turn){const e=this.gameState.ai.fleet.homeSystem;e.frigates+=r.composition.frigates,e.cruisers+=r.composition.cruisers,e.battleships+=r.composition.battleships}else this.gameState.ai.fleet.inTransit.outbound.push(r);return e}checkVictoryConditions(){const e=this.isPlayerEconomicallyEliminated(this.gameState.player),t=this.isPlayerEconomicallyEliminated(this.gameState.ai);if(e&&!t)return this.gameState.isGameOver=!0,this.gameState.winner="ai",this.gameState.victoryType="economic",{gameEnded:!0,winner:"ai",victoryType:"economic"};if(t&&!e)return this.gameState.isGameOver=!0,this.gameState.winner="player",this.gameState.victoryType="economic",{gameEnded:!0,winner:"player",victoryType:"economic"};if(e&&t)return this.gameState.isGameOver=!0,this.gameState.winner="ai",this.gameState.victoryType="economic",{gameEnded:!0,winner:"ai",victoryType:"economic"};const i=this.isPlayerMilitarilyEliminated(this.gameState.player),a=this.isPlayerMilitarilyEliminated(this.gameState.ai);return i&&!a?(this.gameState.isGameOver=!0,this.gameState.winner="ai",this.gameState.victoryType="military",{gameEnded:!0,winner:"ai",victoryType:"military"}):a&&!i?(this.gameState.isGameOver=!0,this.gameState.winner="player",this.gameState.victoryType="military",{gameEnded:!0,winner:"player",victoryType:"military"}):i&&a?(this.gameState.isGameOver=!0,this.gameState.winner="ai",this.gameState.victoryType="military",{gameEnded:!0,winner:"ai",victoryType:"military"}):{gameEnded:!1}}isPlayerEconomicallyEliminated(e){const t=this.economyEngine.isEconomyStalled(e),i=e.resources.metal<=0&&e.resources.energy<=0;return t&&i}isPlayerMilitarilyEliminated(e){if(!T(e.fleet.homeSystem,e.fleet.inTransit.outbound))return!1;return e===this.gameState.player?this.gameState.playerHasBeenAttacked||!1:this.gameState.aiHasBeenAttacked||!1}returnOperationalCosts(e,t){const i=s(t);e.resources.metal+=i.metal,e.resources.energy+=i.energy}prepareNextTurn(){this.gameState.turn+=1}getGameState(){return{...this.gameState}}getCurrentTurn(){return this.gameState.turn}getGamePhase(){return this.gameState.gamePhase}isGameOver(){return this.gameState.isGameOver}getWinner(){return this.gameState.winner}getVictoryType(){return this.gameState.victoryType}getCombatLog(){return[...this.gameState.combatLog]}resetGame(e={}){this.gameState=this.initializeGameState(e),this.aiEngine=new w(e.aiArchetype||"hybrid")}validateGameState(){const e=[];this.gameState.turn<1&&e.push("Turn number must be positive"),(this.gameState.player.resources.metal<0||this.gameState.player.resources.energy<0)&&e.push("Player resources cannot be negative"),(this.gameState.ai.resources.metal<0||this.gameState.ai.resources.energy<0)&&e.push("AI resources cannot be negative");const t=this.gameState.player.fleet.homeSystem,i=this.gameState.ai.fleet.homeSystem;return(t.frigates<0||t.cruisers<0||t.battleships<0)&&e.push("Player fleet counts cannot be negative"),(i.frigates<0||i.cruisers<0||i.battleships<0)&&e.push("AI fleet counts cannot be negative"),this.gameState.isGameOver&&!this.gameState.winner&&e.push("Game is over but no winner is set"),this.gameState.winner&&!this.gameState.isGameOver&&e.push("Winner is set but game is not over"),{isValid:0===e.length,errors:e}}getGameStatistics(){const e=this.gameState.player.fleet.homeSystem,t=this.gameState.ai.fleet.homeSystem;return{turn:this.gameState.turn,gamePhase:this.gameState.gamePhase,playerStats:{totalFleetSize:e.frigates+e.cruisers+e.battleships,netIncome:this.economyEngine.getNetIncome(this.gameState.player),economicStructures:this.gameState.player.economy.reactors+this.gameState.player.economy.mines},aiStats:{totalFleetSize:t.frigates+t.cruisers+t.battleships,netIncome:this.economyEngine.getNetIncome(this.gameState.ai),economicStructures:this.gameState.ai.economy.reactors+this.gameState.ai.economy.mines},combatEvents:this.gameState.combatLog.length}}}export{C as G};
//# sourceMappingURL=engine-BWJrWsiH.js.map
