var e=Object.defineProperty,t=(t,r,n)=>((t,r,n)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[r]=n)(t,"symbol"!=typeof r?r+"":r,n);const r={reactor:{buildCost:{metal:900,energy:1200},buildTime:1,incomeBonus:{metal:0,energy:500}},mine:{buildCost:{metal:1500,energy:600},buildTime:1,incomeBonus:{metal:500,energy:0}}},n={metal:1e4,energy:1e4};function s(e){const t=[];e.quantity<=0&&t.push("Build order quantity must be positive"),e.turnsRemaining<0&&t.push("Turns remaining cannot be negative"),e.resourceDrainPerTurn.metal<0&&t.push("Metal drain per turn cannot be negative"),e.resourceDrainPerTurn.energy<0&&t.push("Energy drain per turn cannot be negative");return["frigate","cruiser","battleship","reactor","mine"].includes(e.unitType)||t.push(`Invalid unit type: ${e.unitType}`),{isValid:0===t.length,errors:t}}function i(e,t){const n=r[e].buildCost,s=Math.pow(1+.5*t,1.2);return{metal:Math.ceil(n.metal*s),energy:Math.ceil(n.energy*s)}}function a(e,t){return{metal:n.metal+t*r.mine.incomeBonus.metal,energy:n.energy+e*r.reactor.incomeBonus.energy}}function u(e){let t=0,r=0;for(const n of e)t+=n.resourceDrainPerTurn.metal,r+=n.resourceDrainPerTurn.energy;return{metal:t,energy:r}}function o(e,t){return{metal:e.metal-t.metal,energy:e.energy-t.energy}}function c(e,t,n){const s=i(e,n);return{unitType:e,quantity:t,turnsRemaining:r[e].buildTime,resourceDrainPerTurn:{metal:s.metal*t,energy:s.energy*t}}}function l(e,t,r){return{unitType:e,quantity:t,turnsRemaining:r.buildTime,resourceDrainPerTurn:{metal:r.buildCost.metal*t,energy:r.buildCost.energy*t}}}function p(e){const t=[],r=[];for(const n of e){const e={...n,turnsRemaining:n.turnsRemaining-1};e.turnsRemaining<=0?t.push(e):r.push(e)}return{completedOrders:t,remainingQueue:r}}function m(e,t){const r=t.resourceDrainPerTurn.metal*t.turnsRemaining,n=t.resourceDrainPerTurn.energy*t.turnsRemaining;return e.metal>=r&&e.energy>=n}function g(e,t){return e.metal>=t.resourceDrainPerTurn.metal&&e.energy>=t.resourceDrainPerTurn.energy}function h(e,t,n=10){const s=function(e,t){const n=i(e,t),s=r[e].incomeBonus;return"reactor"===e?n.energy/s.energy:"mine"===e?n.metal/s.metal:1/0}(e,t);return s<=n}const f={frigate:{buildTime:1,buildCost:{metal:4,energy:2},upkeepCost:{metal:2,energy:1},effectiveness:{vsFrigate:1,vsCruiser:1.5,vsBattleship:.7}},cruiser:{buildTime:2,buildCost:{metal:10,energy:6},upkeepCost:{metal:5,energy:3},effectiveness:{vsFrigate:.7,vsCruiser:1,vsBattleship:1.5}},battleship:{buildTime:4,buildCost:{metal:20,energy:12},upkeepCost:{metal:10,energy:6},effectiveness:{vsFrigate:1.5,vsCruiser:.7,vsBattleship:1}}};function y(e){return e.frigates+e.cruisers+e.battleships}function b(e){return{metal:e.frigates*f.frigate.upkeepCost.metal+e.cruisers*f.cruiser.upkeepCost.metal+e.battleships*f.battleship.upkeepCost.metal,energy:e.frigates*f.frigate.upkeepCost.energy+e.cruisers*f.cruiser.upkeepCost.energy+e.battleships*f.battleship.upkeepCost.energy}}function d(){return.8+.4*Math.random()}function v(e,t,r,n=d()){if(0===e)return 0;const s=f[t];return(e*s.effectiveness.vsFrigate*r.frigates+e*s.effectiveness.vsCruiser*r.cruisers+e*s.effectiveness.vsBattleship*r.battleships)*n}function T(e,t,r){const n={frigate:d(),cruiser:d(),battleship:d()};return v(e.frigates,"frigate",t,n.frigate)+v(e.cruisers,"cruiser",t,n.cruiser)+v(e.battleships,"battleship",t,n.battleship)}function C(e,t){let r;return r=t<e.arrivalTurn?"outbound":t===e.arrivalTurn?"combat":"returning",{...e,missionType:r}}function M(e,t){const r=[],n=[],s=[];for(const i of e){const e=C(i,t);"combat"===e.missionType?n.push(e):"returning"===e.missionType?s.push(e):r.push(e)}return{updated:r,combatMovements:n,returning:s}}function k(e,t,r){let n;n="close_battle"===t?.4+.2*Math.random():r?.1+.2*Math.random():.7+.2*Math.random();const s=Math.floor(e.frigates*n),i=Math.floor(e.cruisers*n),a=Math.floor(e.battleships*n),u={frigates:s,cruisers:i,battleships:a};return{survivors:{frigates:e.frigates-s,cruisers:e.cruisers-i,battleships:e.battleships-a},casualties:u}}function B(e,t){if(y(e)>0)return!1;for(const r of t)if(y(r.composition)>0)return!1;return!0}function P(e,t,r){const n=function(e,t){const r=T(e,t),n=T(t,e),s=function(e,t){if(0===e)return"decisive_defender";if(0===t)return"decisive_attacker";const r=e/t;return r>=2?"decisive_attacker":r<=.5?"decisive_defender":"close_battle"}(r,n),i=k(e,s,"decisive_attacker"===s),a=k(t,s,"decisive_defender"===s),u=n>0?r/n:1/0;return{outcome:s,attackerSurvivors:i.survivors,defenderSurvivors:a.survivors,attackerCasualties:i.casualties,defenderCasualties:a.casualties,strengthRatio:u}}(e.composition,t),s=function(e,t,r){return 0===y(e)?null:{composition:e,target:"home",arrivalTurn:r+1,returnTurn:r+1,missionType:"returning"}}(n.attackerSurvivors,0,r);return{combatResult:n,returningFleet:s,updatedDefenderFleet:n.defenderSurvivors}}class D{constructor(e,r){t(this,"archetype"),t(this,"behaviorProbabilities"),this.archetype=e,this.behaviorProbabilities=r}calculateThreatLevel(e,t){const r=e.player.fleet.homeSystem,n=t.fleet.homeSystem,s=this.calculateFleetStrength(r),i=this.calculateFleetStrength(n);if(0===i)return 1;const a=s/i;return Math.min(1,Math.max(0,a-.5))}calculateEconomicAdvantage(e,t){const r=e.player.resources.metalIncome+e.player.resources.energyIncome,n=t.resources.metalIncome+t.resources.energyIncome;return r+n===0?0:(n-r)/(n+r)}calculateFleetStrength(e){return 1*e.frigates+2.5*e.cruisers+5*e.battleships}shouldAdaptBehavior(){return Math.random()<this.behaviorProbabilities.adaptiveVariation}canAffordBuild(e,t,r=1){const n=this.getBuildCosts(t);return e.metal>=n.metal*r&&e.energy>=n.energy*r}getBuildCosts(e){return{frigate:{metal:4,energy:2},cruiser:{metal:10,energy:6},battleship:{metal:20,energy:12},reactor:{metal:900,energy:1200},mine:{metal:1500,energy:600}}[e]}getOptimalFleetComposition(e,t){if(t){const r=this.getDominantUnitType(t);return this.getCounterComposition(r,e)}return{frigates:Math.floor(.5*e),cruisers:Math.floor(.3*e),battleships:Math.floor(.2*e)}}getDominantUnitType(e){const t=e.frigates+e.cruisers+e.battleships;if(0===t)return"frigate";const r=e.frigates/t,n=e.cruisers/t,s=e.battleships/t;return r>=n&&r>=s?"frigate":n>=s?"cruiser":"battleship"}getCounterComposition(e,t){switch(e){case"frigate":return{frigates:0,cruisers:0,battleships:Math.floor(t)};case"cruiser":return{frigates:Math.floor(t),cruisers:0,battleships:0};case"battleship":return{frigates:0,cruisers:Math.floor(t),battleships:0}}}validateDecision(e,t){switch(e.type){case"build":return!(!e.buildType||!e.buildQuantity)&&this.canAffordBuild(t.resources,e.buildType,e.buildQuantity);case"attack":return!(!e.attackFleet||!e.attackTarget)&&this.hasAvailableFleet(t,e.attackFleet);case"scan":if(!e.scanType)return!1;const r={basic:1e3,deep:2500,advanced:4e3};return t.resources.energy>=r[e.scanType];case"wait":return!0;default:return!1}}hasAvailableFleet(e,t){const r=e.fleet.homeSystem;return r.frigates>=t.frigates&&r.cruisers>=t.cruisers&&r.battleships>=t.battleships}}const S={basic:{metal:0,energy:1e3},deep:{metal:0,energy:2500},advanced:{metal:0,energy:4e3}},F=.2,R=.1;function V(e){const t=[];e.turn<1&&t.push("Turn number must be at least 1");const r=function(e,t){const r=[];t<=5&&"early"!==e?r.push(`Turn ${t} should be in 'early' phase, but is '${e}'`):t>5&&t<=15&&"mid"!==e?r.push(`Turn ${t} should be in 'mid' phase, but is '${e}'`):t>15&&t<=25&&"late"!==e?r.push(`Turn ${t} should be in 'late' phase, but is '${e}'`):t>25&&"endgame"!==e&&r.push(`Turn ${t} should be in 'endgame' phase, but is '${e}'`);return{isValid:0===r.length,errors:r}}(e.gamePhase,e.turn);r.isValid||t.push(...r.errors);const n=$(e.player);n.isValid||t.push(...n.errors.map(e=>`Player: ${e}`));const s=$(e.ai);return s.isValid||t.push(...s.errors.map(e=>`AI: ${e}`)),e.isGameOver&&(e.winner||t.push("Game over state requires a winner"),e.victoryType||t.push("Game over state requires a victory type")),{isValid:0===t.length,errors:t}}function $(e){const t=[],r=function(e){const t=[];e.metal<-1e5&&t.push("Metal resources are unreasonably negative");e.energy<-1e5&&t.push("Energy resources are unreasonably negative");e.metalIncome<-5e4&&t.push("Metal income is unreasonably negative");e.energyIncome<-5e4&&t.push("Energy income is unreasonably negative");return{isValid:0===t.length,errors:t}}(e.resources);r.isValid||t.push(...r.errors);const n=function(e){const t=[];e.homeSystem.frigates<0&&t.push("Frigate count cannot be negative");e.homeSystem.cruisers<0&&t.push("Cruiser count cannot be negative");e.homeSystem.battleships<0&&t.push("Battleship count cannot be negative");for(const r of e.inTransit.outbound)(r.composition.frigates<0||r.composition.cruisers<0||r.composition.battleships<0)&&t.push("In-transit fleet composition cannot have negative values"),r.arrivalTurn<=0&&t.push("Arrival turn must be positive"),r.returnTurn<=r.arrivalTurn&&t.push("Return turn must be after arrival turn"),["outbound","combat","returning"].includes(r.missionType)||t.push(`Invalid mission type: ${r.missionType}`);return{isValid:0===t.length,errors:t}}(e.fleet);n.isValid||t.push(...n.errors);const s=function(e){const t=[];e.reactors<0&&t.push("Reactor count cannot be negative");e.mines<0&&t.push("Mine count cannot be negative");for(const r of e.constructionQueue){r.quantity<=0&&t.push("Build order quantity must be positive"),r.turnsRemaining<0&&t.push("Turns remaining cannot be negative"),(r.resourceDrainPerTurn.metal<0||r.resourceDrainPerTurn.energy<0)&&t.push("Resource drain per turn cannot be negative");["frigate","cruiser","battleship","reactor","mine"].includes(r.unitType)||t.push(`Invalid unit type in build order: ${r.unitType}`)}return{isValid:0===t.length,errors:t}}(e.economy);return s.isValid||t.push(...s.errors),e.intelligence.lastScanTurn<0&&t.push("Last scan turn cannot be negative"),(e.intelligence.scanAccuracy<0||e.intelligence.scanAccuracy>1)&&t.push("Scan accuracy must be between 0 and 1"),{isValid:0===t.length,errors:t}}export{n as B,R as C,F as M,S,f as U,u as a,b,a as c,o as d,m as e,g as f,y as g,D as h,h as i,c as j,l as k,M as l,P as m,B as n,V as o,p,s as v};
//# sourceMappingURL=models-D6RH2t8d.js.map
