var e=Object.defineProperty,t=(t,s,a)=>((t,s,a)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[s]=a)(t,"symbol"!=typeof s?s+"":s,a);import{U as s,S as a,j as r,k as i}from"./models-D6RH2t8d.js";var n={};class c{constructor(e=!0){t(this,"theme"),t(this,"colorsEnabled"),t(this,"colorSupported"),this.theme=this.getDefaultTheme(),this.colorSupported=this.detectColorSupport(),this.colorsEnabled=e&&this.colorSupported}getDefaultTheme(){return{victory:"[32m",defeat:"[31m",neutral:"[33m",player:"[34m",enemy:"[35m",frigate:"[36m",cruiser:"[33m",battleship:"[31m",casualties:"[91m",survivors:"[92m",reset:"[0m"}}validateNumericValue(e,t,s=0,a=Number.MAX_SAFE_INTEGER){return"number"!=typeof e||isNaN(e)||!isFinite(e)?0:e<s?s:e>a?a:Math.floor(e)}detectColorSupport(){const e=n.TERM?.toLowerCase()||"",t=n.COLORTERM?.toLowerCase()||"",s=["color","ansi","truecolor","256color"].some(s=>e.includes(s)||t.includes(s)),a=n.FORCE_COLOR;if(n.NO_COLOR)return!1;if(a)return!0;return process.stdout.isTTY&&(s||"dumb"!==e)}colorize(e,t){if("string"!=typeof e)return String(e||"");if(!this.colorsEnabled)return e;try{const s=this.theme[t],a=this.theme.reset;return s&&a?`${s}${e}${a}`:e}catch(s){return e}}formatFleetComposition(e,t=!0){e&&"object"==typeof e||(e={frigates:0,cruisers:0,battleships:0});const s=this.validateNumericValue(e.frigates,"frigates"),a=this.validateNumericValue(e.cruisers,"cruisers"),r=this.validateNumericValue(e.battleships,"battleships");if(!t||!this.colorsEnabled)return`${s}F, ${a}C, ${r}B`;try{const e=this.colorize(`${s}F`,"frigate"),t=this.colorize(`${a}C`,"cruiser");return`${e}, ${t}, ${this.colorize(`${r}B`,"battleship")}`}catch(i){return`${s}F, ${a}C, ${r}B`}}formatBattleOutcome(e,t){"string"!=typeof e&&(e="unknown_outcome"),"attacker"!==t&&"defender"!==t&&(t="attacker");const s=e.toUpperCase().replace(/_/g," ");if(!this.colorsEnabled)return s;try{let a;switch(e){case"decisive_attacker":a="attacker"===t?"victory":"defeat";break;case"decisive_defender":a="defender"===t?"victory":"defeat";break;default:a="neutral"}return this.colorize(s,a)}catch(a){return s}}formatCasualties(e,t){const s=this.validateNumericValue(e,"casualties"),a=this.validateNumericValue(t,"total"),r=`${s} ships (${a>0?Math.round(s/a*100):0}%)`;if(!this.colorsEnabled)return r;try{return this.colorize(r,"casualties")}catch(i){return r}}formatSurvivors(e){const t=`${this.validateNumericValue(e,"survivors")} ships`;if(!this.colorsEnabled)return t;try{return this.colorize(t,"survivors")}catch(s){return t}}formatPlayerIdentifier(e,t){if("string"!=typeof t&&(t=String(t||"")),"player"!==e&&"ai"!==e&&(e="player"),!this.colorsEnabled)return t;try{const s="player"===e?"player":"enemy";return this.colorize(t,s)}catch(s){return t}}createSeparator(e=60,t="-"){const s=this.validateNumericValue(e,"length",1,200);"string"==typeof t&&0!==t.length||(t="-");const a=t.charAt(0);try{const e=a.repeat(s);return this.colorsEnabled?this.colorize(e,"neutral"):e}catch(r){return"-".repeat(Math.min(s,60))}}setColorsEnabled(e){this.colorsEnabled=e&&this.colorSupported}areColorsEnabled(){return this.colorsEnabled}isColorSupported(){return this.colorSupported}setTheme(e){this.theme={...this.theme,...e}}getTheme(){return{...this.theme}}resetTheme(){this.theme=this.getDefaultTheme()}}new c;class o{calculateUnitEffectiveness(e,t,a){if(0===t)return 0;const r=s[e],i=a.frigates+a.cruisers+a.battleships;if(0===i)return 1;const n=a.frigates/i,c=a.cruisers/i,o=a.battleships/i;return r.effectiveness.vsFrigate*n+r.effectiveness.vsCruiser*c+r.effectiveness.vsBattleship*o}determineBattleAdvantage(e,t,s){const a=this.calculateUnitEffectiveness(e,t,s);let r,i;return a>=1.3?(r="strong",i=`${e}s have strong effectiveness against enemy composition`):a<=.7?(r="weak",i=`${e}s are at a disadvantage against enemy composition`):(r="neutral",i=`${e}s have balanced effectiveness against enemy composition`),{unitType:e,advantage:r,explanation:i,effectivenessRatio:a}}calculateTacticalAdvantages(e,t){const s=[];return e.frigates>0&&s.push(this.determineBattleAdvantage("frigate",e.frigates,t)),e.cruisers>0&&s.push(this.determineBattleAdvantage("cruiser",e.cruisers,t)),e.battleships>0&&s.push(this.determineBattleAdvantage("battleship",e.battleships,t)),s}calculateCasualtyPercentages(e){const t=e.attackerFleet.frigates+e.attackerFleet.cruisers+e.attackerFleet.battleships,s=e.defenderFleet.frigates+e.defenderFleet.cruisers+e.defenderFleet.battleships,a=e.casualties.attacker.frigates+e.casualties.attacker.cruisers+e.casualties.attacker.battleships,r=e.casualties.defender.frigates+e.casualties.defender.cruisers+e.casualties.defender.battleships,i=t>0?a/t:0,n=s>0?r/s:0;return{attackerLossRate:Math.round(100*i)/100,defenderLossRate:Math.round(100*n)/100}}calculateEffectivenessRatios(e,t){const s=this.calculateUnitEffectiveness("frigate",e.frigates,t),a=this.calculateUnitEffectiveness("cruiser",e.cruisers,t),r=this.calculateUnitEffectiveness("battleship",e.battleships,t),i=e.frigates+e.cruisers+e.battleships,n=i>0?(s*e.frigates+a*e.cruisers+r*e.battleships)/i:0,c=this.calculateUnitEffectiveness("frigate",t.frigates,e),o=this.calculateUnitEffectiveness("cruiser",t.cruisers,e),l=this.calculateUnitEffectiveness("battleship",t.battleships,e),u=t.frigates+t.cruisers+t.battleships,d=u>0?(c*t.frigates+o*t.cruisers+l*t.battleships)/u:0;return{attackerEffectiveness:Math.round(100*n)/100,defenderEffectiveness:Math.round(100*d)/100}}determineBattlePhases(e,t,s){const a=[],r=e.frigates+e.cruisers+e.battleships,i=t.frigates+t.cruisers+t.battleships,n=i>0?r/i:1/0;let c,o,l,u;e.frigates>1.5*t.frigates?(c="attacker",o="Attacker gains early advantage with superior frigate numbers"):t.frigates>1.5*e.frigates?(c="defender",o="Defender controls opening with frigate superiority"):(c="neutral",o="Opening engagement is evenly matched"),a.push({phase:"opening",description:o,advantage:c,strengthRatio:n});const d=e.cruisers+e.battleships,h=t.cruisers+t.battleships;let m,g;switch(d>1.3*h?(l="attacker",u="Attacker dominates with superior heavy units"):h>1.3*d?(l="defender",u="Defender holds firm with heavy unit advantage"):(l="neutral",u="Main engagement sees fierce fighting on both sides"),a.push({phase:"main",description:u,advantage:l,strengthRatio:n}),s){case"decisive_attacker":m="attacker",g="Attacker achieves decisive victory in final phase";break;case"decisive_defender":m="defender",g="Defender successfully repels attack in final phase";break;case"close_battle":m="neutral",g="Battle concludes with heavy losses on both sides"}return a.push({phase:"cleanup",description:g,advantage:m,strengthRatio:n}),a}createEnhancedCombatDisplay(e){return{event:e,tacticalAdvantages:this.calculateTacticalAdvantages(e.attackerFleet,e.defenderFleet),battlePhases:this.determineBattlePhases(e.attackerFleet,e.defenderFleet,e.outcome),effectivenessRatios:this.calculateEffectivenessRatios(e.attackerFleet,e.defenderFleet),casualtyPercentages:this.calculateCasualtyPercentages(e)}}analyzeFleetBalance(e){const t=e.frigates+e.cruisers+e.battleships;if(0===t)return{balance:"unbalanced",recommendation:"Build a fleet to defend your system",strengths:[],weaknesses:["No defensive capability"]};const s=e.frigates/t,a=e.cruisers/t,r=e.battleships/t,i=[],n=[];return s>.6?(i.push("Fast response capability"),i.push("Cost-effective against cruisers"),n.push("Vulnerable to battleships"),{balance:"frigate_heavy",recommendation:"Consider adding battleships for better balance",strengths:i,weaknesses:n}):a>.5?(i.push("Strong against battleships"),i.push("Balanced offensive capability"),n.push("Vulnerable to frigate swarms"),{balance:"cruiser_heavy",recommendation:"Add frigates for anti-cruiser defense",strengths:i,weaknesses:n}):r>.4?(i.push("Devastating against frigates"),i.push("High individual unit strength"),n.push("Vulnerable to cruiser focus fire"),n.push("High resource investment"),{balance:"battleship_heavy",recommendation:"Add cruisers for better tactical flexibility",strengths:i,weaknesses:n}):(i.push("Tactical flexibility"),i.push("No major vulnerabilities"),{balance:"balanced",recommendation:"Maintain current composition balance",strengths:i,weaknesses:["Higher resource requirements for balance"]})}}class l{constructor(e={}){t(this,"config"),t(this,"colorManager"),t(this,"tacticalAnalyzer"),this.config={combatDisplay:{showTacticalAnalysis:!0,showBattlePhases:!0,detailedCasualties:!0,useEnhancedFormatting:!0,...e.combatDisplay},...e},this.colorManager=new c(!1!==e.useColors),this.tacticalAnalyzer=new o}displayGameState(e){this.displayPlayerResources(e.player),this.displayFleetStatus(e.player),this.displayConstructionQueue(e.player),this.displayIntelligence(e.player)}displayPlayerResources(e){const t=e.resources;t.metalIncome,t.energyIncome}displayFleetStatus(e){const t=e.fleet.homeSystem,s=(t.frigates,t.cruisers,t.battleships,e.fleet.inTransit.outbound);s.length>0&&s.forEach((e,t)=>{e.composition.frigates,e.composition.cruisers,e.composition.battleships,this.getFleetMovementStatus(e)})}displayConstructionQueue(e){const t=e.economy.constructionQueue;t.length>0&&t.forEach((e,t)=>{this.getConstructionProgress(e)});const s=e.economy;(s.reactors>0||s.mines>0)&&(s.reactors,s.mines)}displayIntelligence(e){const t=e.intelligence;if(t.lastScanTurn>0){Math.max(0,t.lastScanTurn);const e=t.knownEnemyFleet;e.frigates,e.cruisers,e.battleships}}displayDetailedStatus(e,t){if(e.combatLog.length>0){e.combatLog.slice(-3).forEach((e,t)=>{})}}displayHelp(){}displayTurnResult(e){if(e.errors.length>0&&e.errors.forEach(e=>{}),e.combatEvents&&e.combatEvents.length>0)e.combatEvents.forEach((e,t)=>{try{!1!==this.config.combatDisplay?.useEnhancedFormatting?this.displayCombatEvent(e):this.displayBasicCombatEvent(e)}catch(s){}});else try{this.colorManager.colorize("No combat this turn.","neutral")}catch(t){}this.displayTurnSummary(e),e.gameEnded}displayBasicCombatEvent(e){try{if(!e||"object"!=typeof e)throw new Error("Invalid combat event data");e.attacker,e.attacker,this.calculateFleetTotal(e.attackerFleet),this.calculateFleetTotal(e.defenderFleet),"string"==typeof e.outcome&&e.outcome,this.calculateFleetTotal(e.casualties?.attacker),this.calculateFleetTotal(e.casualties?.defender),this.calculateFleetTotal(e.survivors?.attacker),this.calculateFleetTotal(e.survivors?.defender)}catch(t){this.displayBasicCombatEventFallback(e)}}displayTurnSummary(e){try{if(!e||!Array.isArray(e.combatEvents))return;const s=e.combatEvents.length;if(s>0){let s=0,a=0;e.combatEvents.forEach((e,t)=>{try{if(!e||"object"!=typeof e)return;const t=e.attacker,r="string"==typeof e.outcome?e.outcome:"";"player"===t&&("decisive_attacker"===r||r.includes("attacker"))||"player"!==t&&("decisive_defender"===r||r.includes("defender"))?s++:"close_battle"!==r&&""!==r&&a++}catch(r){}});try{}catch(t){}}}catch(t){}}validateCombatEvent(e){const t=[];if(!e||"object"!=typeof e)return t.push("Combat event is null or not an object"),{isValid:!1,errors:t};("number"!=typeof e.turn||e.turn<1)&&t.push("Invalid turn number"),"player"!==e.attacker&&"ai"!==e.attacker&&t.push("Invalid attacker type"),e.outcome&&"string"==typeof e.outcome||t.push("Missing or invalid battle outcome");const s=this.validateFleetComposition(e.attackerFleet,"attacker fleet"),a=this.validateFleetComposition(e.defenderFleet,"defender fleet");t.push(...s.errors),t.push(...a.errors);const r=this.validateFleetComposition(e.casualties?.attacker,"attacker casualties"),i=this.validateFleetComposition(e.casualties?.defender,"defender casualties");t.push(...r.errors),t.push(...i.errors);const n=this.validateFleetComposition(e.survivors?.attacker,"attacker survivors"),c=this.validateFleetComposition(e.survivors?.defender,"defender survivors");if(t.push(...n.errors),t.push(...c.errors),0===t.length){const s=(e.attackerFleet?.frigates||0)+(e.attackerFleet?.cruisers||0)+(e.attackerFleet?.battleships||0),a=(e.casualties?.attacker?.frigates||0)+(e.casualties?.attacker?.cruisers||0)+(e.casualties?.attacker?.battleships||0),r=(e.survivors?.attacker?.frigates||0)+(e.survivors?.attacker?.cruisers||0)+(e.survivors?.attacker?.battleships||0);s!==a+r&&t.push(`Attacker fleet math inconsistency: ${s} original ≠ ${a} casualties + ${r} survivors`);const i=(e.defenderFleet?.frigates||0)+(e.defenderFleet?.cruisers||0)+(e.defenderFleet?.battleships||0),n=(e.casualties?.defender?.frigates||0)+(e.casualties?.defender?.cruisers||0)+(e.casualties?.defender?.battleships||0),c=(e.survivors?.defender?.frigates||0)+(e.survivors?.defender?.cruisers||0)+(e.survivors?.defender?.battleships||0);i!==n+c&&t.push(`Defender fleet math inconsistency: ${i} original ≠ ${n} casualties + ${c} survivors`)}return{isValid:0===t.length,errors:t}}validateFleetComposition(e,t){const s=[];if(!e)return s.push(`Missing ${t} data`),{isValid:!1,errors:s};if("object"!=typeof e)return s.push(`Invalid ${t} data type`),{isValid:!1,errors:s};const a=["frigates","cruisers","battleships"];for(const r of a){const a=e[r];("number"!=typeof a||isNaN(a)||!isFinite(a)||a<0)&&s.push(`Invalid ${r} count in ${t}: ${a}`)}return{isValid:0===s.length,errors:s}}createFallbackCombatEvent(e){return{turn:"number"==typeof e?.turn?e.turn:0,attacker:"player"===e?.attacker||"ai"===e?.attacker?e.attacker:"ai",attackerFleet:this.createSafeFleetComposition(e?.attackerFleet),defenderFleet:this.createSafeFleetComposition(e?.defenderFleet),outcome:"string"==typeof e?.outcome?e.outcome:"unknown_outcome",casualties:{attacker:this.createSafeFleetComposition(e?.casualties?.attacker),defender:this.createSafeFleetComposition(e?.casualties?.defender)},survivors:{attacker:this.createSafeFleetComposition(e?.survivors?.attacker),defender:this.createSafeFleetComposition(e?.survivors?.defender)}}}createSafeFleetComposition(e){return{frigates:this.validateShipCount(e?.frigates),cruisers:this.validateShipCount(e?.cruisers),battleships:this.validateShipCount(e?.battleships)}}validateShipCount(e){return"number"==typeof e&&isFinite(e)&&e>=0?Math.floor(e):0}displayCombatEvent(e){const t=this.validateCombatEvent(e);if(!t.isValid){t.errors.forEach(e=>{});try{const t=this.createFallbackCombatEvent(e);if(!this.validateCombatEvent(t).isValid)return void this.displayBasicCombatEventFallback(e);e=t}catch(s){return}}try{const t="player"===e.attacker?"YOUR":"ENEMY",s="player"===e.attacker?"ENEMY":"YOUR",a="player"===e.attacker?"player":"ai",r="player"===e.attacker?"ai":"player",i=this.tacticalAnalyzer.createEnhancedCombatDisplay(e);this.colorManager.formatPlayerIdentifier(a,t),this.colorManager.formatPlayerIdentifier(r,s);this.displayDetailedFleetComposition("Attacker",e.attackerFleet,a),this.displayDetailedFleetComposition("Defender",e.defenderFleet,r),!1!==this.config.combatDisplay?.showTacticalAnalysis&&i.tacticalAdvantages.length>0&&i.tacticalAdvantages.forEach(e=>{const t="strong"===e.advantage?"victory":"weak"===e.advantage?"defeat":"neutral";this.colorManager.colorize(`${e.advantage.toUpperCase()}`,t)}),!1!==this.config.combatDisplay?.showBattlePhases&&i.battlePhases.length>0&&i.battlePhases.forEach((e,t)=>{this.displayBattlePhase(e,t+1)});const n="player"===e.attacker?"attacker":"defender";this.colorManager.formatBattleOutcome(e.outcome,n);this.displayBattleExplanation(e.outcome,i.effectivenessRatios),!1!==this.config.combatDisplay?.detailedCasualties?this.displayEnhancedCasualties(e,i.casualtyPercentages,t,s):this.displayBasicCasualties(e,t,s),this.displayEnhancedSurvivors(e,t,s,a,r)}catch(s){try{this.displayBasicCombatEvent(e)}catch(a){this.displayBasicCombatEventFallback(e)}}}displayBasicCombatEventFallback(e){try{"number"==typeof e?.turn&&e.turn,"string"==typeof e?.outcome&&e.outcome;if(e?.attackerFleet){this.calculateFleetTotal(e.attackerFleet)}if(e?.defenderFleet){this.calculateFleetTotal(e.defenderFleet)}}catch(t){}}calculateFleetTotal(e){try{if(!e||"object"!=typeof e)return 0;const t="number"==typeof e.frigates&&isFinite(e.frigates)?Math.max(0,e.frigates):0,s="number"==typeof e.cruisers&&isFinite(e.cruisers)?Math.max(0,e.cruisers):0,a="number"==typeof e.battleships&&isFinite(e.battleships)?Math.max(0,e.battleships):0;return Math.floor(t+s+a)}catch(t){return 0}}formatBattleOutcome(e){try{return"string"!=typeof e?"UNKNOWN OUTCOME":e.toUpperCase().replace(/_/g," ")}catch(t){return"UNKNOWN OUTCOME"}}displayDetailedFleetComposition(e,t,s){t.frigates,t.cruisers,t.battleships,this.colorManager.formatPlayerIdentifier(s,e),this.colorManager.formatFleetComposition(t)}displayBattlePhase(e,t){e.phase.charAt(0).toUpperCase(),e.phase.slice(1),this.colorManager.createSeparator(30,"·"),this.formatPhaseAdvantage(e.advantage);if(e.strengthRatio!==1/0&&e.strengthRatio>0){this.formatStrengthRatio(e.strengthRatio)}}formatPhaseAdvantage(e){let t,s;switch(e){case"attacker":t="player",s="ATTACKER";break;case"defender":t="enemy",s="DEFENDER";break;case"neutral":t="neutral",s="BALANCED"}return this.colorManager.colorize(s,t)}formatStrengthRatio(e){let t,s;return e>=2?(t=`${e.toFixed(1)}:1 (Overwhelming Attacker)`,s="victory"):e>=1.5?(t=`${e.toFixed(1)}:1 (Strong Attacker)`,s="victory"):e>=1.2?(t=`${e.toFixed(1)}:1 (Slight Attacker)`,s="neutral"):e>=.8?(t=`${e.toFixed(1)}:1 (Balanced)`,s="neutral"):e>=.5?(t=`${e.toFixed(1)}:1 (Slight Defender)`,s="neutral"):(t=`${e.toFixed(1)}:1 (Strong Defender)`,s="defeat"),this.colorManager.colorize(t,s)}displayBattleExplanation(e,t){let s;switch(e){case"decisive_attacker":s=t.attackerEffectiveness>1.5?"Attacker achieved overwhelming tactical superiority":"Attacker overwhelmed defender through superior numbers";break;case"decisive_defender":s=t.defenderEffectiveness>1.5?"Defender exploited tactical advantages for decisive victory":"Defender successfully repelled attack with superior positioning";break;case"close_battle":s="Evenly matched forces resulted in heavy casualties on both sides";break;default:s="Battle concluded with significant losses"}}displayBasicCasualties(e,t,s){e.casualties.attacker.frigates,e.casualties.attacker.cruisers,e.casualties.attacker.battleships,e.casualties.defender.frigates,e.casualties.defender.cruisers,e.casualties.defender.battleships}displayEnhancedCasualties(e,t,s,a){const r=e.attackerFleet.frigates+e.attackerFleet.cruisers+e.attackerFleet.battleships,i=e.defenderFleet.frigates+e.defenderFleet.cruisers+e.defenderFleet.battleships,n=e.casualties.attacker.frigates+e.casualties.attacker.cruisers+e.casualties.attacker.battleships,c=e.casualties.defender.frigates+e.casualties.defender.cruisers+e.casualties.defender.battleships;Math.round(100*t.attackerLossRate);this.colorManager.formatCasualties(n,r);const o=this.getCasualtySeverity(t.attackerLossRate);this.colorManager.colorize(`[${o}]`,this.getCasualtySeverityColor(t.attackerLossRate));Math.round(100*t.defenderLossRate);this.colorManager.formatCasualties(c,i);const l=this.getCasualtySeverity(t.defenderLossRate);this.colorManager.colorize(`[${l}]`,this.getCasualtySeverityColor(t.defenderLossRate));if(n>0){if(this.formatCasualtyBreakdown(e.casualties.attacker)&&t.attackerLossRate>.6){this.getCasualtyTacticalContext(e.casualties.attacker,e.attackerFleet)}}if(c>0){if(this.formatCasualtyBreakdown(e.casualties.defender)&&t.defenderLossRate>.6){this.getCasualtyTacticalContext(e.casualties.defender,e.defenderFleet)}}(n>0||c>0)&&this.displayComparativeLossAnalysis(t,s,a)}displayEnhancedSurvivors(e,t,s,a,r){const i=e.survivors.attacker.frigates+e.survivors.attacker.cruisers+e.survivors.attacker.battleships,n=e.survivors.defender.frigates+e.survivors.defender.cruisers+e.survivors.defender.battleships,c=e.attackerFleet.frigates+e.attackerFleet.cruisers+e.attackerFleet.battleships,o=e.defenderFleet.frigates+e.defenderFleet.cruisers+e.defenderFleet.battleships;if(i>0||n>0){if(i>0){this.colorManager.formatSurvivors(i),this.colorManager.formatPlayerIdentifier(a,t);const s=Math.round(i/c*100);this.colorManager.colorize(`${s}% survival`,this.getSurvivalRateColor(s)),this.colorManager.formatFleetComposition(e.survivors.attacker),this.getSurvivorTacticalContext(e.survivors.attacker,e.attackerFleet,"attacker")}if(n>0){this.colorManager.formatSurvivors(n),this.colorManager.formatPlayerIdentifier(r,s);const t=Math.round(n/o*100);this.colorManager.colorize(`${t}% survival`,this.getSurvivalRateColor(t)),this.colorManager.formatFleetComposition(e.survivors.defender),this.getSurvivorTacticalContext(e.survivors.defender,e.defenderFleet,"defender"),this.assessDefensiveStrength(e.survivors.defender)}}else{this.colorManager.colorize("Total fleet annihilation - no survivors","casualties");"decisive_attacker"===e.outcome||e.outcome}}formatCasualtyBreakdown(e){const t=[];return e.frigates>0&&t.push(this.colorManager.colorize(`${e.frigates}F`,"frigate")),e.cruisers>0&&t.push(this.colorManager.colorize(`${e.cruisers}C`,"cruiser")),e.battleships>0&&t.push(this.colorManager.colorize(`${e.battleships}B`,"battleship")),t.join(", ")}getCasualtySeverity(e){return e>=.8?"DEVASTATING":e>=.6?"HEAVY":e>=.4?"MODERATE":e>=.2?"LIGHT":e>0?"MINIMAL":"NONE"}getCasualtySeverityColor(e){return e>=.6?"casualties":e>=.4?"defeat":e>=.2?"neutral":"victory"}getCasualtyTacticalContext(e,t){const s=e.frigates+e.cruisers+e.battleships,a=t.frigates+t.cruisers+t.battleships;if(0===s||0===a)return null;const r=t.frigates>0?e.frigates/t.frigates:0,i=t.cruisers>0?e.cruisers/t.cruisers:0,n=t.battleships>0?e.battleships/t.battleships:0,c=Math.max(r,i,n);return c===r&&r>.7?"Frigate screen decimated, vulnerable to cruiser attacks":c===i&&i>.7?"Cruiser force crippled, reduced anti-battleship capability":c===n&&n>.7?"Heavy units eliminated, lost primary striking power":s/a>.8?"Fleet combat effectiveness severely compromised":null}displayComparativeLossAnalysis(e,t,s){const a=e.attackerLossRate,r=e.defenderLossRate;if(Math.abs(a-r)<.1);else if(a>1.5*r){Math.round(a/r*100)}else if(r>1.5*a){Math.round(r/a*100)}}getSurvivalRateColor(e){return e>=70?"victory":e>=50?"neutral":e>=30?"defeat":"casualties"}getSurvivorTacticalContext(e,t,s){const a=e.frigates+e.cruisers+e.battleships,r=t.frigates+t.cruisers+t.battleships;if(0===a||0===r)return null;const i=a/r,n=a>0?e.frigates/a:0;a>0&&e.cruisers;const c=a>0?e.battleships/a:0;return i>.8?"attacker"===s?"Overwhelming victory, minimal losses":"Successfully repelled attack":i>.6?"attacker"===s?"Successful assault with acceptable losses":"Defended with moderate casualties":i>.4?"Bloodied but combat effective":i>.2?n>.7?"Mostly light units survived, limited striking power":c>.5?"Heavy units intact but lacking escort":"Severely weakened, requires reinforcement":"Barely escaped annihilation"}assessDefensiveStrength(e){const t=e.frigates+e.cruisers+e.battleships;return 0===t?null:t>=50?"Strong defensive capability maintained":t>=20?"Moderate defensive capability":t>=10?"Limited defensive capability":"Minimal defensive capability - vulnerable to follow-up attacks"}displayGameOver(e){e.winner,e.victoryType}displayError(e){}formatNumber(e){return e.toLocaleString()}formatIncome(e){return`${e>=0?"+":""}${this.formatNumber(e)}`}padNumber(e,t=8){return e.toString().padStart(t)}getFleetMovementStatus(e){return`${e.missionType} (arrives turn ${e.arrivalTurn})`}getConstructionProgress(e){const t=e.turnsRemaining;return 1===t?"Completes next turn":`${t} turns remaining`}}class u{constructor(){t(this,"UNIT_TYPES",["frigate","cruiser","battleship"]),t(this,"STRUCTURE_TYPES",["reactor","mine"]),t(this,"SCAN_TYPES",["basic","deep","advanced"])}processCommand(e,t){const s=e.trim();if(!s)return{success:!1,error:"No command entered"};const a=s.toLowerCase().split(/\s+/),r=a[0];try{switch(r){case"build":return this.parseBuildCommand(a,t);case"attack":return this.parseAttackCommand(a,t);case"scan":return this.parseScanCommand(a,t);case"status":return{success:!0,command:{type:"status"}};case"help":return{success:!0,command:{type:"help"}};case"end":case"endturn":case"end_turn":return{success:!0,command:{type:"end_turn"}};case"quit":case"exit":return{success:!0,command:{type:"quit"}};default:return{success:!1,error:`Unknown command: ${r}. Type 'help' for available commands.`}}}catch(i){return{success:!1,error:i instanceof Error?i.message:"Command parsing failed"}}}parseBuildCommand(e,t){if(3!==e.length)return{success:!1,error:'Build command format: "build <quantity> <unit/structure>"\nExample: "build 10 frigate" or "build 1 reactor"'};const s=e[1],a=parseInt(s,10);if(isNaN(a)||a<=0)return{success:!1,error:"Quantity must be a positive number"};if(a>1e4)return{success:!1,error:"Quantity too large (maximum: 10,000)"};const r=e[2];let i;if(this.UNIT_TYPES.includes(r))i=r;else{if(!this.STRUCTURE_TYPES.includes(r)){return{success:!1,error:`Invalid build type: ${r}. Valid types: ${[...this.UNIT_TYPES,...this.STRUCTURE_TYPES].join(", ")}`}}i=r}const n=this.validateBuildCommand(i,a,t);return n.success?{success:!0,command:{type:"build",buildType:i,quantity:a}}:n}parseAttackCommand(e,t){if(4!==e.length)return{success:!1,error:'Attack command format: "attack <frigates> <cruisers> <battleships>"\nExample: "attack 50 20 10"'};const s=parseInt(e[1],10),a=parseInt(e[2],10),r=parseInt(e[3],10);if(isNaN(s)||isNaN(a)||isNaN(r))return{success:!1,error:"Fleet numbers must be valid integers"};if(s<0||a<0||r<0)return{success:!1,error:"Fleet numbers cannot be negative"};if(0===s+a+r)return{success:!1,error:"Cannot attack with empty fleet"};const i={frigates:s,cruisers:a,battleships:r},n=this.validateAttackCommand(i,t);return n.success?{success:!0,command:{type:"attack",attackFleet:i,target:"ai_system"}}:n}parseScanCommand(e,t){if(2!==e.length)return{success:!1,error:'Scan command format: "scan <type>"\nValid types: basic, deep, advanced'};const s=e[1];if(!this.SCAN_TYPES.includes(s))return{success:!1,error:`Invalid scan type: ${s}. Valid types: ${this.SCAN_TYPES.join(", ")}`};const a=s,r=this.validateScanCommand(a,t);return r.success?{success:!0,command:{type:"scan",scanType:a}}:r}validateBuildCommand(e,t,s){const a=s.player,r=this.getBuildCosts(e),i=r.metal*t,n=r.energy*t;if(a.resources.metal<i)return{success:!1,error:`Insufficient metal. Need: ${i.toLocaleString()}, Have: ${a.resources.metal.toLocaleString()}`};if(a.resources.energy<n)return{success:!1,error:`Insufficient energy. Need: ${n.toLocaleString()}, Have: ${a.resources.energy.toLocaleString()}`};if(this.UNIT_TYPES.includes(e)){const s=this.getUpkeepCosts(e),r=s.metal*t,i=s.energy*t,n=a.resources.metalIncome-r,c=a.resources.energyIncome-i;if(n<0||c<0)return{success:!1,error:`Building ${t} ${e}(s) would cause economic stall. Upkeep: ${r} Metal, ${i} Energy per turn`}}return{success:!0}}validateAttackCommand(e,t){const s=t.player.fleet.homeSystem;return s.frigates<e.frigates?{success:!1,error:`Insufficient frigates. Need: ${e.frigates}, Have: ${s.frigates}`}:s.cruisers<e.cruisers?{success:!1,error:`Insufficient cruisers. Need: ${e.cruisers}, Have: ${s.cruisers}`}:s.battleships<e.battleships?{success:!1,error:`Insufficient battleships. Need: ${e.battleships}, Have: ${s.battleships}`}:{success:!0}}validateScanCommand(e,t){const s=t.player,r=a[e];return s.resources.energy<r.energy?{success:!1,error:`Insufficient energy for ${e} scan. Need: ${r.energy}, Have: ${s.resources.energy}`}:{success:!0}}getBuildCosts(e){return{frigate:{metal:4,energy:2},cruiser:{metal:10,energy:6},battleship:{metal:20,energy:12},reactor:{metal:900,energy:1200},mine:{metal:1500,energy:600}}[e]}getUpkeepCosts(e){return{frigate:{metal:2,energy:1},cruiser:{metal:5,energy:3},battleship:{metal:10,energy:6}}[e]}getCommandSuggestions(e){const t=e.toLowerCase().trim();return["build","attack","scan","status","help","end","quit"].filter(e=>e.startsWith(t))}validateSyntax(e){const t=e.toLowerCase().trim().split(/\s+/);if(0===t.length)return{valid:!1,error:"No command entered"};const s=t[0];switch(s){case"build":if(3!==t.length)return{valid:!1,error:"Build command requires: build <quantity> <unit/structure>"};if(isNaN(parseInt(t[1],10)))return{valid:!1,error:"Quantity must be a number"};break;case"attack":if(4!==t.length)return{valid:!1,error:"Attack command requires: attack <frigates> <cruisers> <battleships>"};for(let e=1;e<4;e++)if(isNaN(parseInt(t[e],10)))return{valid:!1,error:"Fleet numbers must be integers"};break;case"scan":if(2!==t.length)return{valid:!1,error:"Scan command requires: scan <type>"};if(!this.SCAN_TYPES.includes(t[1]))return{valid:!1,error:`Invalid scan type. Valid types: ${this.SCAN_TYPES.join(", ")}`};break;case"status":case"help":case"end":case"endturn":case"end_turn":case"quit":case"exit":break;default:return{valid:!1,error:`Unknown command: ${s}`}}return{valid:!0}}}class d{constructor(e){t(this,"gameEngine"),t(this,"pendingPlayerActions",[]),t(this,"lastTurnResult",null),this.gameEngine=e}executeCommand(e){try{switch(e.type){case"build":return this.executeBuildCommand(e);case"attack":return this.executeAttackCommand(e);case"scan":return this.executeScanCommand(e);case"status":case"help":return{success:!0,message:"Information displayed",gameStateChanged:!1};case"end_turn":return this.executeEndTurn();default:return{success:!1,message:`Unknown command type: ${e.type}`,gameStateChanged:!1}}}catch(t){return{success:!1,message:`Command execution failed: ${t instanceof Error?t.message:"Unknown error"}`,gameStateChanged:!1}}}executeBuildCommand(e){if(!e.buildType||!e.quantity)return{success:!1,message:"Invalid build command: missing build type or quantity",gameStateChanged:!1};const t=this.gameEngine.getGameState().player,a=this.getBuildCosts(e.buildType),n=a.metal*e.quantity,c=a.energy*e.quantity;if(t.resources.metal<n)return{success:!1,message:`Insufficient metal. Need: ${n.toLocaleString()}, Have: ${t.resources.metal.toLocaleString()}`,gameStateChanged:!1};if(t.resources.energy<c)return{success:!1,message:`Insufficient energy. Need: ${c.toLocaleString()}, Have: ${t.resources.energy.toLocaleString()}`,gameStateChanged:!1};let o;try{if("reactor"===e.buildType||"mine"===e.buildType){const s="reactor"===e.buildType?t.economy.reactors:t.economy.mines;o=r(e.buildType,e.quantity,s)}else{const t=s[e.buildType];o=i(e.buildType,e.quantity,t)}}catch(u){return{success:!1,message:`Failed to create build order: ${u instanceof Error?u.message:"Unknown error"}`,gameStateChanged:!1}}t.resources.metal-=n,t.resources.energy-=c,t.economy.constructionQueue.push(o),this.pendingPlayerActions.push(e);const l=e.buildType;return{success:!0,message:`Started building ${e.quantity} ${l}(s). Cost: ${n} Metal, ${c} Energy`,gameStateChanged:!0}}executeAttackCommand(e){if(!e.attackFleet||!e.target)return{success:!1,message:"Invalid attack command: missing fleet composition or target",gameStateChanged:!1};const t=this.gameEngine.getGameState(),s=t.player.fleet.homeSystem,a=e.attackFleet;if(s.frigates<a.frigates)return{success:!1,message:`Insufficient frigates. Need: ${a.frigates}, Have: ${s.frigates}`,gameStateChanged:!1};if(s.cruisers<a.cruisers)return{success:!1,message:`Insufficient cruisers. Need: ${a.cruisers}, Have: ${s.cruisers}`,gameStateChanged:!1};if(s.battleships<a.battleships)return{success:!1,message:`Insufficient battleships. Need: ${a.battleships}, Have: ${s.battleships}`,gameStateChanged:!1};s.frigates-=a.frigates,s.cruisers-=a.cruisers,s.battleships-=a.battleships;const r={composition:a,target:e.target,arrivalTurn:t.turn+1,returnTurn:t.turn+3,missionType:"outbound"};t.player.fleet.inTransit.outbound.push(r),this.pendingPlayerActions.push(e);return{success:!0,message:`Fleet launched! ${a.frigates+a.cruisers+a.battleships} ships en route to ${e.target}. Arrival: Turn ${r.arrivalTurn}, Return: Turn ${r.returnTurn}`,gameStateChanged:!0}}executeScanCommand(e){if(!e.scanType)return{success:!1,message:"Invalid scan command: missing scan type",gameStateChanged:!1};const t=this.gameEngine.getGameState(),s=t.player,r=a[e.scanType];if(s.resources.energy<r.energy)return{success:!1,message:`Insufficient energy for ${e.scanType} scan. Need: ${r.energy}, Have: ${s.resources.energy}`,gameStateChanged:!1};s.resources.energy-=r.energy;try{const a=this.performScan(e.scanType,t);return s.intelligence.lastScanTurn=t.turn,a.fleetData&&(s.intelligence.knownEnemyFleet={frigates:a.fleetData.frigates||0,cruisers:a.fleetData.cruisers||0,battleships:a.fleetData.battleships||0}),this.pendingPlayerActions.push(e),{success:!0,message:this.formatScanResult(e.scanType,a),gameStateChanged:!0}}catch(i){return{success:!1,message:`Scan failed: ${i instanceof Error?i.message:"Unknown error"}`,gameStateChanged:!1}}}executeEndTurn(){try{const e=this.gameEngine.processTurn(this.pendingPlayerActions);if(this.lastTurnResult=e,this.pendingPlayerActions=[],e.success){let t=`Turn ${this.gameEngine.getCurrentTurn()-1} completed.`;return e.combatEvents.length>0&&(t+=` ${e.combatEvents.length} combat event(s) occurred.`),e.gameEnded&&(t+=` Game Over! Winner: ${e.winner}`),{success:!0,message:t,gameStateChanged:!0}}return{success:!1,message:`Turn processing failed: ${e.errors.join(", ")}`,gameStateChanged:!1}}catch(e){return{success:!1,message:`Turn processing failed: ${e instanceof Error?e.message:"Unknown error"}`,gameStateChanged:!1}}}performScan(e,t){const s=t.ai.fleet.homeSystem,a=s.frigates+s.cruisers+s.battleships;switch(e){case"basic":const r=.7+.6*(Math.random()-.5),i=Math.max(0,Math.round(a*r));return{scanType:"basic",fleetData:{frigates:i,cruisers:0,battleships:0},message:`Enemy fleet detected: approximately ${i} ships`};case"deep":const n=e=>{const t=.9+.2*Math.random();return Math.max(0,Math.round(e*t))};return{scanType:"deep",fleetData:{frigates:n(s.frigates),cruisers:n(s.cruisers),battleships:n(s.battleships)},economicData:{reactors:t.ai.economy.reactors,mines:t.ai.economy.mines},message:`Detailed scan complete: ${n(s.frigates)} Frigates, ${n(s.cruisers)} Cruisers, ${n(s.battleships)} Battleships. Economic structures: ${t.ai.economy.reactors} Reactors, ${t.ai.economy.mines} Mines`};case"advanced":const c=this.determineAIIntent(t);return{scanType:"advanced",fleetData:{frigates:Math.floor(.5*a),cruisers:Math.floor(.3*a),battleships:Math.floor(.2*a)},strategicIntent:c,message:`Advanced scan reveals: ${c}. Estimated fleet composition provided.`};default:throw new Error(`Unknown scan type: ${e}`)}}determineAIIntent(e){const t=e.ai.fleet.homeSystem,s=t.frigates+t.cruisers+t.battleships,a=e.ai.resources.metalIncome+e.ai.resources.energyIncome,r=e.ai.economy.reactors+e.ai.economy.mines;return s>100?"AI is preparing for major offensive operations":r>3?"AI is focusing on economic expansion":a>25e3?"AI has strong economic foundation, likely planning military buildup":s<20?"AI appears to be in defensive posture":"AI strategy unclear - balanced military and economic development"}formatScanResult(e,t){return t.message||`${e} scan completed`}getBuildCosts(e){return{frigate:{metal:4,energy:2},cruiser:{metal:10,energy:6},battleship:{metal:20,energy:12},reactor:{metal:900,energy:1200},mine:{metal:1500,energy:600}}[e]}getPendingActions(){return[...this.pendingPlayerActions]}clearPendingActions(){this.pendingPlayerActions=[]}getLastTurnResult(){return this.lastTurnResult}getGameEngine(){return this.gameEngine}}class h{static handleError(e,t,s,a){const r={type:e,severity:t,message:s,context:a,timestamp:new Date,recoverable:this.isRecoverable(e,t)};switch(this.errors.push(r),this.errors.length>this.maxErrorHistory&&this.errors.shift(),t){case"critical":return{canContinue:!1,userMessage:`Critical error: ${s}. The game must restart.`,shouldRestart:!0};case"high":return{canContinue:r.recoverable,userMessage:`Serious error: ${s}. ${r.recoverable?"Attempting to continue...":"Game may be unstable."}`,shouldRestart:!r.recoverable};case"medium":return{canContinue:!0,userMessage:`Error: ${s}. Game will continue.`,shouldRestart:!1};case"low":return{canContinue:!0,userMessage:`Warning: ${s}`,shouldRestart:!1};default:return{canContinue:!0,userMessage:s,shouldRestart:!1}}}static isRecoverable(e,t){if("critical"===t)return!1;switch(e){case"validation":case"game_logic":return"high"!==t;case"runtime":return"low"===t||"medium"===t;case"user_input":return!0;case"system":return"low"===t;default:return!1}}static handleGameStateError(e){if(0===e.length)return{canContinue:!0,userMessage:"",shouldRestart:!1};const t=e.filter(e=>e.includes("negative")||e.includes("null")||e.includes("undefined")||e.includes("missing")),s=e.filter(e=>e.includes("inconsistent")||e.includes("invalid state")||e.includes("corrupted"));return t.length>0?this.handleError("validation","critical",`Game state validation failed: ${t.join(", ")}`,{allErrors:e}):s.length>0?this.handleError("validation","high",`Game state issues detected: ${s.join(", ")}`,{allErrors:e}):this.handleError("validation","medium",`Minor game state issues: ${e.join(", ")}`,{allErrors:e})}static handleTurnProcessingError(e){if(0===e.length)return{canContinue:!0,userMessage:"",shouldRestart:!1};return e.some(e=>e.includes("failed to process")||e.includes("engine failure")||e.includes("system crash"))?this.handleError("game_logic","critical",`Turn processing failed: ${e.join(", ")}`,{turnErrors:e}):this.handleError("game_logic","medium",`Turn processing issues: ${e.join(", ")}`,{turnErrors:e})}static handleUserInputError(e){return this.handleError("user_input","low",e)}static handleSystemError(e){const t=e.message.includes("memory")||e.message.includes("heap"),s=e.message.includes("file")||e.message.includes("ENOENT"),a=e.message.includes("network")||e.message.includes("connection");return t?this.handleError("system","critical",`Memory error: ${e.message}`,{error:e}):s?this.handleError("system","high",`File system error: ${e.message}`,{error:e}):a?this.handleError("system","medium",`Network error: ${e.message}`,{error:e}):this.handleError("system","high",`System error: ${e.message}`,{error:e})}static getRecentErrors(e=10){return this.errors.slice(-e)}static getErrorStatistics(){const e={validation:0,runtime:0,user_input:0,system:0,game_logic:0},t={low:0,medium:0,high:0,critical:0};let s=0;const a=new Date(Date.now()-36e5);return this.errors.forEach(r=>{e[r.type]++,t[r.severity]++,"critical"===r.severity&&r.timestamp>a&&s++}),{total:this.errors.length,byType:e,bySeverity:t,recentCritical:s}}static clearErrorHistory(){this.errors=[]}static isSystemHealthy(){const e=[],t=this.getErrorStatistics();return t.recentCritical>3&&e.push(`Too many critical errors in the last hour: ${t.recentCritical}`),t.total>50&&e.push(`High total error count: ${t.total}`),t.byType.system>5&&e.push(`Multiple system errors detected: ${t.byType.system}`),{healthy:0===e.length,issues:e}}static getRecoverySuggestions(){const e=[],t=this.getErrorStatistics();return t.byType.validation>5&&e.push("Consider restarting the game to reset the game state"),t.byType.system>3&&e.push("Check system resources (memory, disk space)"),t.byType.user_input>10&&e.push('Review command syntax - type "help" for available commands'),t.recentCritical>0&&e.push("Recent critical errors detected - restart recommended"),0===e.length&&e.push("System appears stable"),e}}t(h,"errors",[]),t(h,"maxErrorHistory",100);class m{constructor(e,s={}){t(this,"gameEngine"),t(this,"gameController"),t(this,"gameDisplay"),t(this,"inputHandler"),t(this,"config"),t(this,"isRunning",!1),this.gameEngine=e,this.gameController=new d(e),this.gameDisplay=new l(s),this.inputHandler=new u,this.config={combatDisplay:{showTacticalAnalysis:!0,showBattlePhases:!0,detailedCasualties:!0,useEnhancedFormatting:!0,...s.combatDisplay},...s}}async start(){for(this.isRunning=!0,this.displayWelcome(),this.displayGameState();this.isRunning&&!this.gameEngine.isGameOver();)await this.processPlayerTurn();this.gameEngine.isGameOver()&&this.displayGameOver()}stop(){this.isRunning=!1}displayWelcome(){}async processPlayerTurn(){let e=!1;for(;!e&&this.isRunning;)try{const t=this.gameEngine.validateGameState();if(!t.isValid){const e=h.handleGameStateError(t.errors);if(this.gameDisplay.displayError(e.userMessage),!e.canContinue)return void(this.isRunning=!1)}this.displayGameState();const s=await this.getPlayerInput();if(!s.trim())continue;const a=this.processCommandSafely(s);if(a.success&&a.command){const t=this.gameController.executeCommand(a.command);if(t.success)switch(a.command.type){case"status":this.displayDetailedStatus();break;case"help":this.displayHelp();break;case"end_turn":const t=this.gameController.getLastTurnResult();t&&this.displayTurnResult(t),e=!0;break;case"quit":return void(this.isRunning=!1)}else{const e=h.handleUserInputError(t.message);this.gameDisplay.displayError(e.userMessage)}}else{const e=h.handleUserInputError(a.error||"Invalid command");this.gameDisplay.displayError(e.userMessage)}}catch(t){const e=h.handleSystemError(t instanceof Error?t:new Error("Unknown error"));if(this.gameDisplay.displayError(e.userMessage),!e.canContinue)return void(this.isRunning=!1)}}async getPlayerInput(){return new Promise(e=>{process.stdout.write("\n> ");const t=s=>{const a=s.toString().trim();process.stdin.removeListener("data",t),e(a)};process.stdin.on("data",t)})}displayGameState(){const e=this.gameEngine.getGameState();this.gameDisplay.displayGameState(e)}displayDetailedStatus(){const e=this.gameEngine.getGameState(),t=this.gameEngine.getGameStatistics();this.gameDisplay.displayDetailedStatus(e,t)}displayHelp(){this.gameDisplay.displayHelp()}displayTurnResult(e){this.gameDisplay.displayTurnResult(e)}displayGameOver(){const e=this.gameEngine.getGameState();this.gameDisplay.displayGameOver(e)}getGameEngine(){return this.gameEngine}processCommandSafely(e){try{return this.inputHandler.processCommand(e,this.gameEngine.getGameState())}catch(t){return{success:!1,error:`Command processing failed: ${t instanceof Error?t.message:"Unknown error"}`}}}performHealthCheck(){const e=h.isSystemHealthy(),t=h.getRecoverySuggestions();return{healthy:e.healthy,issues:e.issues,suggestions:t}}displayHealthCheck(){const e=this.performHealthCheck();e.healthy||e.issues.forEach(e=>{}),e.suggestions.length>0&&e.suggestions.forEach(e=>{});h.getErrorStatistics()}resetGame(e){try{this.gameEngine.resetGame(e),h.clearErrorHistory()}catch(t){const e=h.handleSystemError(t instanceof Error?t:new Error("Reset failed"));this.gameDisplay.displayError(e.userMessage)}}async shutdown(){const e=this.performHealthCheck();e.healthy||e.issues.forEach(e=>{}),this.isRunning=!1}}export{m as C,d as G};
//# sourceMappingURL=ui-CW801Oi8.js.map
