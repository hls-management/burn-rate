{"version":3,"file":"main-DFBIT6aU.js","sources":["../../../src/GameInitializer.ts","../../../src/web/WebErrorHandler.ts","../../../src/web/HelpSystem.ts","../../../src/web/WebInterface.ts","../../../src/web/WebDisplay.ts","../../../src/web/GameStateManager.ts","../../../src/web/GameConfigManager.ts","../../../src/web/main.ts"],"sourcesContent":["import { GameEngine, GameEngineConfig } from './engine/GameEngine.js';\nimport { CLIInterface, CLIConfig } from './ui/CLIInterface.js';\nimport { AIArchetype } from './models/AI.js';\n\nexport interface GameInitializationConfig {\n  aiArchetype?: AIArchetype;\n  startingResources?: {\n    metal: number;\n    energy: number;\n  };\n  cliConfig?: CLIConfig;\n  seed?: number;\n}\n\nexport class GameInitializer {\n  /**\n   * Initializes and validates a complete game setup\n   */\n  public static async initializeGame(config: GameInitializationConfig = {}): Promise<{\n    gameEngine: GameEngine;\n    cliInterface: CLIInterface;\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    try {\n      // Set random seed if provided\n      if (config.seed !== undefined) {\n        // Note: JavaScript doesn't have built-in seeded random, but we can document this for future enhancement\n        console.log(`Game seed: ${config.seed}`);\n      }\n\n      // Validate configuration\n      const validationResult = this.validateConfiguration(config);\n      if (!validationResult.isValid) {\n        errors.push(...validationResult.errors);\n      }\n\n      // Create game engine configuration\n      const gameEngineConfig: GameEngineConfig = {\n        aiArchetype: config.aiArchetype || this.selectRandomAIArchetype(),\n        startingResources: config.startingResources || {\n          metal: 10000,\n          energy: 10000\n        }\n      };\n\n      // Initialize game engine\n      const gameEngine = new GameEngine(gameEngineConfig);\n\n      // Validate initial game state\n      const gameStateValidation = gameEngine.validateGameState();\n      if (!gameStateValidation.isValid) {\n        errors.push(...gameStateValidation.errors);\n      }\n\n      // Create CLI configuration\n      const cliConfig: CLIConfig = {\n        showDebugInfo: config.cliConfig?.showDebugInfo || false,\n        autoAdvanceTurn: config.cliConfig?.autoAdvanceTurn || false\n      };\n\n      // Initialize CLI interface\n      const cliInterface = new CLIInterface(gameEngine, cliConfig);\n\n      // Final validation\n      const finalValidation = this.validateGameSetup(gameEngine, cliInterface);\n      if (!finalValidation.isValid) {\n        errors.push(...finalValidation.errors);\n      }\n\n      return {\n        gameEngine,\n        cliInterface,\n        isValid: errors.length === 0,\n        errors\n      };\n\n    } catch (error) {\n      errors.push(`Game initialization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      \n      // Return minimal setup even on failure\n      const fallbackEngine = new GameEngine();\n      const fallbackCLI = new CLIInterface(fallbackEngine);\n      \n      return {\n        gameEngine: fallbackEngine,\n        cliInterface: fallbackCLI,\n        isValid: false,\n        errors\n      };\n    }\n  }\n\n  /**\n   * Validates the initialization configuration\n   */\n  private static validateConfiguration(config: GameInitializationConfig): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    // Validate AI archetype\n    if (config.aiArchetype) {\n      const validArchetypes: AIArchetype[] = ['aggressor', 'economist', 'trickster', 'hybrid'];\n      if (!validArchetypes.includes(config.aiArchetype)) {\n        errors.push(`Invalid AI archetype: ${config.aiArchetype}. Valid options: ${validArchetypes.join(', ')}`);\n      }\n    }\n\n    // Validate starting resources\n    if (config.startingResources) {\n      if (config.startingResources.metal < 0 || config.startingResources.energy < 0) {\n        errors.push('Starting resources cannot be negative');\n      }\n      \n      if (config.startingResources.metal > 1000000 || config.startingResources.energy > 1000000) {\n        errors.push('Starting resources are unreasonably high (max: 1,000,000)');\n      }\n    }\n\n    // Validate seed\n    if (config.seed !== undefined) {\n      if (!Number.isInteger(config.seed) || config.seed < 0) {\n        errors.push('Seed must be a non-negative integer');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validates the complete game setup\n   */\n  private static validateGameSetup(gameEngine: GameEngine, cliInterface: CLIInterface): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    try {\n      // Validate game engine\n      if (!gameEngine) {\n        errors.push('Game engine is null or undefined');\n        return { isValid: false, errors };\n      }\n\n      // Validate CLI interface\n      if (!cliInterface) {\n        errors.push('CLI interface is null or undefined');\n        return { isValid: false, errors };\n      }\n\n      // Validate game state\n      const gameState = gameEngine.getGameState();\n      if (!gameState) {\n        errors.push('Game state is null or undefined');\n        return { isValid: false, errors };\n      }\n\n      // Validate turn number\n      if (gameState.turn < 1) {\n        errors.push('Invalid turn number');\n      }\n\n      // Validate player state\n      if (!gameState.player) {\n        errors.push('Player state is missing');\n      } else {\n        if (gameState.player.resources.metal < 0 || gameState.player.resources.energy < 0) {\n          errors.push('Player has negative resources');\n        }\n      }\n\n      // Validate AI state\n      if (!gameState.ai) {\n        errors.push('AI state is missing');\n      } else {\n        if (gameState.ai.resources.metal < 0 || gameState.ai.resources.energy < 0) {\n          errors.push('AI has negative resources');\n        }\n      }\n\n      // Validate game is not already over\n      if (gameEngine.isGameOver()) {\n        errors.push('Game is already over at initialization');\n      }\n\n    } catch (error) {\n      errors.push(`Game setup validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Selects a random AI archetype for variety\n   */\n  private static selectRandomAIArchetype(): AIArchetype {\n    const archetypes: AIArchetype[] = ['aggressor', 'economist', 'trickster', 'hybrid'];\n    const randomIndex = Math.floor(Math.random() * archetypes.length);\n    return archetypes[randomIndex];\n  }\n\n  /**\n   * Creates a quick-start game with default settings\n   */\n  public static async createQuickStartGame(): Promise<{\n    gameEngine: GameEngine;\n    cliInterface: CLIInterface;\n    isValid: boolean;\n    errors: string[];\n  }> {\n    return this.initializeGame({\n      aiArchetype: this.selectRandomAIArchetype(),\n      startingResources: {\n        metal: 10000,\n        energy: 10000\n      },\n      cliConfig: {\n        showDebugInfo: false,\n        autoAdvanceTurn: false\n      }\n    });\n  }\n\n  /**\n   * Creates a debug game with enhanced logging\n   */\n  public static async createDebugGame(): Promise<{\n    gameEngine: GameEngine;\n    cliInterface: CLIInterface;\n    isValid: boolean;\n    errors: string[];\n  }> {\n    return this.initializeGame({\n      aiArchetype: 'hybrid',\n      startingResources: {\n        metal: 50000,\n        energy: 50000\n      },\n      cliConfig: {\n        showDebugInfo: true,\n        autoAdvanceTurn: false\n      }\n    });\n  }\n\n  /**\n   * Performs a comprehensive system check\n   */\n  public static async performSystemCheck(): Promise<{\n    isHealthy: boolean;\n    checks: Array<{\n      name: string;\n      passed: boolean;\n      error?: string;\n    }>;\n  }> {\n    const checks: Array<{ name: string; passed: boolean; error?: string }> = [];\n\n    // Test game engine creation\n    try {\n      const engine = new GameEngine();\n      checks.push({ name: 'Game Engine Creation', passed: true });\n      \n      // Test game state validation\n      const validation = engine.validateGameState();\n      checks.push({ \n        name: 'Initial Game State Validation', \n        passed: validation.isValid,\n        error: validation.errors.join(', ') || undefined\n      });\n      \n      // Test turn processing\n      try {\n        const turnResult = engine.processTurn([]);\n        checks.push({ \n          name: 'Turn Processing', \n          passed: turnResult.success,\n          error: turnResult.errors.join(', ') || undefined\n        });\n      } catch (error) {\n        checks.push({ \n          name: 'Turn Processing', \n          passed: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n      \n    } catch (error) {\n      checks.push({ \n        name: 'Game Engine Creation', \n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n\n    // Test CLI interface creation\n    try {\n      const engine = new GameEngine();\n      const cli = new CLIInterface(engine);\n      checks.push({ name: 'CLI Interface Creation', passed: true });\n    } catch (error) {\n      checks.push({ \n        name: 'CLI Interface Creation', \n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n\n    // Test full game initialization\n    try {\n      const result = await this.initializeGame();\n      checks.push({ \n        name: 'Full Game Initialization', \n        passed: result.isValid,\n        error: result.errors.join(', ') || undefined\n      });\n    } catch (error) {\n      checks.push({ \n        name: 'Full Game Initialization', \n        passed: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n\n    const allPassed = checks.every(check => check.passed);\n\n    return {\n      isHealthy: allPassed,\n      checks\n    };\n  }\n}","import { GameState } from '../models/GameState.js';\n\n/**\n * Error types specific to web environment\n */\nexport enum WebErrorType {\n  DOM_ERROR = 'DOM_ERROR',\n  STORAGE_ERROR = 'STORAGE_ERROR',\n  GAME_STATE_ERROR = 'GAME_STATE_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  BROWSER_COMPATIBILITY = 'BROWSER_COMPATIBILITY',\n  PERFORMANCE_ERROR = 'PERFORMANCE_ERROR',\n  USER_INPUT_ERROR = 'USER_INPUT_ERROR'\n}\n\n/**\n * Error severity levels\n */\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\n/**\n * Error information structure\n */\nexport interface WebError {\n  type: WebErrorType;\n  severity: ErrorSeverity;\n  message: string;\n  originalError?: Error;\n  context?: any;\n  timestamp: number;\n  userAgent?: string;\n  url?: string;\n  stackTrace?: string;\n}\n\n/**\n * Recovery action that can be taken for an error\n */\nexport interface RecoveryAction {\n  label: string;\n  action: () => void | Promise<void>;\n  description?: string;\n}\n\n/**\n * Error handling configuration\n */\nexport interface ErrorHandlerConfig {\n  enableLogging?: boolean;\n  enableUserNotifications?: boolean;\n  enableRecoveryActions?: boolean;\n  maxLogEntries?: number;\n  containerId?: string;\n}\n\n/**\n * Comprehensive error handler for browser-specific scenarios\n */\nexport class WebErrorHandler {\n  private static instance: WebErrorHandler | null = null;\n  private config: ErrorHandlerConfig;\n  private errorLog: WebError[] = [];\n  private container: HTMLElement | null = null;\n  private notificationContainer: HTMLElement | null = null;\n\n  constructor(config: ErrorHandlerConfig = {}) {\n    this.config = {\n      enableLogging: true,\n      enableUserNotifications: true,\n      enableRecoveryActions: true,\n      maxLogEntries: 100,\n      ...config\n    };\n\n    if (this.config.containerId) {\n      this.container = document.getElementById(this.config.containerId);\n    }\n\n    this.setupGlobalErrorHandling();\n    this.createNotificationContainer();\n  }\n\n  /**\n   * Gets singleton instance of WebErrorHandler\n   */\n  public static getInstance(config?: ErrorHandlerConfig): WebErrorHandler {\n    if (!WebErrorHandler.instance) {\n      WebErrorHandler.instance = new WebErrorHandler(config);\n    }\n    return WebErrorHandler.instance;\n  }\n\n  /**\n   * Handles DOM manipulation errors gracefully\n   */\n  public static handleDOMError(error: Error, elementSelector: string, context?: any): void {\n    const handler = WebErrorHandler.getInstance();\n    \n    const webError: WebError = {\n      type: WebErrorType.DOM_ERROR,\n      severity: ErrorSeverity.MEDIUM,\n      message: `DOM operation failed for element '${elementSelector}': ${error.message}`,\n      originalError: error,\n      context: { elementSelector, ...context },\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      stackTrace: error.stack\n    };\n\n    handler.logError(webError);\n    \n    // Attempt recovery\n    const recoveryActions: RecoveryAction[] = [\n      {\n        label: 'Retry Operation',\n        action: () => handler.retryDOMOperation(elementSelector, context),\n        description: 'Attempt the DOM operation again'\n      },\n      {\n        label: 'Refresh Interface',\n        action: () => handler.refreshInterface(),\n        description: 'Reload the game interface'\n      }\n    ];\n\n    handler.displayUserFriendlyError(\n      'Interface Update Failed',\n      'There was a problem updating the game display. You can try refreshing the interface.',\n      recoveryActions\n    );\n  }\n\n  /**\n   * Handles localStorage and other storage failures\n   */\n  public static handleStorageError(error: Error, operation?: string): void {\n    const handler = WebErrorHandler.getInstance();\n    \n    const webError: WebError = {\n      type: WebErrorType.STORAGE_ERROR,\n      severity: ErrorSeverity.HIGH,\n      message: `Storage operation failed${operation ? ` (${operation})` : ''}: ${error.message}`,\n      originalError: error,\n      context: { operation, storageAvailable: handler.checkStorageAvailability() },\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      stackTrace: error.stack\n    };\n\n    handler.logError(webError);\n\n    // Determine recovery actions based on storage availability\n    const recoveryActions: RecoveryAction[] = [];\n    \n    if (handler.checkStorageAvailability()) {\n      recoveryActions.push({\n        label: 'Clear Storage',\n        action: () => handler.clearCorruptedStorage(),\n        description: 'Clear corrupted storage data and continue without save'\n      });\n    }\n\n    recoveryActions.push({\n      label: 'Continue Without Save',\n      action: () => handler.disableAutoSave(),\n      description: 'Continue playing without automatic save functionality'\n    });\n\n    handler.displayUserFriendlyError(\n      'Save System Error',\n      'There was a problem with the game save system. Your progress may not be saved automatically.',\n      recoveryActions\n    );\n  }\n\n  /**\n   * Handles game state corruption or validation errors\n   */\n  public static handleGameStateError(error: Error, gameState?: GameState): void {\n    const handler = WebErrorHandler.getInstance();\n    \n    const webError: WebError = {\n      type: WebErrorType.GAME_STATE_ERROR,\n      severity: ErrorSeverity.CRITICAL,\n      message: `Game state error: ${error.message}`,\n      originalError: error,\n      context: { \n        gameState: gameState ? handler.sanitizeGameStateForLogging(gameState) : null,\n        hasBackup: handler.hasGameStateBackup()\n      },\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      stackTrace: error.stack\n    };\n\n    handler.logError(webError);\n\n    const recoveryActions: RecoveryAction[] = [];\n\n    if (handler.hasGameStateBackup()) {\n      recoveryActions.push({\n        label: 'Restore Backup',\n        action: () => handler.restoreGameStateBackup(),\n        description: 'Restore from the most recent backup'\n      });\n    }\n\n    recoveryActions.push({\n      label: 'Start New Game',\n      action: () => handler.startNewGame(),\n      description: 'Start a fresh game (current progress will be lost)'\n    });\n\n    handler.displayUserFriendlyError(\n      'Game State Corrupted',\n      'The game state has become corrupted. You can try restoring from a backup or starting a new game.',\n      recoveryActions\n    );\n  }\n\n  /**\n   * Handles browser compatibility issues\n   */\n  public static handleCompatibilityError(feature: string, error?: Error): void {\n    const handler = WebErrorHandler.getInstance();\n    \n    const webError: WebError = {\n      type: WebErrorType.BROWSER_COMPATIBILITY,\n      severity: ErrorSeverity.HIGH,\n      message: `Browser compatibility issue with feature '${feature}'${error ? `: ${error.message}` : ''}`,\n      originalError: error,\n      context: { \n        feature,\n        browserInfo: handler.getBrowserInfo(),\n        supportedFeatures: handler.checkFeatureSupport()\n      },\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      stackTrace: error?.stack\n    };\n\n    handler.logError(webError);\n\n    const recoveryActions: RecoveryAction[] = [\n      {\n        label: 'Enable Compatibility Mode',\n        action: () => handler.enableCompatibilityMode(),\n        description: 'Use simplified interface for better compatibility'\n      },\n      {\n        label: 'Continue Anyway',\n        action: () => handler.dismissError(),\n        description: 'Continue with reduced functionality'\n      }\n    ];\n\n    handler.displayUserFriendlyError(\n      'Browser Compatibility Issue',\n      `Your browser may not fully support the feature '${feature}'. You can enable compatibility mode for better experience.`,\n      recoveryActions\n    );\n  }\n\n  /**\n   * Displays user-friendly error messages with recovery options\n   */\n  public displayUserFriendlyError(\n    title: string, \n    message: string, \n    recoveryActions: RecoveryAction[] = []\n  ): void {\n    if (!this.config.enableUserNotifications) return;\n\n    const errorModal = this.createErrorModal(title, message, recoveryActions);\n    document.body.appendChild(errorModal);\n\n    // Auto-remove after 30 seconds if no action taken\n    setTimeout(() => {\n      if (errorModal.parentNode) {\n        errorModal.remove();\n      }\n    }, 30000);\n  }\n\n  /**\n   * Logs error for debugging and analysis\n   */\n  private logError(error: WebError): void {\n    if (!this.config.enableLogging) return;\n\n    // Add to internal log\n    this.errorLog.push(error);\n\n    // Maintain log size limit\n    if (this.errorLog.length > (this.config.maxLogEntries || 100)) {\n      this.errorLog = this.errorLog.slice(-50); // Keep last 50 entries\n    }\n\n    // Console logging for development\n    console.error('WebErrorHandler:', error);\n\n    // Store in localStorage for persistence\n    try {\n      localStorage.setItem('burn-rate-error-log', JSON.stringify(this.errorLog.slice(-10)));\n    } catch (e) {\n      // Ignore storage errors when logging errors\n    }\n  }\n\n  /**\n   * Sets up global error handling for unhandled errors\n   */\n  private setupGlobalErrorHandling(): void {\n    // Handle unhandled JavaScript errors\n    window.addEventListener('error', (event) => {\n      const webError: WebError = {\n        type: WebErrorType.DOM_ERROR,\n        severity: ErrorSeverity.HIGH,\n        message: `Unhandled error: ${event.message}`,\n        originalError: event.error,\n        context: { \n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno\n        },\n        timestamp: Date.now(),\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        stackTrace: event.error?.stack\n      };\n\n      this.logError(webError);\n    });\n\n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      const webError: WebError = {\n        type: WebErrorType.GAME_STATE_ERROR,\n        severity: ErrorSeverity.HIGH,\n        message: `Unhandled promise rejection: ${event.reason}`,\n        originalError: event.reason instanceof Error ? event.reason : new Error(String(event.reason)),\n        context: { promiseRejection: true },\n        timestamp: Date.now(),\n        userAgent: navigator.userAgent,\n        url: window.location.href\n      };\n\n      this.logError(webError);\n    });\n  }\n\n  /**\n   * Creates notification container for error messages\n   */\n  private createNotificationContainer(): void {\n    if (!this.config.enableUserNotifications) return;\n\n    this.notificationContainer = document.createElement('div');\n    this.notificationContainer.id = 'web-error-notifications';\n    this.notificationContainer.className = 'error-notifications-container';\n    this.notificationContainer.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 10000;\n      max-width: 400px;\n      pointer-events: none;\n    `;\n\n    document.body.appendChild(this.notificationContainer);\n  }\n\n  /**\n   * Creates error modal with recovery actions\n   */\n  private createErrorModal(title: string, message: string, recoveryActions: RecoveryAction[]): HTMLElement {\n    const modal = document.createElement('div');\n    modal.className = 'error-modal-overlay';\n    modal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 10001;\n      pointer-events: auto;\n    `;\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'error-modal-content';\n    modalContent.style.cssText = `\n      background: #fff;\n      border-radius: 8px;\n      padding: 24px;\n      max-width: 500px;\n      margin: 20px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n    `;\n\n    const actionsHtml = recoveryActions.length > 0 ? `\n      <div class=\"error-actions\" style=\"margin-top: 20px; display: flex; gap: 10px; flex-wrap: wrap;\">\n        ${recoveryActions.map((action, index) => `\n          <button \n            class=\"recovery-action-btn\" \n            data-action-index=\"${index}\"\n            style=\"\n              padding: 8px 16px;\n              border: 1px solid #ddd;\n              border-radius: 4px;\n              background: #f5f5f5;\n              cursor: pointer;\n              font-size: 14px;\n            \"\n            title=\"${action.description || ''}\"\n          >\n            ${action.label}\n          </button>\n        `).join('')}\n        <button \n          class=\"dismiss-error-btn\"\n          style=\"\n            padding: 8px 16px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            background: #e9e9e9;\n            cursor: pointer;\n            font-size: 14px;\n            margin-left: auto;\n          \"\n        >\n          Dismiss\n        </button>\n      </div>\n    ` : `\n      <div class=\"error-actions\" style=\"margin-top: 20px; text-align: right;\">\n        <button \n          class=\"dismiss-error-btn\"\n          style=\"\n            padding: 8px 16px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            background: #e9e9e9;\n            cursor: pointer;\n            font-size: 14px;\n          \"\n        >\n          OK\n        </button>\n      </div>\n    `;\n\n    modalContent.innerHTML = `\n      <div class=\"error-header\" style=\"display: flex; align-items: center; margin-bottom: 16px;\">\n        <span style=\"font-size: 24px; margin-right: 12px;\">⚠️</span>\n        <h3 style=\"margin: 0; color: #d32f2f;\">${title}</h3>\n      </div>\n      <div class=\"error-message\" style=\"margin-bottom: 16px; line-height: 1.5;\">\n        ${message}\n      </div>\n      ${actionsHtml}\n    `;\n\n    // Add event listeners\n    modalContent.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      \n      if (target.classList.contains('recovery-action-btn')) {\n        const actionIndex = parseInt(target.dataset.actionIndex || '0');\n        const action = recoveryActions[actionIndex];\n        if (action) {\n          Promise.resolve(action.action()).catch(console.error);\n          modal.remove();\n        }\n      } else if (target.classList.contains('dismiss-error-btn')) {\n        modal.remove();\n      }\n    });\n\n    modal.appendChild(modalContent);\n    return modal;\n  }\n\n  // Recovery action implementations\n  private retryDOMOperation(elementSelector: string, context?: any): void {\n    // Implementation would depend on the specific operation\n    console.log('Retrying DOM operation for:', elementSelector);\n  }\n\n  private refreshInterface(): void {\n    window.location.reload();\n  }\n\n  private checkStorageAvailability(): boolean {\n    try {\n      const test = 'test';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private clearCorruptedStorage(): void {\n    try {\n      localStorage.clear();\n    } catch (e) {\n      console.error('Failed to clear storage:', e);\n    }\n  }\n\n  private disableAutoSave(): void {\n    // This would need to be integrated with the game's auto-save system\n    console.log('Auto-save disabled due to storage error');\n  }\n\n  private hasGameStateBackup(): boolean {\n    try {\n      return localStorage.getItem('burn-rate-game-state-backup') !== null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private restoreGameStateBackup(): void {\n    // Implementation would restore from backup\n    console.log('Restoring game state backup');\n  }\n\n  private startNewGame(): void {\n    // This would need to be integrated with the game initialization\n    if (confirm('Are you sure you want to start a new game? Current progress will be lost.')) {\n      window.location.reload();\n    }\n  }\n\n  private getBrowserInfo(): any {\n    return {\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      platform: navigator.platform,\n      cookieEnabled: navigator.cookieEnabled,\n      onLine: navigator.onLine\n    };\n  }\n\n  private checkFeatureSupport(): any {\n    return {\n      localStorage: typeof Storage !== 'undefined',\n      sessionStorage: typeof sessionStorage !== 'undefined',\n      webGL: !!window.WebGLRenderingContext,\n      canvas: !!document.createElement('canvas').getContext,\n      webWorkers: typeof Worker !== 'undefined',\n      fetch: typeof fetch !== 'undefined'\n    };\n  }\n\n  private enableCompatibilityMode(): void {\n    // Enable simplified interface\n    document.body.classList.add('compatibility-mode');\n  }\n\n  private dismissError(): void {\n    // Simply dismiss the error\n  }\n\n  private sanitizeGameStateForLogging(gameState: GameState): any {\n    // Return a sanitized version of game state for logging\n    return {\n      turn: gameState.turn,\n      gamePhase: gameState.gamePhase,\n      isGameOver: gameState.isGameOver,\n      playerResourcesCount: Object.keys(gameState.player.resources).length,\n      aiResourcesCount: Object.keys(gameState.ai.resources).length\n    };\n  }\n\n  /**\n   * Gets error statistics for debugging\n   */\n  public getErrorStatistics(): any {\n    const stats = {\n      totalErrors: this.errorLog.length,\n      errorsByType: {} as Record<string, number>,\n      errorsBySeverity: {} as Record<string, number>,\n      recentErrors: this.errorLog.slice(-5)\n    };\n\n    this.errorLog.forEach(error => {\n      stats.errorsByType[error.type] = (stats.errorsByType[error.type] || 0) + 1;\n      stats.errorsBySeverity[error.severity] = (stats.errorsBySeverity[error.severity] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * Clears error log\n   */\n  public clearErrorLog(): void {\n    this.errorLog = [];\n    try {\n      localStorage.removeItem('burn-rate-error-log');\n    } catch (e) {\n      // Ignore\n    }\n  }\n}","/**\n * Help system for providing user guidance and tutorials\n */\nexport interface HelpContent {\n  title: string;\n  content: string;\n  category: 'gameplay' | 'interface' | 'strategy' | 'tutorial';\n  tags?: string[];\n  relatedTopics?: string[];\n}\n\nexport interface TooltipConfig {\n  element: string;\n  content: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  trigger?: 'hover' | 'click' | 'focus';\n  delay?: number;\n}\n\nexport interface TutorialStep {\n  id: string;\n  title: string;\n  content: string;\n  target?: string;\n  position?: 'top' | 'bottom' | 'left' | 'right';\n  action?: 'highlight' | 'click' | 'input' | 'wait';\n  nextCondition?: () => boolean;\n}\n\nexport interface HelpSystemConfig {\n  containerId: string;\n  enableTooltips?: boolean;\n  enableTutorial?: boolean;\n  showHelpButton?: boolean;\n  tutorialAutoStart?: boolean;\n}\n\n/**\n * Comprehensive help system with modals, tooltips, and tutorials\n */\nexport class HelpSystem {\n  private config: HelpSystemConfig;\n  private container: HTMLElement | null = null;\n  private helpModal: HTMLElement | null = null;\n  private tooltips: Map<string, HTMLElement> = new Map();\n  private currentTutorial: TutorialStep[] = [];\n  private currentTutorialStep: number = 0;\n  private tutorialOverlay: HTMLElement | null = null;\n  private isHelpModalOpen: boolean = false;\n  private isTutorialActive: boolean = false;\n\n  constructor(config: HelpSystemConfig) {\n    this.config = {\n      enableTooltips: true,\n      enableTutorial: true,\n      showHelpButton: true,\n      tutorialAutoStart: false,\n      ...config\n    };\n\n    this.container = document.getElementById(config.containerId);\n    if (!this.container) {\n      console.warn(`Help system: Container element with id '${config.containerId}' not found`);\n      return;\n    }\n\n    this.initialize();\n  }\n\n  /**\n   * Initializes the help system\n   */\n  private initialize(): void {\n    this.createHelpButton();\n    this.createHelpModal();\n    this.setupTooltips();\n    this.setupKeyboardShortcuts();\n\n    if (this.config.tutorialAutoStart && this.isFirstVisit()) {\n      setTimeout(() => this.startTutorial(), 1000);\n    }\n  }\n\n  /**\n   * Creates the help button in the interface\n   */\n  private createHelpButton(): void {\n    if (!this.config.showHelpButton || !this.container) return;\n\n    const helpButton = document.createElement('button');\n    helpButton.id = 'help-button';\n    helpButton.className = 'help-button';\n    helpButton.innerHTML = '❓';\n    helpButton.title = 'Help & Tutorial (Press H)';\n    helpButton.setAttribute('aria-label', 'Open help system');\n\n    helpButton.addEventListener('click', () => this.showHelpModal());\n\n    // Add to container or find existing help button location\n    const existingHelpBtn = this.container.querySelector('#help-btn');\n    if (existingHelpBtn) {\n      existingHelpBtn.replaceWith(helpButton);\n    } else {\n      this.container.appendChild(helpButton);\n    }\n  }\n\n  /**\n   * Creates the main help modal\n   */\n  private createHelpModal(): void {\n    if (!this.container) return;\n\n    this.helpModal = document.createElement('div');\n    this.helpModal.id = 'help-modal';\n    this.helpModal.className = 'help-modal-overlay';\n    this.helpModal.style.display = 'none';\n\n    this.helpModal.innerHTML = `\n      <div class=\"help-modal-content\">\n        <div class=\"help-modal-header\">\n          <h2>Burn Rate - Help & Guide</h2>\n          <button class=\"help-modal-close\" aria-label=\"Close help\">&times;</button>\n        </div>\n        <div class=\"help-modal-body\">\n          <div class=\"help-navigation\">\n            <button class=\"help-nav-btn active\" data-category=\"tutorial\">Tutorial</button>\n            <button class=\"help-nav-btn\" data-category=\"gameplay\">Gameplay</button>\n            <button class=\"help-nav-btn\" data-category=\"interface\">Interface</button>\n            <button class=\"help-nav-btn\" data-category=\"strategy\">Strategy</button>\n          </div>\n          <div class=\"help-content-area\">\n            <div id=\"help-content-tutorial\" class=\"help-content-section active\">\n              ${this.getTutorialContent()}\n            </div>\n            <div id=\"help-content-gameplay\" class=\"help-content-section\">\n              ${this.getGameplayContent()}\n            </div>\n            <div id=\"help-content-interface\" class=\"help-content-section\">\n              ${this.getInterfaceContent()}\n            </div>\n            <div id=\"help-content-strategy\" class=\"help-content-section\">\n              ${this.getStrategyContent()}\n            </div>\n          </div>\n        </div>\n        <div class=\"help-modal-footer\">\n          <button class=\"help-start-tutorial-btn\">Start Interactive Tutorial</button>\n          <button class=\"help-close-btn\">Close</button>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    this.setupHelpModalEvents();\n\n    document.body.appendChild(this.helpModal);\n  }\n\n  /**\n   * Sets up event listeners for the help modal\n   */\n  private setupHelpModalEvents(): void {\n    if (!this.helpModal) return;\n\n    // Close button\n    const closeBtn = this.helpModal.querySelector('.help-modal-close');\n    const closeFooterBtn = this.helpModal.querySelector('.help-close-btn');\n    \n    closeBtn?.addEventListener('click', () => this.hideHelpModal());\n    closeFooterBtn?.addEventListener('click', () => this.hideHelpModal());\n\n    // Navigation buttons\n    const navButtons = this.helpModal.querySelectorAll('.help-nav-btn');\n    navButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const category = (e.target as HTMLElement).dataset.category;\n        if (category) {\n          this.switchHelpCategory(category);\n        }\n      });\n    });\n\n    // Tutorial start button\n    const tutorialBtn = this.helpModal.querySelector('.help-start-tutorial-btn');\n    tutorialBtn?.addEventListener('click', () => {\n      this.hideHelpModal();\n      this.startTutorial();\n    });\n\n    // Close on overlay click\n    this.helpModal.addEventListener('click', (e) => {\n      if (e.target === this.helpModal) {\n        this.hideHelpModal();\n      }\n    });\n\n    // Close on Escape key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.isHelpModalOpen) {\n        this.hideHelpModal();\n      }\n    });\n  }\n\n  /**\n   * Shows the help modal\n   */\n  public showHelpModal(): void {\n    if (!this.helpModal) return;\n\n    this.helpModal.style.display = 'flex';\n    this.isHelpModalOpen = true;\n    \n    // Focus management for accessibility\n    const firstFocusable = this.helpModal.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    if (firstFocusable) {\n      (firstFocusable as HTMLElement).focus();\n    }\n\n    // Prevent body scroll\n    document.body.style.overflow = 'hidden';\n  }\n\n  /**\n   * Hides the help modal\n   */\n  public hideHelpModal(): void {\n    if (!this.helpModal) return;\n\n    this.helpModal.style.display = 'none';\n    this.isHelpModalOpen = false;\n    \n    // Restore body scroll\n    document.body.style.overflow = '';\n  }\n\n  /**\n   * Switches help category in the modal\n   */\n  private switchHelpCategory(category: string): void {\n    if (!this.helpModal) return;\n\n    // Update navigation buttons\n    const navButtons = this.helpModal.querySelectorAll('.help-nav-btn');\n    navButtons.forEach(btn => {\n      btn.classList.toggle('active', btn.getAttribute('data-category') === category);\n    });\n\n    // Update content sections\n    const contentSections = this.helpModal.querySelectorAll('.help-content-section');\n    contentSections.forEach(section => {\n      section.classList.toggle('active', section.id === `help-content-${category}`);\n    });\n  }\n\n  /**\n   * Sets up tooltips for interface elements\n   */\n  private setupTooltips(): void {\n    if (!this.config.enableTooltips) return;\n\n    const tooltipConfigs: TooltipConfig[] = [\n      {\n        element: '#build-panel',\n        content: 'Build units and structures to expand your fleet and economy. Each unit type has different strengths and costs.',\n        position: 'top'\n      },\n      {\n        element: '#attack-panel',\n        content: 'Launch attacks against enemy systems. Consider unit composition - Frigates beat Cruisers, Cruisers beat Battleships, Battleships beat Frigates.',\n        position: 'top'\n      },\n      {\n        element: '#scan-panel',\n        content: 'Gather intelligence about enemy forces and economy. Higher-tier scans provide more accurate information.',\n        position: 'top'\n      },\n      {\n        element: '#end-turn-btn',\n        content: 'End your turn to process all actions and advance to the next turn. Use Ctrl+Enter as a shortcut.',\n        position: 'top'\n      },\n      {\n        element: '#resources-display',\n        content: 'Your current resources and income. Metal and Energy are needed for construction. Watch for resource shortages!',\n        position: 'bottom'\n      },\n      {\n        element: '#fleet-display',\n        content: 'Your current fleet composition and construction queue. Plan your fleet balance carefully.',\n        position: 'bottom'\n      }\n    ];\n\n    tooltipConfigs.forEach(config => this.createTooltip(config));\n  }\n\n  /**\n   * Creates a tooltip for a specific element\n   */\n  private createTooltip(config: TooltipConfig): void {\n    const targetElement = document.querySelector(config.element);\n    if (!targetElement) return;\n\n    const tooltip = document.createElement('div');\n    tooltip.className = 'help-tooltip';\n    tooltip.innerHTML = config.content;\n    tooltip.style.position = 'absolute';\n    tooltip.style.display = 'none';\n    tooltip.style.zIndex = '10000';\n\n    document.body.appendChild(tooltip);\n    this.tooltips.set(config.element, tooltip);\n\n    const showTooltip = () => {\n      const rect = targetElement.getBoundingClientRect();\n      const tooltipRect = tooltip.getBoundingClientRect();\n\n      // Position tooltip based on config\n      switch (config.position || 'top') {\n        case 'top':\n          tooltip.style.left = `${rect.left + rect.width / 2 - tooltipRect.width / 2}px`;\n          tooltip.style.top = `${rect.top - tooltipRect.height - 8}px`;\n          break;\n        case 'bottom':\n          tooltip.style.left = `${rect.left + rect.width / 2 - tooltipRect.width / 2}px`;\n          tooltip.style.top = `${rect.bottom + 8}px`;\n          break;\n        case 'left':\n          tooltip.style.left = `${rect.left - tooltipRect.width - 8}px`;\n          tooltip.style.top = `${rect.top + rect.height / 2 - tooltipRect.height / 2}px`;\n          break;\n        case 'right':\n          tooltip.style.left = `${rect.right + 8}px`;\n          tooltip.style.top = `${rect.top + rect.height / 2 - tooltipRect.height / 2}px`;\n          break;\n      }\n\n      tooltip.style.display = 'block';\n    };\n\n    const hideTooltip = () => {\n      tooltip.style.display = 'none';\n    };\n\n    // Add event listeners based on trigger\n    const trigger = config.trigger || 'hover';\n    if (trigger === 'hover') {\n      targetElement.addEventListener('mouseenter', showTooltip);\n      targetElement.addEventListener('mouseleave', hideTooltip);\n    } else if (trigger === 'click') {\n      targetElement.addEventListener('click', showTooltip);\n      document.addEventListener('click', (e) => {\n        if (!targetElement.contains(e.target as Node) && !tooltip.contains(e.target as Node)) {\n          hideTooltip();\n        }\n      });\n    }\n  }\n\n  /**\n   * Starts the interactive tutorial\n   */\n  public startTutorial(): void {\n    if (!this.config.enableTutorial || this.isTutorialActive) return;\n\n    this.currentTutorial = this.getTutorialSteps();\n    this.currentTutorialStep = 0;\n    this.isTutorialActive = true;\n\n    this.createTutorialOverlay();\n    this.showTutorialStep();\n  }\n\n  /**\n   * Creates the tutorial overlay\n   */\n  private createTutorialOverlay(): void {\n    this.tutorialOverlay = document.createElement('div');\n    this.tutorialOverlay.id = 'tutorial-overlay';\n    this.tutorialOverlay.className = 'tutorial-overlay';\n\n    this.tutorialOverlay.innerHTML = `\n      <div class=\"tutorial-backdrop\"></div>\n      <div class=\"tutorial-popup\">\n        <div class=\"tutorial-header\">\n          <h3 class=\"tutorial-title\"></h3>\n          <button class=\"tutorial-close\" aria-label=\"Close tutorial\">&times;</button>\n        </div>\n        <div class=\"tutorial-content\"></div>\n        <div class=\"tutorial-footer\">\n          <div class=\"tutorial-progress\">\n            <span class=\"tutorial-step-counter\"></span>\n          </div>\n          <div class=\"tutorial-actions\">\n            <button class=\"tutorial-prev-btn\">Previous</button>\n            <button class=\"tutorial-next-btn\">Next</button>\n            <button class=\"tutorial-skip-btn\">Skip Tutorial</button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    const closeBtn = this.tutorialOverlay.querySelector('.tutorial-close');\n    const skipBtn = this.tutorialOverlay.querySelector('.tutorial-skip-btn');\n    const prevBtn = this.tutorialOverlay.querySelector('.tutorial-prev-btn');\n    const nextBtn = this.tutorialOverlay.querySelector('.tutorial-next-btn');\n\n    closeBtn?.addEventListener('click', () => this.endTutorial());\n    skipBtn?.addEventListener('click', () => this.endTutorial());\n    prevBtn?.addEventListener('click', () => this.previousTutorialStep());\n    nextBtn?.addEventListener('click', () => this.nextTutorialStep());\n\n    document.body.appendChild(this.tutorialOverlay);\n  }\n\n  /**\n   * Shows the current tutorial step\n   */\n  private showTutorialStep(): void {\n    if (!this.tutorialOverlay || !this.currentTutorial.length) return;\n\n    const step = this.currentTutorial[this.currentTutorialStep];\n    if (!step) return;\n\n    // Update tutorial content\n    const title = this.tutorialOverlay.querySelector('.tutorial-title');\n    const content = this.tutorialOverlay.querySelector('.tutorial-content');\n    const counter = this.tutorialOverlay.querySelector('.tutorial-step-counter');\n    const prevBtn = this.tutorialOverlay.querySelector('.tutorial-prev-btn') as HTMLButtonElement;\n    const nextBtn = this.tutorialOverlay.querySelector('.tutorial-next-btn') as HTMLButtonElement;\n\n    if (title) title.textContent = step.title;\n    if (content) content.innerHTML = step.content;\n    if (counter) counter.textContent = `Step ${this.currentTutorialStep + 1} of ${this.currentTutorial.length}`;\n\n    // Update button states\n    if (prevBtn) prevBtn.disabled = this.currentTutorialStep === 0;\n    if (nextBtn) {\n      nextBtn.textContent = this.currentTutorialStep === this.currentTutorial.length - 1 ? 'Finish' : 'Next';\n    }\n\n    // Highlight target element if specified\n    if (step.target) {\n      this.highlightElement(step.target);\n    }\n\n    // Position tutorial popup\n    this.positionTutorialPopup(step);\n  }\n\n  /**\n   * Highlights a target element during tutorial\n   */\n  private highlightElement(selector: string): void {\n    // Remove previous highlights\n    document.querySelectorAll('.tutorial-highlight').forEach(el => {\n      el.classList.remove('tutorial-highlight');\n    });\n\n    const element = document.querySelector(selector);\n    if (element) {\n      element.classList.add('tutorial-highlight');\n    }\n  }\n\n  /**\n   * Positions the tutorial popup relative to target element\n   */\n  private positionTutorialPopup(step: TutorialStep): void {\n    if (!this.tutorialOverlay) return;\n\n    const popup = this.tutorialOverlay.querySelector('.tutorial-popup') as HTMLElement;\n    if (!popup) return;\n\n    if (step.target) {\n      const targetElement = document.querySelector(step.target);\n      if (targetElement) {\n        const rect = targetElement.getBoundingClientRect();\n        const position = step.position || 'bottom';\n\n        switch (position) {\n          case 'top':\n            popup.style.left = `${rect.left + rect.width / 2}px`;\n            popup.style.top = `${rect.top - 20}px`;\n            popup.style.transform = 'translate(-50%, -100%)';\n            break;\n          case 'bottom':\n            popup.style.left = `${rect.left + rect.width / 2}px`;\n            popup.style.top = `${rect.bottom + 20}px`;\n            popup.style.transform = 'translate(-50%, 0)';\n            break;\n          case 'left':\n            popup.style.left = `${rect.left - 20}px`;\n            popup.style.top = `${rect.top + rect.height / 2}px`;\n            popup.style.transform = 'translate(-100%, -50%)';\n            break;\n          case 'right':\n            popup.style.left = `${rect.right + 20}px`;\n            popup.style.top = `${rect.top + rect.height / 2}px`;\n            popup.style.transform = 'translate(0, -50%)';\n            break;\n        }\n      }\n    } else {\n      // Center popup if no target\n      popup.style.left = '50%';\n      popup.style.top = '50%';\n      popup.style.transform = 'translate(-50%, -50%)';\n    }\n  }\n\n  /**\n   * Moves to the next tutorial step\n   */\n  private nextTutorialStep(): void {\n    if (this.currentTutorialStep < this.currentTutorial.length - 1) {\n      this.currentTutorialStep++;\n      this.showTutorialStep();\n    } else {\n      this.endTutorial();\n    }\n  }\n\n  /**\n   * Moves to the previous tutorial step\n   */\n  private previousTutorialStep(): void {\n    if (this.currentTutorialStep > 0) {\n      this.currentTutorialStep--;\n      this.showTutorialStep();\n    }\n  }\n\n  /**\n   * Ends the tutorial\n   */\n  private endTutorial(): void {\n    if (this.tutorialOverlay) {\n      this.tutorialOverlay.remove();\n      this.tutorialOverlay = null;\n    }\n\n    // Remove highlights\n    document.querySelectorAll('.tutorial-highlight').forEach(el => {\n      el.classList.remove('tutorial-highlight');\n    });\n\n    this.isTutorialActive = false;\n    this.markTutorialCompleted();\n  }\n\n  /**\n   * Sets up keyboard shortcuts for help system\n   */\n  private setupKeyboardShortcuts(): void {\n    document.addEventListener('keydown', (e) => {\n      // Don't trigger shortcuts when typing in input fields\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      switch (e.key.toLowerCase()) {\n        case 'h':\n          if (!this.isTutorialActive) {\n            e.preventDefault();\n            this.showHelpModal();\n          }\n          break;\n        case 'f1':\n          e.preventDefault();\n          this.showHelpModal();\n          break;\n      }\n    });\n  }\n\n  /**\n   * Checks if this is the user's first visit\n   */\n  private isFirstVisit(): boolean {\n    try {\n      return !localStorage.getItem('burn-rate-tutorial-completed');\n    } catch (e) {\n      return true;\n    }\n  }\n\n  /**\n   * Marks tutorial as completed\n   */\n  private markTutorialCompleted(): void {\n    try {\n      localStorage.setItem('burn-rate-tutorial-completed', 'true');\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }\n\n  /**\n   * Gets tutorial content for the help modal\n   */\n  private getTutorialContent(): string {\n    return `\n      <div class=\"help-section\">\n        <h3>Welcome to Burn Rate!</h3>\n        <p>Burn Rate is a fast-paced strategy game where you build fleets, manage resources, and compete against AI opponents to achieve victory.</p>\n        \n        <h4>Quick Start</h4>\n        <ol>\n          <li><strong>Build Units:</strong> Use the Build tab to construct ships and structures</li>\n          <li><strong>Manage Resources:</strong> Watch your Metal and Energy levels</li>\n          <li><strong>Attack:</strong> Use the Attack tab to launch fleets against enemies</li>\n          <li><strong>Gather Intel:</strong> Use the Scan tab to learn about enemy forces</li>\n          <li><strong>End Turn:</strong> Click \"End Turn\" or press Ctrl+Enter to advance</li>\n        </ol>\n\n        <h4>Victory Conditions</h4>\n        <ul>\n          <li><strong>Military Victory:</strong> Destroy all enemy fleets and structures</li>\n          <li><strong>Economic Victory:</strong> Achieve massive resource production</li>\n          <li><strong>Time Victory:</strong> Have the strongest position when time runs out</li>\n        </ul>\n\n        <div class=\"help-tip\">\n          💡 <strong>Tip:</strong> Start the interactive tutorial below to learn the game step-by-step!\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Gets gameplay content for the help modal\n   */\n  private getGameplayContent(): string {\n    return `\n      <div class=\"help-section\">\n        <h3>Core Gameplay</h3>\n        \n        <h4>Unit Types</h4>\n        <div class=\"unit-guide\">\n          <div class=\"unit-item\">\n            <strong>🚀 Frigate</strong> (4 Metal, 2 Energy)\n            <p>Fast, cheap units effective against Cruisers. Good for early game and swarm tactics.</p>\n          </div>\n          <div class=\"unit-item\">\n            <strong>🛸 Cruiser</strong> (10 Metal, 6 Energy)\n            <p>Balanced units effective against Battleships. The backbone of most fleets.</p>\n          </div>\n          <div class=\"unit-item\">\n            <strong>🚁 Battleship</strong> (20 Metal, 12 Energy)\n            <p>Heavy units effective against Frigates. Expensive but powerful.</p>\n          </div>\n        </div>\n\n        <h4>Rock-Paper-Scissors Combat</h4>\n        <div class=\"combat-guide\">\n          <p><strong>Frigates</strong> beat <strong>Cruisers</strong></p>\n          <p><strong>Cruisers</strong> beat <strong>Battleships</strong></p>\n          <p><strong>Battleships</strong> beat <strong>Frigates</strong></p>\n        </div>\n\n        <h4>Structures</h4>\n        <div class=\"structure-guide\">\n          <div class=\"structure-item\">\n            <strong>⚡ Reactor</strong> (900 Metal, 1200 Energy)\n            <p>Provides +500 Energy per turn. Essential for large fleets.</p>\n          </div>\n          <div class=\"structure-item\">\n            <strong>⛏️ Mine</strong> (1500 Metal, 600 Energy)\n            <p>Provides +500 Metal per turn. Needed for construction.</p>\n          </div>\n        </div>\n\n        <h4>Intelligence</h4>\n        <p>Use scans to gather information about enemy forces:</p>\n        <ul>\n          <li><strong>Basic Scan:</strong> Total fleet count (±30% accuracy)</li>\n          <li><strong>Deep Scan:</strong> Unit composition + economy (±10% accuracy)</li>\n          <li><strong>Advanced Scan:</strong> Strategic analysis and predictions</li>\n        </ul>\n      </div>\n    `;\n  }\n\n  /**\n   * Gets interface content for the help modal\n   */\n  private getInterfaceContent(): string {\n    return `\n      <div class=\"help-section\">\n        <h3>Interface Guide</h3>\n        \n        <h4>Main Panels</h4>\n        <ul>\n          <li><strong>Resources Panel:</strong> Shows current Metal, Energy, and income rates</li>\n          <li><strong>Fleet Panel:</strong> Displays your ships, construction queue, and intelligence</li>\n          <li><strong>Command Tabs:</strong> Switch between Build, Attack, and Scan actions</li>\n        </ul>\n\n        <h4>Keyboard Shortcuts</h4>\n        <div class=\"shortcuts-guide\">\n          <div class=\"shortcut-item\">\n            <kbd>H</kbd> or <kbd>F1</kbd> - Open this help system\n          </div>\n          <div class=\"shortcut-item\">\n            <kbd>Ctrl</kbd> + <kbd>Enter</kbd> - End turn\n          </div>\n          <div class=\"shortcut-item\">\n            <kbd>S</kbd> - Show game status\n          </div>\n          <div class=\"shortcut-item\">\n            <kbd>Esc</kbd> - Close modals and dialogs\n          </div>\n        </div>\n\n        <h4>Visual Indicators</h4>\n        <ul>\n          <li><strong>Red text/borders:</strong> Low resources or warnings</li>\n          <li><strong>Green highlights:</strong> Successful actions</li>\n          <li><strong>Yellow highlights:</strong> Important information</li>\n          <li><strong>Pulsing elements:</strong> Require attention</li>\n        </ul>\n\n        <h4>Responsive Design</h4>\n        <p>The interface adapts to different screen sizes. On smaller screens, some panels may collapse or stack vertically for better usability.</p>\n      </div>\n    `;\n  }\n\n  /**\n   * Gets strategy content for the help modal\n   */\n  private getStrategyContent(): string {\n    return `\n      <div class=\"help-section\">\n        <h3>Strategy Guide</h3>\n        \n        <h4>Early Game (Turns 1-10)</h4>\n        <ul>\n          <li>Focus on economic growth - build Reactors and Mines</li>\n          <li>Construct a small defensive fleet</li>\n          <li>Use Basic Scans to assess enemy strength</li>\n          <li>Avoid large attacks until you have economic advantage</li>\n        </ul>\n\n        <h4>Mid Game (Turns 11-25)</h4>\n        <ul>\n          <li>Expand your fleet with balanced unit composition</li>\n          <li>Launch probing attacks to test enemy defenses</li>\n          <li>Use Deep Scans for detailed intelligence</li>\n          <li>Consider specializing in one unit type for mass production</li>\n        </ul>\n\n        <h4>Late Game (Turns 26+)</h4>\n        <ul>\n          <li>Launch decisive attacks with overwhelming force</li>\n          <li>Use Advanced Scans to predict enemy moves</li>\n          <li>Focus on victory conditions - military or economic</li>\n          <li>Don't let the AI catch up economically</li>\n        </ul>\n\n        <h4>AI Archetypes</h4>\n        <div class=\"ai-guide\">\n          <div class=\"ai-item\">\n            <strong>Aggressor:</strong> Attacks early and often. Build defenses quickly.\n          </div>\n          <div class=\"ai-item\">\n            <strong>Economist:</strong> Focuses on resource growth. Don't let them get ahead economically.\n          </div>\n          <div class=\"ai-item\">\n            <strong>Trickster:</strong> Unpredictable strategy. Use frequent scans to track their plans.\n          </div>\n          <div class=\"ai-item\">\n            <strong>Hybrid:</strong> Balanced approach. Adapt your strategy based on their actions.\n          </div>\n        </div>\n\n        <h4>Pro Tips</h4>\n        <div class=\"pro-tips\">\n          <div class=\"tip-item\">\n            💡 Always maintain positive resource income\n          </div>\n          <div class=\"tip-item\">\n            💡 Counter the enemy's main unit type with its weakness\n          </div>\n          <div class=\"tip-item\">\n            💡 Time your attacks when enemy fleets are away\n          </div>\n          <div class=\"tip-item\">\n            💡 Economic victory is often easier than military victory\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Gets tutorial steps for the interactive tutorial\n   */\n  private getTutorialSteps(): TutorialStep[] {\n    return [\n      {\n        id: 'welcome',\n        title: 'Welcome to Burn Rate!',\n        content: `\n          <p>Welcome to Burn Rate, a fast-paced strategy game!</p>\n          <p>In this tutorial, you'll learn the basics of building fleets, managing resources, and achieving victory.</p>\n          <p>Let's start by exploring the interface.</p>\n        `\n      },\n      {\n        id: 'resources',\n        title: 'Resources Overview',\n        content: `\n          <p>This panel shows your current resources:</p>\n          <ul>\n            <li><strong>Metal:</strong> Used for construction</li>\n            <li><strong>Energy:</strong> Powers your operations</li>\n            <li><strong>Income:</strong> Resources gained per turn</li>\n          </ul>\n          <p>Keep an eye on these numbers - you need positive income to grow!</p>\n        `,\n        target: '#resources-display',\n        position: 'bottom'\n      },\n      {\n        id: 'fleet',\n        title: 'Fleet Information',\n        content: `\n          <p>This panel shows your fleet status:</p>\n          <ul>\n            <li><strong>Home Fleet:</strong> Ships defending your base</li>\n            <li><strong>In Transit:</strong> Fleets traveling to/from combat</li>\n            <li><strong>Construction Queue:</strong> Units being built</li>\n          </ul>\n          <p>You start with a small defensive fleet.</p>\n        `,\n        target: '#fleet-display',\n        position: 'bottom'\n      },\n      {\n        id: 'build-tab',\n        title: 'Building Units',\n        content: `\n          <p>Click the Build tab to construct new units and structures.</p>\n          <p>You can build:</p>\n          <ul>\n            <li><strong>Ships:</strong> Frigates, Cruisers, Battleships</li>\n            <li><strong>Structures:</strong> Reactors (energy), Mines (metal)</li>\n          </ul>\n          <p>Try building a Frigate - it's cheap and effective!</p>\n        `,\n        target: '[data-tab=\"build\"]',\n        position: 'bottom'\n      },\n      {\n        id: 'attack-tab',\n        title: 'Launching Attacks',\n        content: `\n          <p>The Attack tab lets you send fleets to attack enemies.</p>\n          <p>Remember the combat triangle:</p>\n          <ul>\n            <li>Frigates beat Cruisers</li>\n            <li>Cruisers beat Battleships</li>\n            <li>Battleships beat Frigates</li>\n          </ul>\n          <p>Don't attack yet - build up your forces first!</p>\n        `,\n        target: '[data-tab=\"attack\"]',\n        position: 'bottom'\n      },\n      {\n        id: 'scan-tab',\n        title: 'Gathering Intelligence',\n        content: `\n          <p>The Scan tab helps you spy on enemy forces.</p>\n          <p>Different scan types provide different information:</p>\n          <ul>\n            <li><strong>Basic:</strong> Fleet size (rough estimate)</li>\n            <li><strong>Deep:</strong> Unit composition and economy</li>\n            <li><strong>Advanced:</strong> Strategic analysis</li>\n          </ul>\n          <p>Intelligence is crucial for planning attacks!</p>\n        `,\n        target: '[data-tab=\"scan\"]',\n        position: 'bottom'\n      },\n      {\n        id: 'end-turn',\n        title: 'Ending Your Turn',\n        content: `\n          <p>When you're done with your actions, click \"End Turn\" to advance the game.</p>\n          <p>You can also use the keyboard shortcut <kbd>Ctrl+Enter</kbd>.</p>\n          <p>The AI will then take its turn, and you'll see the results.</p>\n        `,\n        target: '#end-turn-btn',\n        position: 'top'\n      },\n      {\n        id: 'strategy',\n        title: 'Basic Strategy',\n        content: `\n          <p>Here's a simple strategy to get started:</p>\n          <ol>\n            <li>Build economic structures (Reactors, Mines)</li>\n            <li>Construct a balanced fleet</li>\n            <li>Use scans to assess enemy strength</li>\n            <li>Attack when you have an advantage</li>\n          </ol>\n          <p>Remember: economic growth often leads to military victory!</p>\n        `\n      },\n      {\n        id: 'complete',\n        title: 'Tutorial Complete!',\n        content: `\n          <p>Congratulations! You've completed the tutorial.</p>\n          <p>You now know the basics of Burn Rate. Here are some final tips:</p>\n          <ul>\n            <li>Press <kbd>H</kbd> anytime to open the help system</li>\n            <li>Experiment with different strategies</li>\n            <li>Watch your resource income carefully</li>\n            <li>Have fun and good luck!</li>\n          </ul>\n        `\n      }\n    ];\n  }\n\n  /**\n   * Cleans up the help system\n   */\n  public cleanup(): void {\n    // Remove tooltips\n    this.tooltips.forEach(tooltip => tooltip.remove());\n    this.tooltips.clear();\n\n    // Remove modals and overlays\n    if (this.helpModal) {\n      this.helpModal.remove();\n      this.helpModal = null;\n    }\n\n    if (this.tutorialOverlay) {\n      this.tutorialOverlay.remove();\n      this.tutorialOverlay = null;\n    }\n\n    // Remove highlights\n    document.querySelectorAll('.tutorial-highlight').forEach(el => {\n      el.classList.remove('tutorial-highlight');\n    });\n\n    // Restore body scroll\n    document.body.style.overflow = '';\n  }\n}","import { GameEngine, TurnResult } from '../engine/GameEngine.js';\nimport { GameController, CommandExecutionResult } from '../ui/GameController.js';\nimport { GameState } from '../models/GameState.js';\nimport { Command } from '../ui/InputHandler.js';\nimport { WebErrorHandler } from './WebErrorHandler.js';\nimport { HelpSystem } from './HelpSystem.js';\n\nexport interface WebConfig {\n  containerId: string;\n  showDebugInfo?: boolean;\n  autoSave?: boolean;\n  theme?: 'dark' | 'light';\n}\n\nexport interface UserAction {\n  type: 'build' | 'attack' | 'scan' | 'endTurn' | 'newGame' | 'status' | 'help';\n  data?: any;\n  timestamp: number;\n}\n\nexport class WebInterface {\n  private gameEngine: GameEngine;\n  private gameController: GameController;\n  private config: WebConfig;\n  private isRunning: boolean = false;\n  private container: HTMLElement | null = null;\n  private helpSystem: HelpSystem | null = null;\n\n  constructor(gameEngine: GameEngine, config: WebConfig) {\n    this.gameEngine = gameEngine;\n    this.gameController = new GameController(gameEngine);\n    this.config = config;\n    \n    // Initialize error handler\n    WebErrorHandler.getInstance({\n      containerId: config.containerId,\n      enableLogging: config.showDebugInfo || false,\n      enableUserNotifications: true\n    });\n  }\n\n  /**\n   * Starts the web interface and initializes the game\n   */\n  public async start(): Promise<void> {\n    try {\n      // Find the container element\n      this.container = document.getElementById(this.config.containerId);\n      if (!this.container) {\n        const error = new Error(`Container element with id '${this.config.containerId}' not found`);\n        WebErrorHandler.handleDOMError(error, `#${this.config.containerId}`, { operation: 'initialization' });\n        throw error;\n      }\n\n      // Initialize the interface\n      this.isRunning = true;\n      \n      // Set up DOM event listeners\n      this.setupEventListeners();\n      \n      // Initialize help system\n      this.initializeHelpSystem();\n      \n      // Initial display update\n      this.updateDisplay();\n      \n      console.log('Web interface started successfully');\n    } catch (error) {\n      console.error('Failed to start web interface:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleDOMError(error, `#${this.config.containerId}`, { operation: 'start' });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Stops the web interface\n   */\n  public stop(): void {\n    this.isRunning = false;\n    this.removeEventListeners();\n    \n    // Clean up help system\n    if (this.helpSystem) {\n      this.helpSystem.cleanup();\n      this.helpSystem = null;\n    }\n    \n    console.log('Web interface stopped');\n  }\n\n  /**\n   * Handles user actions from the web interface\n   */\n  public async handleUserAction(action: UserAction): Promise<CommandExecutionResult> {\n    if (!this.isRunning) {\n      return {\n        success: false,\n        message: 'Interface is not running',\n        gameStateChanged: false\n      };\n    }\n\n    try {\n      // Convert user action to game command\n      const command = this.convertActionToCommand(action);\n      \n      if (!command) {\n        return {\n          success: false,\n          message: 'Invalid action type',\n          gameStateChanged: false\n        };\n      }\n\n      // Execute the command\n      const result = this.gameController.executeCommand(command);\n      \n      // Handle special cases\n      if (result.success && command.type === 'end_turn') {\n        // Process the turn and update display\n        await this.processTurn();\n      }\n      \n      // Update display if game state changed\n      if (result.gameStateChanged) {\n        this.updateDisplay();\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Error handling user action:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleGameStateError(error, this.gameEngine.getGameState());\n      }\n      return {\n        success: false,\n        message: `Action failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        gameStateChanged: false\n      };\n    }\n  }\n\n  /**\n   * Updates the display to reflect current game state\n   */\n  public updateDisplay(): void {\n    if (!this.container || !this.isRunning) {\n      return;\n    }\n\n    try {\n      const gameState = this.gameEngine.getGameState();\n      \n      // Dispatch custom event for display update\n      const event = new CustomEvent('gameStateUpdate', {\n        detail: { gameState }\n      });\n      this.container.dispatchEvent(event);\n      \n      // Update debug info if enabled\n      if (this.config.showDebugInfo) {\n        this.updateDebugInfo(gameState);\n      }\n    } catch (error) {\n      console.error('Error updating display:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleDOMError(error, `#${this.config.containerId}`, { operation: 'updateDisplay' });\n      }\n    }\n  }\n\n  /**\n   * Gets the game engine instance\n   */\n  public getGameEngine(): GameEngine {\n    return this.gameEngine;\n  }\n\n  /**\n   * Gets the game controller instance\n   */\n  public getGameController(): GameController {\n    return this.gameController;\n  }\n\n  /**\n   * Gets the current configuration\n   */\n  public getConfig(): WebConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Updates the configuration\n   */\n  public updateConfig(newConfig: Partial<WebConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Apply theme changes immediately\n    if (newConfig.theme) {\n      this.applyTheme(newConfig.theme);\n    }\n  }\n\n  /**\n   * Checks if the interface is running\n   */\n  public isInterfaceRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Sets up DOM event listeners\n   */\n  private setupEventListeners(): void {\n    if (!this.container) return;\n\n    // Listen for form submissions and button clicks\n    this.container.addEventListener('submit', this.handleFormSubmit.bind(this));\n    this.container.addEventListener('click', this.handleButtonClick.bind(this));\n    \n    // Listen for keyboard shortcuts\n    document.addEventListener('keydown', this.handleKeydown.bind(this));\n    \n    // Listen for page visibility changes\n    document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Removes DOM event listeners\n   */\n  private removeEventListeners(): void {\n    if (!this.container) return;\n\n    this.container.removeEventListener('submit', this.handleFormSubmit.bind(this));\n    this.container.removeEventListener('click', this.handleButtonClick.bind(this));\n    document.removeEventListener('keydown', this.handleKeydown.bind(this));\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n  }\n\n  /**\n   * Handles form submissions\n   */\n  private async handleFormSubmit(event: Event): Promise<void> {\n    event.preventDefault();\n    \n    const form = event.target as HTMLFormElement;\n    const formData = new FormData(form);\n    \n    // Determine action type from form\n    const actionType = form.dataset.actionType as UserAction['type'];\n    if (!actionType) return;\n\n    const action: UserAction = {\n      type: actionType,\n      data: Object.fromEntries(formData.entries()),\n      timestamp: Date.now()\n    };\n\n    const result = await this.handleUserAction(action);\n    this.displayActionResult(result);\n  }\n\n  /**\n   * Handles button clicks\n   */\n  private async handleButtonClick(event: Event): Promise<void> {\n    const button = event.target as HTMLButtonElement;\n    const actionType = button.dataset.action as UserAction['type'];\n    \n    if (!actionType) return;\n\n    const action: UserAction = {\n      type: actionType,\n      data: button.dataset,\n      timestamp: Date.now()\n    };\n\n    const result = await this.handleUserAction(action);\n    this.displayActionResult(result);\n  }\n\n  /**\n   * Handles keyboard shortcuts\n   */\n  private async handleKeydown(event: KeyboardEvent): Promise<void> {\n    // Only handle shortcuts when not typing in input fields\n    if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'Enter':\n        if (event.ctrlKey) {\n          // Ctrl+Enter: End turn\n          event.preventDefault();\n          await this.handleUserAction({\n            type: 'endTurn',\n            timestamp: Date.now()\n          });\n        }\n        break;\n      \n      case 'h':\n        // H: Show help\n        event.preventDefault();\n        await this.handleUserAction({\n          type: 'help',\n          timestamp: Date.now()\n        });\n        break;\n      \n      case 's':\n        // S: Show status\n        event.preventDefault();\n        await this.handleUserAction({\n          type: 'status',\n          timestamp: Date.now()\n        });\n        break;\n    }\n  }\n\n  /**\n   * Handles page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (document.hidden) {\n      // Page is hidden - could pause updates or save state\n      if (this.config.autoSave) {\n        this.saveGameState();\n      }\n    } else {\n      // Page is visible - resume updates\n      this.updateDisplay();\n    }\n  }\n\n  /**\n   * Converts user action to game command\n   */\n  private convertActionToCommand(action: UserAction): Command | null {\n    switch (action.type) {\n      case 'build':\n        return {\n          type: 'build',\n          buildType: action.data?.buildType,\n          quantity: parseInt(action.data?.quantity) || 1\n        };\n      \n      case 'attack':\n        return {\n          type: 'attack',\n          attackFleet: {\n            frigates: parseInt(action.data?.frigates) || 0,\n            cruisers: parseInt(action.data?.cruisers) || 0,\n            battleships: parseInt(action.data?.battleships) || 0\n          },\n          target: action.data?.target || 'enemy'\n        };\n      \n      case 'scan':\n        return {\n          type: 'scan',\n          scanType: action.data?.scanType\n        };\n      \n      case 'endTurn':\n        return { type: 'end_turn' };\n      \n      case 'status':\n        return { type: 'status' };\n      \n      case 'help':\n        // Handle help through help system instead of game command\n        if (this.helpSystem) {\n          this.helpSystem.showHelpModal();\n        }\n        return null;\n      \n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Processes a game turn\n   */\n  private async processTurn(): Promise<void> {\n    try {\n      // The turn processing is handled by the GameController.executeCommand('end_turn')\n      // This method can be used for additional web-specific turn processing\n      \n      // Update display after turn processing\n      this.updateDisplay();\n      \n      // Auto-save if enabled\n      if (this.config.autoSave) {\n        this.saveGameState();\n      }\n      \n      // Check for game over\n      if (this.gameEngine.isGameOver()) {\n        this.handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error processing turn:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleGameStateError(error, this.gameEngine.getGameState());\n      }\n      this.displayError(`Turn processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Handles game over state\n   */\n  private handleGameOver(): void {\n    const winner = this.gameEngine.getWinner();\n    const victoryType = this.gameEngine.getVictoryType();\n    \n    // Dispatch game over event\n    const event = new CustomEvent('gameOver', {\n      detail: { winner, victoryType }\n    });\n    this.container?.dispatchEvent(event);\n  }\n\n  /**\n   * Displays action result to user\n   */\n  private displayActionResult(result: CommandExecutionResult): void {\n    const event = new CustomEvent('actionResult', {\n      detail: result\n    });\n    this.container?.dispatchEvent(event);\n  }\n\n  /**\n   * Displays error message to user\n   */\n  private displayError(message: string): void {\n    const event = new CustomEvent('displayError', {\n      detail: { message }\n    });\n    this.container?.dispatchEvent(event);\n  }\n\n  /**\n   * Updates debug information display\n   */\n  private updateDebugInfo(gameState: GameState): void {\n    if (!this.config.showDebugInfo) return;\n\n    const debugInfo = {\n      turn: gameState.turn,\n      gamePhase: gameState.gamePhase,\n      isGameOver: gameState.isGameOver,\n      playerResources: gameState.player.resources,\n      aiResources: gameState.ai.resources,\n      pendingActions: this.gameController.getPendingActions().length\n    };\n\n    const event = new CustomEvent('debugUpdate', {\n      detail: debugInfo\n    });\n    this.container?.dispatchEvent(event);\n  }\n\n  /**\n   * Applies theme to the interface\n   */\n  private applyTheme(theme: 'dark' | 'light'): void {\n    if (!this.container) return;\n\n    this.container.classList.remove('theme-dark', 'theme-light');\n    this.container.classList.add(`theme-${theme}`);\n  }\n\n  /**\n   * Saves current game state (if auto-save is enabled)\n   */\n  private saveGameState(): void {\n    if (!this.config.autoSave) return;\n\n    try {\n      const gameState = this.gameEngine.getGameState();\n      localStorage.setItem('burnrate_gamestate', JSON.stringify(gameState));\n      console.log('Game state saved');\n    } catch (error) {\n      console.error('Failed to save game state:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'saveGameState');\n      }\n    }\n  }\n\n  /**\n   * Loads game state from storage\n   */\n  public loadGameState(): boolean {\n    try {\n      const saved = localStorage.getItem('burnrate_gamestate');\n      if (saved) {\n        // Note: This would require a method to restore game state in GameEngine\n        // For now, we'll just return true if data exists\n        console.log('Saved game state found');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to load game state:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'loadGameState');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Clears saved game state\n   */\n  public clearSavedState(): void {\n    try {\n      localStorage.removeItem('burnrate_gamestate');\n      console.log('Saved game state cleared');\n    } catch (error) {\n      console.error('Failed to clear saved state:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'clearSavedState');\n      }\n    }\n  }\n\n  /**\n   * Initializes the help system\n   */\n  private initializeHelpSystem(): void {\n    try {\n      this.helpSystem = new HelpSystem({\n        containerId: this.config.containerId,\n        enableTooltips: true,\n        enableTutorial: true,\n        showHelpButton: true,\n        tutorialAutoStart: false // Don't auto-start to avoid interrupting gameplay\n      });\n    } catch (error) {\n      console.error('Failed to initialize help system:', error);\n      if (error instanceof Error) {\n        WebErrorHandler.handleDOMError(error, `#${this.config.containerId}`, { operation: 'initializeHelpSystem' });\n      }\n    }\n  }\n\n  /**\n   * Gets the help system instance\n   */\n  public getHelpSystem(): HelpSystem | null {\n    return this.helpSystem;\n  }\n}","import { GameState, FleetComposition, CombatEvent } from '../models/GameState.js';\nimport { PlayerState } from '../models/PlayerState.js';\nimport { CommandExecutionResult } from '../ui/GameController.js';\nimport { WebErrorHandler } from './WebErrorHandler.js';\n\nexport interface WebDisplayConfig {\n  containerId: string;\n  showAnimations?: boolean;\n  theme?: 'dark' | 'light';\n  compactMode?: boolean;\n  updateThrottleMs?: number;\n}\n\nexport class WebDisplay {\n  private config: WebDisplayConfig;\n  private container: HTMLElement | null = null;\n  private lastGameState: GameState | null = null;\n  private updateQueue: Array<() => void> = [];\n  private isUpdating: boolean = false;\n  private animationFrameId: number | null = null;\n  private lastUpdateTime: number = 0;\n\n  constructor(config: WebDisplayConfig) {\n    this.config = {\n      updateThrottleMs: 16, // 60fps by default\n      ...config\n    };\n    this.container = document.getElementById(config.containerId);\n    \n    if (!this.container) {\n      const error = new Error(`Container element with id '${config.containerId}' not found`);\n      WebErrorHandler.handleDOMError(error, `#${config.containerId}`, { operation: 'WebDisplay initialization' });\n      throw error;\n    }\n\n    // Set up efficient update handling\n    this.setupUpdateHandling();\n  }\n\n  /**\n   * Sets up efficient update handling with throttling and batching\n   */\n  private setupUpdateHandling(): void {\n    // Use requestAnimationFrame for smooth updates\n    const processUpdateQueue = () => {\n      if (this.updateQueue.length === 0) {\n        this.isUpdating = false;\n        this.animationFrameId = null;\n        return;\n      }\n\n      const now = performance.now();\n      if (now - this.lastUpdateTime < (this.config.updateThrottleMs || 16)) {\n        this.animationFrameId = requestAnimationFrame(processUpdateQueue);\n        return;\n      }\n\n      // Process all queued updates in a single frame\n      const updates = [...this.updateQueue];\n      this.updateQueue = [];\n      \n      updates.forEach(update => {\n        try {\n          update();\n        } catch (error) {\n          console.error('Update error:', error);\n          if (error instanceof Error) {\n            WebErrorHandler.handleDOMError(error, '.game-display', { operation: 'update queue processing' });\n          }\n        }\n      });\n\n      this.lastUpdateTime = now;\n      \n      if (this.updateQueue.length > 0) {\n        this.animationFrameId = requestAnimationFrame(processUpdateQueue);\n      } else {\n        this.isUpdating = false;\n        this.animationFrameId = null;\n      }\n    };\n\n    // Start the update loop when needed\n    this.startUpdateLoop = () => {\n      if (!this.isUpdating) {\n        this.isUpdating = true;\n        this.animationFrameId = requestAnimationFrame(processUpdateQueue);\n      }\n    };\n  }\n\n  private startUpdateLoop!: () => void;\n\n  /**\n   * Queues an update for efficient batched processing\n   */\n  private queueUpdate(updateFn: () => void): void {\n    this.updateQueue.push(updateFn);\n    this.startUpdateLoop();\n  }\n\n  /**\n   * Displays the main game state information with efficient updates\n   */\n  public displayGameState(gameState: GameState): void {\n    if (!this.container) return;\n\n    // Queue the update for efficient processing\n    this.queueUpdate(() => {\n      try {\n        // Only update changed parts for efficiency\n        this.updateChangedElements(gameState);\n        \n        // Store current state for next comparison\n        this.lastGameState = { ...gameState };\n        \n      } catch (error) {\n        console.error('Error displaying game state:', error);\n        if (error instanceof Error) {\n          WebErrorHandler.handleDOMError(error, '.game-display', { operation: 'displayGameState', gameState });\n        }\n        this.displayError('Failed to update game display');\n      }\n    });\n  }\n\n  /**\n   * Updates only the elements that have changed since last update\n   */\n  private updateChangedElements(gameState: GameState): void {\n    const lastState = this.lastGameState;\n\n    // Always update turn and phase info (these change frequently)\n    this.updateTurnInfo(gameState);\n\n    // Update resources if changed\n    if (!lastState || this.hasResourcesChanged(lastState.player.resources, gameState.player.resources)) {\n      this.updateResourceDisplayWithAnimation(gameState.player.resources);\n    }\n\n    // Update fleet if changed\n    if (!lastState || this.hasFleetChanged(lastState.player.fleet, gameState.player.fleet)) {\n      this.updateFleetDisplayWithAnimation(gameState.player);\n    }\n\n    // Update attack panel fleet counts if home fleet changed\n    if (!lastState || this.hasHomeFleetChanged(lastState.player.fleet.homeSystem, gameState.player.fleet.homeSystem)) {\n      this.updateAttackPanelFleetCounts(gameState.player.fleet.homeSystem);\n    }\n\n    // Update game status indicators if changed\n    if (!lastState || lastState.isGameOver !== gameState.isGameOver) {\n      this.updateGameStatusIndicators(gameState);\n    }\n  }\n\n  /**\n   * Checks if resources have changed significantly\n   */\n  private hasResourcesChanged(oldResources: any, newResources: any): boolean {\n    return oldResources.metal !== newResources.metal ||\n           oldResources.energy !== newResources.energy ||\n           oldResources.metalIncome !== newResources.metalIncome ||\n           oldResources.energyIncome !== newResources.energyIncome;\n  }\n\n  /**\n   * Checks if fleet composition has changed\n   */\n  private hasFleetChanged(oldFleet: any, newFleet: any): boolean {\n    return this.hasHomeFleetChanged(oldFleet.homeSystem, newFleet.homeSystem) ||\n           oldFleet.inTransit.outbound.length !== newFleet.inTransit.outbound.length;\n  }\n\n  /**\n   * Checks if home fleet composition has changed\n   */\n  private hasHomeFleetChanged(oldHome: any, newHome: any): boolean {\n    return oldHome.frigates !== newHome.frigates ||\n           oldHome.cruisers !== newHome.cruisers ||\n           oldHome.battleships !== newHome.battleships;\n  }\n\n  /**\n   * Updates resource display with smooth animations\n   */\n  private updateResourceDisplayWithAnimation(resources: any): void {\n    const resourcesDisplay = this.container?.querySelector('#resources-display');\n    if (!resourcesDisplay) return;\n\n    // Create new content\n    const newContent = `\n      <div class=\"resource-item metal-display ${resources.metal < 1000 ? 'warning' : ''}\">\n        <div class=\"resource-icon\">⚙️</div>\n        <div class=\"resource-info\">\n          <div class=\"resource-name\">Metal</div>\n          <div class=\"resource-amount metal-amount\">${this.formatNumber(resources.metal)}</div>\n          <div class=\"resource-income metal-income ${resources.metalIncome <= 0 ? 'stalled' : ''}\">${this.formatIncome(resources.metalIncome)}/turn</div>\n        </div>\n      </div>\n      <div class=\"resource-item energy-display ${resources.energy < 1000 ? 'warning' : ''}\">\n        <div class=\"resource-icon\">⚡</div>\n        <div class=\"resource-info\">\n          <div class=\"resource-name\">Energy</div>\n          <div class=\"resource-amount energy-amount\">${this.formatNumber(resources.energy)}</div>\n          <div class=\"resource-income energy-income ${resources.energyIncome <= 0 ? 'stalled' : ''}\">${this.formatIncome(resources.energyIncome)}/turn</div>\n        </div>\n      </div>\n    `;\n\n    // Apply with animation if enabled\n    if (this.config.showAnimations) {\n      this.updateWithFadeTransition(resourcesDisplay, newContent);\n    } else {\n      resourcesDisplay.innerHTML = newContent;\n    }\n  }\n\n  /**\n   * Updates fleet display with smooth animations\n   */\n  private updateFleetDisplayWithAnimation(player: PlayerState): void {\n    const fleetDisplay = this.container?.querySelector('#fleet-display');\n    if (!fleetDisplay) return;\n\n    const homeFleet = player.fleet.homeSystem;\n    const totalHome = homeFleet.frigates + homeFleet.cruisers + homeFleet.battleships;\n    \n    const newContent = `\n      <div class=\"fleet-summary\">\n        <div class=\"fleet-total\">\n          <strong>Home Fleet: ${this.formatNumber(totalHome)} ships</strong>\n        </div>\n        <div class=\"fleet-breakdown\">\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🚀</span>\n            <span class=\"unit-name\">Frigates:</span>\n            <span class=\"frigates-count\">${this.formatNumber(homeFleet.frigates)}</span>\n          </div>\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🛸</span>\n            <span class=\"unit-name\">Cruisers:</span>\n            <span class=\"cruisers-count\">${this.formatNumber(homeFleet.cruisers)}</span>\n          </div>\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🚁</span>\n            <span class=\"unit-name\">Battleships:</span>\n            <span class=\"battleships-count\">${this.formatNumber(homeFleet.battleships)}</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"fleets-in-transit\">\n        <h5>Fleets in Transit</h5>\n        <div class=\"transit-fleets\">\n          ${this.renderInTransitFleets(player.fleet.inTransit.outbound)}\n        </div>\n      </div>\n      <div class=\"construction-queue\">\n        <h5>Construction Queue</h5>\n        ${this.renderConstructionQueue(player.economy.constructionQueue)}\n      </div>\n      <div class=\"intelligence-panel\">\n        <h5>Intelligence</h5>\n        ${this.renderIntelligenceInfo(player.intelligence)}\n      </div>\n    `;\n\n    // Apply with animation if enabled\n    if (this.config.showAnimations) {\n      this.updateWithSlideTransition(fleetDisplay, newContent);\n    } else {\n      fleetDisplay.innerHTML = newContent;\n    }\n  }\n\n  /**\n   * Updates element content with fade transition\n   */\n  private updateWithFadeTransition(element: Element, newContent: string): void {\n    element.classList.add('updating');\n    \n    setTimeout(() => {\n      element.innerHTML = newContent;\n      element.classList.remove('updating');\n      element.classList.add('updated');\n      \n      setTimeout(() => {\n        element.classList.remove('updated');\n      }, 300);\n    }, 150);\n  }\n\n  /**\n   * Updates element content with slide transition\n   */\n  private updateWithSlideTransition(element: Element, newContent: string): void {\n    element.classList.add('slide-out');\n    \n    setTimeout(() => {\n      element.innerHTML = newContent;\n      element.classList.remove('slide-out');\n      element.classList.add('slide-in');\n      \n      setTimeout(() => {\n        element.classList.remove('slide-in');\n      }, 300);\n    }, 150);\n  }\n\n  /**\n   * Displays combat results and events with smooth animations\n   */\n  public displayCombatResults(events: CombatEvent[]): void {\n    if (!this.container || events.length === 0) return;\n\n    // Queue combat updates for smooth processing\n    this.queueUpdate(() => {\n      this.processCombatEvents(events);\n    });\n  }\n\n  /**\n   * Processes combat events with staggered animations\n   */\n  private processCombatEvents(events: CombatEvent[]): void {\n    const combatEventsContainer = this.container?.querySelector('#combat-events');\n    if (!combatEventsContainer) return;\n\n    events.forEach((event, index) => {\n      // Stagger the display of multiple events for better UX\n      setTimeout(() => {\n        this.displaySingleCombatEvent(event, combatEventsContainer);\n      }, index * 500); // 500ms delay between events\n    });\n\n    // Limit log size to prevent memory issues\n    setTimeout(() => {\n      this.limitLogSize(combatEventsContainer, 50);\n    }, events.length * 500 + 1000);\n  }\n\n  /**\n   * Displays a single combat event with animation\n   */\n  private displaySingleCombatEvent(event: CombatEvent, container: Element): void {\n    const eventElement = this.createCombatEventElement(event);\n    \n    if (this.config.showAnimations) {\n      // Add with slide-in animation\n      eventElement.classList.add('combat-event-entering');\n      container.appendChild(eventElement);\n      \n      // Trigger animation\n      setTimeout(() => {\n        eventElement.classList.remove('combat-event-entering');\n        eventElement.classList.add('combat-event-entered');\n      }, 50);\n      \n      // Scroll to show latest event after animation\n      setTimeout(() => {\n        eventElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n      }, 300);\n    } else {\n      container.appendChild(eventElement);\n      eventElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  /**\n   * Displays error messages to the user\n   */\n  public displayError(message: string): void {\n    this.showMessage(message, 'error');\n  }\n\n  /**\n   * Displays success messages to the user\n   */\n  public displaySuccess(message: string): void {\n    this.showMessage(message, 'success');\n  }\n\n  /**\n   * Initializes the command interface in the existing HTML structure\n   */\n  public initializeCommandInterface(): void {\n    if (!this.container) return;\n\n    // Initialize tab functionality\n    this.initializeCommandTabs();\n    \n    // Populate command panels\n    this.populateCommandPanels();\n  }\n\n  /**\n   * Updates resource display with current values (legacy method for compatibility)\n   */\n  public updateResourceDisplay(resources: any): void {\n    this.queueUpdate(() => {\n      this.updateResourceDisplayWithAnimation(resources);\n    });\n  }\n\n  /**\n   * Handles concurrent state changes by debouncing rapid updates\n   */\n  public handleConcurrentStateChange(gameState: GameState): void {\n    // Cancel any pending updates for the same state\n    this.debouncedDisplayGameState(gameState);\n  }\n\n  /**\n   * Debounced version of displayGameState to handle rapid updates\n   */\n  private debouncedDisplayGameState = this.debounce((gameState: GameState) => {\n    this.displayGameState(gameState);\n  }, 50); // 50ms debounce\n\n  /**\n   * Debounce utility function\n   */\n  private debounce<T extends (...args: any[]) => void>(func: T, wait: number): T {\n    let timeout: NodeJS.Timeout;\n    return ((...args: any[]) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(this, args), wait);\n    }) as T;\n  }\n\n  /**\n   * Handles user interaction feedback with immediate visual response\n   */\n  public handleUserInteractionFeedback(action: string, success: boolean): void {\n    this.queueUpdate(() => {\n      this.showInteractionFeedback(action, success);\n    });\n  }\n\n  /**\n   * Shows immediate visual feedback for user interactions\n   */\n  private showInteractionFeedback(action: string, success: boolean): void {\n    const feedbackElement = document.createElement('div');\n    feedbackElement.className = `interaction-feedback ${success ? 'success' : 'error'}`;\n    feedbackElement.textContent = success ? `${action} successful` : `${action} failed`;\n    \n    // Position near the relevant UI element\n    const actionButton = this.container?.querySelector(`[data-action=\"${action}\"]`);\n    if (actionButton) {\n      const rect = actionButton.getBoundingClientRect();\n      feedbackElement.style.position = 'fixed';\n      feedbackElement.style.left = `${rect.left}px`;\n      feedbackElement.style.top = `${rect.top - 30}px`;\n      feedbackElement.style.zIndex = '1000';\n    }\n    \n    document.body.appendChild(feedbackElement);\n    \n    // Animate and remove\n    if (this.config.showAnimations) {\n      feedbackElement.classList.add('feedback-entering');\n      setTimeout(() => {\n        feedbackElement.classList.add('feedback-leaving');\n        setTimeout(() => {\n          if (feedbackElement.parentNode) {\n            feedbackElement.remove();\n          }\n        }, 300);\n      }, 2000);\n    } else {\n      setTimeout(() => {\n        if (feedbackElement.parentNode) {\n          feedbackElement.remove();\n        }\n      }, 2000);\n    }\n  }\n\n  /**\n   * Optimizes DOM updates by using DocumentFragment for batch operations\n   */\n  private batchDOMUpdates(updates: Array<{ element: Element; content: string }>): void {\n    const fragment = document.createDocumentFragment();\n    \n    updates.forEach(({ element, content }) => {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = content;\n      \n      // Move all children to fragment\n      while (tempDiv.firstChild) {\n        fragment.appendChild(tempDiv.firstChild);\n      }\n      \n      // Replace element content\n      element.innerHTML = '';\n      element.appendChild(fragment.cloneNode(true));\n    });\n  }\n\n  /**\n   * Cleans up resources and cancels pending updates\n   */\n  public cleanup(): void {\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n    \n    this.updateQueue = [];\n    this.isUpdating = false;\n    this.lastGameState = null;\n  }  /**\n\n   * Updates turn and phase information\n   */\n  private updateTurnInfo(gameState: GameState): void {\n    this.updateElementText('.current-turn', gameState.turn.toString());\n    this.updateElementText('.game-phase', gameState.gamePhase.toUpperCase());\n    \n    // Update phase indicator class\n    const phaseIndicator = this.container?.querySelector('.phase-indicator');\n    if (phaseIndicator) {\n      phaseIndicator.className = `phase-indicator phase-${gameState.gamePhase}`;\n    }\n  }\n\n  /**\n   * Updates fleet display information\n   */\n  private updateFleetDisplay(player: PlayerState): void {\n    const fleetDisplay = this.container?.querySelector('#fleet-display');\n    if (!fleetDisplay) return;\n\n    const homeFleet = player.fleet.homeSystem;\n    const totalHome = homeFleet.frigates + homeFleet.cruisers + homeFleet.battleships;\n    \n    fleetDisplay.innerHTML = `\n      <div class=\"fleet-summary\">\n        <div class=\"fleet-total\">\n          <strong>Home Fleet: ${this.formatNumber(totalHome)} ships</strong>\n        </div>\n        <div class=\"fleet-breakdown\">\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🚀</span>\n            <span class=\"unit-name\">Frigates:</span>\n            <span class=\"frigates-count\">${this.formatNumber(homeFleet.frigates)}</span>\n          </div>\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🛸</span>\n            <span class=\"unit-name\">Cruisers:</span>\n            <span class=\"cruisers-count\">${this.formatNumber(homeFleet.cruisers)}</span>\n          </div>\n          <div class=\"unit-count\">\n            <span class=\"unit-icon\">🚁</span>\n            <span class=\"unit-name\">Battleships:</span>\n            <span class=\"battleships-count\">${this.formatNumber(homeFleet.battleships)}</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"fleets-in-transit\">\n        <h5>Fleets in Transit</h5>\n        <div class=\"transit-fleets\">\n          ${this.renderInTransitFleets(player.fleet.inTransit.outbound)}\n        </div>\n      </div>\n      <div class=\"construction-queue\">\n        <h5>Construction Queue</h5>\n        ${this.renderConstructionQueue(player.economy.constructionQueue)}\n      </div>\n      <div class=\"intelligence-panel\">\n        <h5>Intelligence</h5>\n        ${this.renderIntelligenceInfo(player.intelligence)}\n      </div>\n    `;\n  }\n\n\n\n  private renderIntelligenceInfo(intelligence: any): string {\n    if (intelligence.lastScanTurn === 0) {\n      return '<div class=\"no-intel\">No enemy scans performed</div>';\n    }\n\n    const turnsAgo = Math.max(0, intelligence.lastScanTurn);\n    const knownFleet = intelligence.knownEnemyFleet;\n    const totalKnown = knownFleet.frigates + knownFleet.cruisers + knownFleet.battleships;\n\n    return `\n      <div class=\"intel-summary\">\n        <div class=\"last-scan\">Last scan: ${turnsAgo === 0 ? 'This turn' : `${turnsAgo} turns ago`}</div>\n        ${totalKnown > 0 ? `\n          <div class=\"known-fleet\">\n            <div class=\"fleet-title\">Known Enemy Fleet (~${this.formatNumber(totalKnown)} ships):</div>\n            <div class=\"fleet-breakdown\">\n              <div>🚀 Frigates: ~${this.formatNumber(knownFleet.frigates)}</div>\n              <div>🛸 Cruisers: ~${this.formatNumber(knownFleet.cruisers)}</div>\n              <div>🚁 Battleships: ~${this.formatNumber(knownFleet.battleships)}</div>\n            </div>\n            ${turnsAgo > 2 ? '<div class=\"intel-warning\">⚠️ Intelligence data may be outdated</div>' : ''}\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  /**\n   * Updates game status indicators\n   */\n  private updateGameStatusIndicators(gameState: GameState): void {\n    // Update game over state\n    this.toggleClass('.game-container', 'game-over', gameState.isGameOver);\n    \n    if (gameState.isGameOver) {\n      this.showGameOverMessage(gameState);\n    }\n  }\n\n  /**\n   * Initializes command tabs functionality\n   */\n  private initializeCommandTabs(): void {\n    const tabButtons = this.container?.querySelectorAll('.tab-button');\n    if (!tabButtons) return;\n\n    tabButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        const tabId = (button as HTMLElement).dataset.tab;\n        if (tabId) {\n          this.switchTab(tabId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Populates command panels with interactive forms\n   */\n  private populateCommandPanels(): void {\n    // Populate build panel\n    const buildPanel = this.container?.querySelector('#build-panel');\n    if (buildPanel) {\n      buildPanel.innerHTML = this.createBuildPanelContent();\n      this.attachBuildPanelListeners(buildPanel);\n    }\n\n    // Populate attack panel\n    const attackPanel = this.container?.querySelector('#attack-panel');\n    if (attackPanel) {\n      attackPanel.innerHTML = this.createAttackPanelContent();\n      this.attachAttackPanelListeners(attackPanel);\n    }\n\n    // Populate scan panel\n    const scanPanel = this.container?.querySelector('#scan-panel');\n    if (scanPanel) {\n      scanPanel.innerHTML = this.createScanPanelContent();\n      this.attachScanPanelListeners(scanPanel);\n    }\n  } \n  /**\n   * Creates build command panel content\n   */\n  private createBuildPanelContent(): string {\n    return `\n      <form data-action-type=\"build\" class=\"build-form\">\n        <div class=\"form-section\">\n          <h3>Build Units</h3>\n          <div class=\"build-options\">\n            <div class=\"build-option\">\n              <label>\n                <input type=\"radio\" name=\"buildType\" value=\"frigate\" checked>\n                <span class=\"build-info\">\n                  <strong>Frigate</strong> (4 Metal, 2 Energy)\n                  <small>Fast, effective vs Cruisers</small>\n                </span>\n              </label>\n            </div>\n            <div class=\"build-option\">\n              <label>\n                <input type=\"radio\" name=\"buildType\" value=\"cruiser\">\n                <span class=\"build-info\">\n                  <strong>Cruiser</strong> (10 Metal, 6 Energy)\n                  <small>Balanced, effective vs Battleships</small>\n                </span>\n              </label>\n            </div>\n            <div class=\"build-option\">\n              <label>\n                <input type=\"radio\" name=\"buildType\" value=\"battleship\">\n                <span class=\"build-info\">\n                  <strong>Battleship</strong> (20 Metal, 12 Energy)\n                  <small>Heavy, effective vs Frigates</small>\n                </span>\n              </label>\n            </div>\n          </div>\n          <div class=\"quantity-input\">\n            <label for=\"unit-quantity\">Quantity:</label>\n            <input type=\"number\" id=\"unit-quantity\" name=\"quantity\" value=\"1\" min=\"1\" max=\"1000\">\n          </div>\n        </div>\n        \n        <div class=\"form-section\">\n          <h3>Build Structures</h3>\n          <div class=\"build-options\">\n            <div class=\"build-option\">\n              <label>\n                <input type=\"radio\" name=\"buildType\" value=\"reactor\">\n                <span class=\"build-info\">\n                  <strong>Reactor</strong> (900 Metal, 1200 Energy)\n                  <small>+500 Energy/turn</small>\n                </span>\n              </label>\n            </div>\n            <div class=\"build-option\">\n              <label>\n                <input type=\"radio\" name=\"buildType\" value=\"mine\">\n                <span class=\"build-info\">\n                  <strong>Mine</strong> (1500 Metal, 600 Energy)\n                  <small>+500 Metal/turn</small>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"form-actions\">\n          <button type=\"submit\" class=\"primary-button\">Build</button>\n          <div class=\"cost-display\">\n            <span class=\"total-cost\">Total Cost: <span class=\"cost-amount\">4 Metal, 2 Energy</span></span>\n          </div>\n        </div>\n      </form>\n    `;\n  }\n\n  /**\n   * Attaches event listeners to build panel\n   */\n  private attachBuildPanelListeners(panel: Element): void {\n    const form = panel.querySelector('form');\n    if (form) {\n      form.addEventListener('change', () => this.updateBuildCost(form));\n      form.addEventListener('input', () => this.updateBuildCost(form));\n    }\n  }\n\n  /**\n   * Creates attack command panel content\n   */\n  private createAttackPanelContent(): string {\n    return `\n      <form data-action-type=\"attack\" class=\"attack-form\">\n        <div class=\"form-section\">\n          <h3>Fleet Composition</h3>\n          <div class=\"fleet-inputs\">\n            <div class=\"fleet-input\">\n              <label for=\"attack-frigates\">Frigates:</label>\n              <input type=\"number\" id=\"attack-frigates\" name=\"frigates\" value=\"0\" min=\"0\">\n              <span class=\"available\">Available: <span class=\"frigates-available\">0</span></span>\n            </div>\n            <div class=\"fleet-input\">\n              <label for=\"attack-cruisers\">Cruisers:</label>\n              <input type=\"number\" id=\"attack-cruisers\" name=\"cruisers\" value=\"0\" min=\"0\">\n              <span class=\"available\">Available: <span class=\"cruisers-available\">0</span></span>\n            </div>\n            <div class=\"fleet-input\">\n              <label for=\"attack-battleships\">Battleships:</label>\n              <input type=\"number\" id=\"attack-battleships\" name=\"battleships\" value=\"0\" min=\"0\">\n              <span class=\"available\">Available: <span class=\"battleships-available\">0</span></span>\n            </div>\n          </div>\n          \n          <div class=\"fleet-summary\">\n            <div class=\"total-ships\">Total Ships: <span class=\"attack-total\">0</span></div>\n            <div class=\"fleet-effectiveness\">\n              <div class=\"effectiveness-tip\">\n                💡 Frigates > Cruisers > Battleships > Frigates\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"form-section\">\n          <h3>Target</h3>\n          <div class=\"target-selection\">\n            <label>\n              <input type=\"radio\" name=\"target\" value=\"enemy\" checked>\n              <span>Enemy Home System</span>\n            </label>\n          </div>\n        </div>\n        \n        <div class=\"form-actions\">\n          <button type=\"submit\" class=\"primary-button danger\">Launch Attack</button>\n          <div class=\"attack-info\">\n            <small>Fleet will arrive next turn and return in 3 turns</small>\n          </div>\n        </div>\n      </form>\n    `;\n  }\n\n  /**\n   * Attaches event listeners to attack panel\n   */\n  private attachAttackPanelListeners(panel: Element): void {\n    const form = panel.querySelector('form');\n    if (form) {\n      form.addEventListener('input', () => this.updateAttackTotal(form));\n    }\n  }\n\n  /**\n   * Updates available fleet counts in attack panel\n   */\n  public updateAttackPanelFleetCounts(homeFleet: any): void {\n    if (!this.container) return;\n\n    const attackPanel = this.container.querySelector('#attack-panel');\n    if (!attackPanel) return;\n\n    const frigatesAvailable = attackPanel.querySelector('.frigates-available');\n    const cruisersAvailable = attackPanel.querySelector('.cruisers-available');\n    const battleshipsAvailable = attackPanel.querySelector('.battleships-available');\n\n    if (frigatesAvailable) frigatesAvailable.textContent = this.formatNumber(homeFleet.frigates);\n    if (cruisersAvailable) cruisersAvailable.textContent = this.formatNumber(homeFleet.cruisers);\n    if (battleshipsAvailable) battleshipsAvailable.textContent = this.formatNumber(homeFleet.battleships);\n  }\n\n  /**\n   * Creates scan command panel content\n   */\n  private createScanPanelContent(): string {\n    return `\n      <form data-action-type=\"scan\" class=\"scan-form\">\n        <div class=\"form-section\">\n          <h3>Intelligence Scans</h3>\n          <div class=\"scan-options\">\n            <div class=\"scan-option\">\n              <label>\n                <input type=\"radio\" name=\"scanType\" value=\"basic\" checked>\n                <span class=\"scan-info\">\n                  <strong>Basic Scan</strong> (1,000 Energy)\n                  <small>Total enemy fleet count (±30% accuracy)</small>\n                </span>\n              </label>\n            </div>\n            <div class=\"scan-option\">\n              <label>\n                <input type=\"radio\" name=\"scanType\" value=\"deep\">\n                <span class=\"scan-info\">\n                  <strong>Deep Scan</strong> (2,500 Energy)\n                  <small>Unit composition + economy (±10% accuracy)</small>\n                </span>\n              </label>\n            </div>\n            <div class=\"scan-option\">\n              <label>\n                <input type=\"radio\" name=\"scanType\" value=\"advanced\">\n                <span class=\"scan-info\">\n                  <strong>Advanced Scan</strong> (4,000 Energy)\n                  <small>Strategic intent analysis</small>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"form-actions\">\n          <button type=\"submit\" class=\"primary-button\">Perform Scan</button>\n          <div class=\"scan-cost\">\n            <span class=\"energy-cost\">Cost: <span class=\"cost-amount\">1,000 Energy</span></span>\n          </div>\n        </div>\n      </form>\n    `;\n  }\n\n  /**\n   * Attaches event listeners to scan panel\n   */\n  private attachScanPanelListeners(panel: Element): void {\n    const form = panel.querySelector('form');\n    if (form) {\n      form.addEventListener('change', () => this.updateScanCost(form));\n    }\n  }\n\n  /**\n   * Helper methods for DOM manipulation\n   */\n  private updateElementText(selector: string, text: string): void {\n    const element = this.container?.querySelector(selector);\n    if (element) {\n      element.textContent = text;\n    }\n  }\n\n  private toggleClass(selector: string, className: string, condition: boolean): void {\n    const element = this.container?.querySelector(selector);\n    if (element) {\n      element.classList.toggle(className, condition);\n    }\n  }\n\n  private showMessage(message: string, type: 'error' | 'success' | 'info' = 'info'): void {\n    // Use the system messages container for displaying messages\n    const systemLog = this.container?.querySelector('#system-log');\n    if (!systemLog) return;\n\n    const messageElement = document.createElement('div');\n    messageElement.className = `message message-${type}`;\n    \n    // Add timestamp and icon based on type\n    const timestamp = new Date().toLocaleTimeString();\n    const icon = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';\n    \n    messageElement.innerHTML = `\n      <span class=\"message-time\">${timestamp}</span>\n      <span class=\"message-icon\">${icon}</span>\n      <span class=\"message-text\">${message}</span>\n    `;\n\n    systemLog.appendChild(messageElement);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      if (messageElement.parentNode) {\n        messageElement.remove();\n      }\n    }, 5000);\n\n    // Add click to dismiss\n    messageElement.addEventListener('click', () => {\n      messageElement.remove();\n    });\n\n    // Scroll to show latest message\n    messageElement.scrollIntoView({ behavior: 'smooth' });\n\n    // Limit log size to prevent memory issues\n    this.limitLogSize(systemLog, 20);\n  }\n\n  private switchTab(tabId: string): void {\n    // Update tab buttons\n    const tabButtons = this.container?.querySelectorAll('.tab-button');\n    tabButtons?.forEach(button => {\n      const htmlButton = button as HTMLElement;\n      htmlButton.classList.toggle('active', htmlButton.dataset.tab === tabId);\n    });\n\n    // Update panels\n    const panels = this.container?.querySelectorAll('.command-panel');\n    panels?.forEach(panel => {\n      panel.classList.toggle('active', panel.id === `${tabId}-panel`);\n    });\n  }\n\n  private updateBuildCost(form: HTMLFormElement): void {\n    const formData = new FormData(form);\n    const buildType = formData.get('buildType') as string;\n    const quantity = parseInt(formData.get('quantity') as string) || 1;\n\n    const costs = this.getBuildCosts(buildType);\n    const totalMetal = costs.metal * quantity;\n    const totalEnergy = costs.energy * quantity;\n\n    const costDisplay = form.querySelector('.cost-amount');\n    if (costDisplay) {\n      costDisplay.textContent = `${this.formatNumber(totalMetal)} Metal, ${this.formatNumber(totalEnergy)} Energy`;\n    }\n  }\n\n  private updateAttackTotal(form: HTMLFormElement): void {\n    const formData = new FormData(form);\n    const frigates = parseInt(formData.get('frigates') as string) || 0;\n    const cruisers = parseInt(formData.get('cruisers') as string) || 0;\n    const battleships = parseInt(formData.get('battleships') as string) || 0;\n    const total = frigates + cruisers + battleships;\n\n    const totalDisplay = form.querySelector('.attack-total');\n    if (totalDisplay) {\n      totalDisplay.textContent = total.toString();\n    }\n  }\n\n  private updateScanCost(form: HTMLFormElement): void {\n    const formData = new FormData(form);\n    const scanType = formData.get('scanType') as string;\n\n    const costs = {\n      basic: 1000,\n      deep: 2500,\n      advanced: 4000\n    };\n\n    const cost = costs[scanType as keyof typeof costs] || 1000;\n    const costDisplay = form.querySelector('.cost-amount');\n    if (costDisplay) {\n      costDisplay.textContent = `${this.formatNumber(cost)} Energy`;\n    }\n  }\n\n  private getBuildCosts(buildType: string): { metal: number; energy: number } {\n    const costs = {\n      frigate: { metal: 4, energy: 2 },\n      cruiser: { metal: 10, energy: 6 },\n      battleship: { metal: 20, energy: 12 },\n      reactor: { metal: 900, energy: 1200 },\n      mine: { metal: 1500, energy: 600 }\n    };\n\n    return costs[buildType as keyof typeof costs] || { metal: 0, energy: 0 };\n  }\n\n  private formatNumber(num: number): string {\n    return num.toLocaleString();\n  }\n\n  private formatIncome(income: number): string {\n    const sign = income >= 0 ? '+' : '';\n    return `${sign}${this.formatNumber(income)}`;\n  }\n\n  private createCombatEventElement(event: CombatEvent): HTMLElement {\n    const eventElement = document.createElement('div');\n    eventElement.className = 'combat-event';\n    \n    const attackerName = event.attacker === 'player' ? 'YOUR' : 'ENEMY';\n    const defenderName = event.attacker === 'player' ? 'ENEMY' : 'YOUR';\n    \n    eventElement.innerHTML = `\n      <div class=\"combat-header\">\n        <span class=\"combat-turn\">Turn ${event.turn}</span>\n        <span class=\"combat-title\">${attackerName} FLEET ATTACKS ${defenderName} SYSTEM</span>\n      </div>\n      <div class=\"combat-details\">\n        <div class=\"fleet-comparison\">\n          <div class=\"attacker-fleet\">\n            <strong>Attacker:</strong> ${this.formatFleetComposition(event.attackerFleet)}\n          </div>\n          <div class=\"defender-fleet\">\n            <strong>Defender:</strong> ${this.formatFleetComposition(event.defenderFleet)}\n          </div>\n        </div>\n        <div class=\"combat-outcome ${event.outcome}\">\n          ${this.formatBattleOutcome(event.outcome)}\n        </div>\n        <div class=\"casualties\">\n          <div>Casualties: ${attackerName} lost ${this.getTotalShips(event.casualties.attacker)} ships, \n               ${defenderName} lost ${this.getTotalShips(event.casualties.defender)} ships</div>\n        </div>\n      </div>\n    `;\n    \n    return eventElement;\n  }\n\n  private formatFleetComposition(fleet: FleetComposition): string {\n    const total = fleet.frigates + fleet.cruisers + fleet.battleships;\n    return `${total} ships (${fleet.frigates}F, ${fleet.cruisers}C, ${fleet.battleships}B)`;\n  }\n\n  private getTotalShips(fleet: FleetComposition): number {\n    return fleet.frigates + fleet.cruisers + fleet.battleships;\n  }\n\n  private formatBattleOutcome(outcome: string): string {\n    switch (outcome) {\n      case 'decisive_attacker':\n        return 'DECISIVE ATTACKER VICTORY';\n      case 'decisive_defender':\n        return 'DECISIVE DEFENDER VICTORY';\n      case 'close_battle':\n        return 'CLOSE BATTLE';\n      default:\n        return outcome.toUpperCase();\n    }\n  }\n\n  private limitLogSize(container: Element, maxItems: number): void {\n    const items = container.children;\n    while (items.length > maxItems) {\n      container.removeChild(items[0]);\n    }\n  }\n\n  private renderInTransitFleets(outbound: any[]): string {\n    if (outbound.length === 0) {\n      return '<div class=\"no-transit\">No fleets in transit</div>';\n    }\n\n    return outbound.map((movement, index) => {\n      const totalShips = this.getTotalShips(movement.composition);\n      return `\n        <div class=\"transit-fleet\">\n          <span class=\"fleet-number\">Fleet ${index + 1}:</span>\n          <span class=\"fleet-size\">${totalShips} ships</span>\n          <span class=\"mission-type\">${movement.missionType}</span>\n          <span class=\"arrival-info\">(arrives turn ${movement.arrivalTurn})</span>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private renderConstructionQueue(constructionQueue: any[]): string {\n    if (constructionQueue.length === 0) {\n      return '<div class=\"queue-empty\">No construction in progress</div>';\n    }\n\n    return constructionQueue.map((order, index) => {\n      const progress = this.getConstructionProgress(order);\n      return `\n        <div class=\"queue-item\">\n          <div class=\"queue-number\">${index + 1}.</div>\n          <div class=\"queue-details\">\n            <div class=\"queue-item-name\">${order.quantity}x ${order.unitType}</div>\n            <div class=\"queue-progress\">${progress}</div>\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private getConstructionProgress(order: any): string {\n    const remaining = order.turnsRemaining;\n    if (remaining === 1) {\n      return 'Completes next turn';\n    } else {\n      return `${remaining} turns remaining`;\n    }\n  }\n\n\n\n  private showGameOverMessage(gameState: GameState): void {\n    const winner = gameState.winner;\n    const victoryType = gameState.victoryType;\n    \n    const message = winner === 'player' ? \n      `🎉 VICTORY! You defeated the AI via ${victoryType} victory!` :\n      `💀 DEFEAT! The AI defeated you via ${victoryType} victory!`;\n    \n    this.showMessage(message, winner === 'player' ? 'success' : 'error');\n  }\n}","import { GameState } from '../models/GameState.js';\nimport { validateGameState, ValidationResult } from '../models/validation.js';\nimport { WebErrorHandler } from './WebErrorHandler.js';\n\n/**\n * Configuration options for GameStateManager\n */\nexport interface GameStateManagerConfig {\n  storageKey?: string;\n  enableCompression?: boolean;\n  maxStoredStates?: number;\n  autoSave?: boolean;\n}\n\n/**\n * Result of save/load operations\n */\nexport interface StorageResult {\n  success: boolean;\n  error?: string;\n  data?: GameState;\n}\n\n/**\n * Manages game state persistence and recovery for browser environment\n */\nexport class GameStateManager {\n  private readonly storageKey: string;\n  private readonly enableCompression: boolean;\n  private readonly maxStoredStates: number;\n  private readonly autoSave: boolean;\n\n  constructor(config: GameStateManagerConfig = {}) {\n    this.storageKey = config.storageKey || 'burn-rate-game-state';\n    this.enableCompression = config.enableCompression || false;\n    this.maxStoredStates = config.maxStoredStates || 5;\n    this.autoSave = config.autoSave || true;\n  }\n\n  /**\n   * Saves the current game state to localStorage\n   */\n  public saveGameState(gameState: GameState): StorageResult {\n    try {\n      // Validate game state before saving\n      const validation = validateGameState(gameState);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Invalid game state: ${validation.errors.join(', ')}`\n        };\n      }\n\n      // Prepare save data with metadata\n      const saveData = {\n        gameState,\n        timestamp: Date.now(),\n        version: '1.0.0',\n        turn: gameState.turn\n      };\n\n      // Convert to JSON string\n      let serializedData = JSON.stringify(saveData);\n\n      // Apply compression if enabled\n      if (this.enableCompression) {\n        serializedData = this.compressData(serializedData);\n      }\n\n      // Save to localStorage\n      localStorage.setItem(this.storageKey, serializedData);\n\n      // Manage multiple saved states if configured\n      if (this.maxStoredStates > 1) {\n        this.manageStoredStates(saveData);\n      }\n\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = `Failed to save game state: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'saveGameState');\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\n   * Loads the game state from localStorage\n   */\n  public loadGameState(): StorageResult {\n    try {\n      const storedData = localStorage.getItem(this.storageKey);\n      \n      if (!storedData) {\n        return {\n          success: false,\n          error: 'No saved game state found'\n        };\n      }\n\n      // Decompress if needed\n      let serializedData = storedData;\n      if (this.enableCompression) {\n        serializedData = this.decompressData(storedData);\n      }\n\n      // Parse JSON data\n      const saveData = JSON.parse(serializedData);\n\n      // Validate save data structure\n      if (!saveData.gameState || !saveData.timestamp) {\n        return {\n          success: false,\n          error: 'Invalid save data format'\n        };\n      }\n\n      // Validate the game state\n      const validation = validateGameState(saveData.gameState);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Corrupted game state: ${validation.errors.join(', ')}`\n        };\n      }\n\n      return {\n        success: true,\n        data: saveData.gameState\n      };\n\n    } catch (error) {\n      const errorMessage = `Failed to load game state: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'loadGameState');\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\n   * Checks if there is a valid saved game state\n   */\n  public hasValidSavedState(): boolean {\n    const result = this.loadGameState();\n    return result.success && result.data !== undefined;\n  }\n\n  /**\n   * Clears all saved game state data\n   */\n  public clearSavedState(): StorageResult {\n    try {\n      localStorage.removeItem(this.storageKey);\n      \n      // Clear multiple states if configured\n      if (this.maxStoredStates > 1) {\n        for (let i = 1; i < this.maxStoredStates; i++) {\n          localStorage.removeItem(`${this.storageKey}-${i}`);\n        }\n      }\n\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = `Failed to clear saved state: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'clearSavedState');\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\n   * Gets information about saved states\n   */\n  public getSavedStateInfo(): { hasSavedState: boolean; lastSaved?: Date; turn?: number } {\n    try {\n      const storedData = localStorage.getItem(this.storageKey);\n      \n      if (!storedData) {\n        return { hasSavedState: false };\n      }\n\n      let serializedData = storedData;\n      if (this.enableCompression) {\n        serializedData = this.decompressData(storedData);\n      }\n\n      const saveData = JSON.parse(serializedData);\n      \n      return {\n        hasSavedState: true,\n        lastSaved: new Date(saveData.timestamp),\n        turn: saveData.turn\n      };\n\n    } catch (error) {\n      return { hasSavedState: false };\n    }\n  }\n\n  /**\n   * Handles page refresh scenario by checking for saved state\n   */\n  public handlePageRefresh(): StorageResult {\n    if (!this.hasValidSavedState()) {\n      return {\n        success: false,\n        error: 'No valid saved state found for recovery'\n      };\n    }\n\n    return this.loadGameState();\n  }\n\n  /**\n   * Creates a backup of the current state before making changes\n   */\n  public createBackup(gameState: GameState): StorageResult {\n    try {\n      const backupKey = `${this.storageKey}-backup-${Date.now()}`;\n      const backupData = {\n        gameState,\n        timestamp: Date.now(),\n        isBackup: true\n      };\n\n      localStorage.setItem(backupKey, JSON.stringify(backupData));\n\n      // Clean up old backups (keep only last 3)\n      this.cleanupOldBackups();\n\n      return { success: true };\n\n    } catch (error) {\n      const errorMessage = `Failed to create backup: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      if (error instanceof Error) {\n        WebErrorHandler.handleStorageError(error, 'createBackup');\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\n   * Validates localStorage availability and functionality\n   */\n  public validateStorageAvailability(): ValidationResult {\n    const errors: string[] = [];\n\n    try {\n      // Test localStorage availability\n      if (typeof localStorage === 'undefined') {\n        errors.push('localStorage is not supported in this browser');\n      }\n\n      // Test write/read functionality\n      const testKey = `${this.storageKey}-test`;\n      const testData = 'test-data';\n      \n      localStorage.setItem(testKey, testData);\n      const retrieved = localStorage.getItem(testKey);\n      localStorage.removeItem(testKey);\n\n      if (retrieved !== testData) {\n        errors.push('localStorage read/write test failed');\n      }\n\n      // Check available storage space (approximate)\n      const testLargeData = 'x'.repeat(1024 * 1024); // 1MB test\n      try {\n        localStorage.setItem(`${testKey}-large`, testLargeData);\n        localStorage.removeItem(`${testKey}-large`);\n      } catch (e) {\n        errors.push('Insufficient localStorage space available');\n      }\n\n    } catch (error) {\n      errors.push(`localStorage validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Manages multiple stored states by rotating old saves\n   */\n  private manageStoredStates(newSaveData: any): void {\n    try {\n      // Shift existing saves\n      for (let i = this.maxStoredStates - 1; i > 0; i--) {\n        const currentKey = i === 1 ? this.storageKey : `${this.storageKey}-${i - 1}`;\n        const nextKey = `${this.storageKey}-${i}`;\n        \n        const existingData = localStorage.getItem(currentKey);\n        if (existingData) {\n          localStorage.setItem(nextKey, existingData);\n        }\n      }\n    } catch (error) {\n      // Silently fail - not critical for game functionality\n      console.warn('Failed to manage stored states:', error);\n    }\n  }\n\n  /**\n   * Cleans up old backup files to prevent storage bloat\n   */\n  private cleanupOldBackups(): void {\n    try {\n      const backupKeys: string[] = [];\n      \n      // Find all backup keys\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(`${this.storageKey}-backup-`)) {\n          backupKeys.push(key);\n        }\n      }\n\n      // Sort by timestamp (newest first)\n      backupKeys.sort((a, b) => {\n        const timestampA = parseInt(a.split('-').pop() || '0');\n        const timestampB = parseInt(b.split('-').pop() || '0');\n        return timestampB - timestampA;\n      });\n\n      // Remove old backups (keep only 3 most recent)\n      for (let i = 3; i < backupKeys.length; i++) {\n        localStorage.removeItem(backupKeys[i]);\n      }\n\n    } catch (error) {\n      // Silently fail - not critical for game functionality\n      console.warn('Failed to cleanup old backups:', error);\n    }\n  }\n\n  /**\n   * Simple compression using basic string manipulation\n   * Note: In production, consider using a proper compression library\n   */\n  private compressData(data: string): string {\n    // Simple run-length encoding for repeated characters\n    return data.replace(/(.)\\1{2,}/g, (match, char) => {\n      return `${char}${match.length}${char}`;\n    });\n  }\n\n  /**\n   * Decompresses data compressed with compressData\n   */\n  private decompressData(compressedData: string): string {\n    // Reverse the simple run-length encoding\n    return compressedData.replace(/(.)\\d+\\1/g, (match, char) => {\n      const count = parseInt(match.slice(1, -1));\n      return char.repeat(count);\n    });\n  }\n}","import { AIArchetype } from '../models/AI.js';\nimport { GameEngineConfig } from '../engine/GameEngine.js';\n\n/**\n * Web-specific game configuration interface\n */\nexport interface WebGameConfig extends GameEngineConfig {\n  webConfig: {\n    containerId: string;\n    theme: 'dark' | 'light';\n    showAnimations: boolean;\n    autoSave: boolean;\n    showDebugInfo: boolean;\n  };\n  seed?: number;\n}\n\n/**\n * Configuration presets for different game modes\n */\nexport interface GamePreset {\n  name: string;\n  description: string;\n  config: Partial<WebGameConfig>;\n}\n\n/**\n * Settings that can be changed during gameplay\n */\nexport interface GameSettings {\n  theme: 'dark' | 'light';\n  showAnimations: boolean;\n  autoSave: boolean;\n  showDebugInfo: boolean;\n  soundEnabled: boolean;\n  volume: number;\n}\n\n/**\n * Manages game configuration and settings for the web interface\n */\nexport class GameConfigManager {\n  private static readonly SETTINGS_KEY = 'burn-rate-settings';\n  private static readonly CONFIG_KEY = 'burn-rate-config';\n\n  private currentSettings: GameSettings;\n  private currentConfig: WebGameConfig;\n\n  constructor() {\n    this.currentSettings = this.loadSettings();\n    this.currentConfig = this.loadConfig();\n  }\n\n  /**\n   * Gets the current game settings\n   */\n  public getSettings(): GameSettings {\n    return { ...this.currentSettings };\n  }\n\n  /**\n   * Updates game settings\n   */\n  public updateSettings(newSettings: Partial<GameSettings>): void {\n    this.currentSettings = {\n      ...this.currentSettings,\n      ...newSettings\n    };\n    this.saveSettings();\n  }\n\n  /**\n   * Gets the current game configuration\n   */\n  public getConfig(): WebGameConfig {\n    return { ...this.currentConfig };\n  }\n\n  /**\n   * Updates game configuration\n   */\n  public updateConfig(newConfig: Partial<WebGameConfig>): void {\n    this.currentConfig = {\n      ...this.currentConfig,\n      ...newConfig,\n      webConfig: {\n        ...this.currentConfig.webConfig,\n        ...(newConfig.webConfig || {})\n      }\n    };\n    this.saveConfig();\n  }\n\n  /**\n   * Creates a new game configuration with specified options\n   */\n  public createGameConfig(options: {\n    aiArchetype?: AIArchetype;\n    startingResources?: { metal: number; energy: number };\n    debugMode?: boolean;\n    seed?: number;\n  }): WebGameConfig {\n    const config: WebGameConfig = {\n      aiArchetype: options.aiArchetype || 'hybrid',\n      startingResources: options.startingResources || { metal: 10000, energy: 10000 },\n      seed: options.seed,\n      webConfig: {\n        containerId: 'burn-rate-game',\n        theme: this.currentSettings.theme,\n        showAnimations: this.currentSettings.showAnimations,\n        autoSave: this.currentSettings.autoSave,\n        showDebugInfo: options.debugMode || this.currentSettings.showDebugInfo\n      }\n    };\n\n    this.currentConfig = config;\n    this.saveConfig();\n    return config;\n  }\n\n  /**\n   * Gets available AI archetypes with descriptions\n   */\n  public getAIArchetypes(): Array<{\n    value: AIArchetype;\n    name: string;\n    description: string;\n  }> {\n    return [\n      {\n        value: 'aggressor',\n        name: 'Aggressor',\n        description: 'Focuses on military expansion and early attacks. Builds large fleets quickly and attacks frequently.'\n      },\n      {\n        value: 'economist',\n        name: 'Economist',\n        description: 'Prioritizes economic development and infrastructure. Builds up resources before military expansion.'\n      },\n      {\n        value: 'trickster',\n        name: 'Trickster',\n        description: 'Uses deception and unpredictable strategies. May provide false intelligence and vary tactics.'\n      },\n      {\n        value: 'hybrid',\n        name: 'Hybrid',\n        description: 'Adapts strategy based on game conditions. Balances economic and military development dynamically.'\n      }\n    ];\n  }\n\n  /**\n   * Gets predefined game presets\n   */\n  public getGamePresets(): GamePreset[] {\n    return [\n      {\n        name: 'Quick Start',\n        description: 'Standard game with balanced settings for new players',\n        config: {\n          aiArchetype: 'hybrid',\n          startingResources: { metal: 10000, energy: 10000 },\n          webConfig: {\n            containerId: 'burn-rate-game',\n            theme: 'dark',\n            showAnimations: true,\n            autoSave: true,\n            showDebugInfo: false\n          }\n        }\n      },\n      {\n        name: 'Economic Challenge',\n        description: 'Start with limited resources against an economist AI',\n        config: {\n          aiArchetype: 'economist',\n          startingResources: { metal: 5000, energy: 5000 },\n          webConfig: {\n            containerId: 'burn-rate-game',\n            theme: 'dark',\n            showAnimations: true,\n            autoSave: true,\n            showDebugInfo: false\n          }\n        }\n      },\n      {\n        name: 'Military Rush',\n        description: 'Face an aggressive AI with standard resources',\n        config: {\n          aiArchetype: 'aggressor',\n          startingResources: { metal: 10000, energy: 10000 },\n          webConfig: {\n            containerId: 'burn-rate-game',\n            theme: 'dark',\n            showAnimations: true,\n            autoSave: true,\n            showDebugInfo: false\n          }\n        }\n      },\n      {\n        name: 'Unpredictable',\n        description: 'Random AI behavior with trickster archetype',\n        config: {\n          aiArchetype: 'trickster',\n          startingResources: { metal: 10000, energy: 10000 },\n          webConfig: {\n            containerId: 'burn-rate-game',\n            theme: 'dark',\n            showAnimations: true,\n            autoSave: true,\n            showDebugInfo: false\n          }\n        }\n      },\n      {\n        name: 'Debug Mode',\n        description: 'Enhanced resources and debug information for testing',\n        config: {\n          aiArchetype: 'hybrid',\n          startingResources: { metal: 50000, energy: 50000 },\n          webConfig: {\n            containerId: 'burn-rate-game',\n            theme: 'dark',\n            showAnimations: false,\n            autoSave: false,\n            showDebugInfo: true\n          }\n        }\n      }\n    ];\n  }\n\n  /**\n   * Validates game configuration\n   */\n  public validateConfig(config: Partial<WebGameConfig>): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    // Validate AI archetype\n    if (config.aiArchetype) {\n      const validArchetypes: AIArchetype[] = ['aggressor', 'economist', 'trickster', 'hybrid'];\n      if (!validArchetypes.includes(config.aiArchetype)) {\n        errors.push(`Invalid AI archetype: ${config.aiArchetype}`);\n      }\n    }\n\n    // Validate starting resources\n    if (config.startingResources) {\n      if (config.startingResources.metal < 0 || config.startingResources.energy < 0) {\n        errors.push('Starting resources cannot be negative');\n      }\n      if (config.startingResources.metal > 1000000 || config.startingResources.energy > 1000000) {\n        errors.push('Starting resources cannot exceed 1,000,000');\n      }\n    }\n\n    // Validate seed\n    if (config.seed !== undefined) {\n      if (!Number.isInteger(config.seed) || config.seed < 0) {\n        errors.push('Seed must be a non-negative integer');\n      }\n    }\n\n    // Validate web config\n    if (config.webConfig) {\n      if (config.webConfig.theme && !['dark', 'light'].includes(config.webConfig.theme)) {\n        errors.push('Theme must be either \"dark\" or \"light\"');\n      }\n      if (config.webConfig.containerId && typeof config.webConfig.containerId !== 'string') {\n        errors.push('Container ID must be a string');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Resets configuration to defaults\n   */\n  public resetToDefaults(): void {\n    this.currentSettings = this.getDefaultSettings();\n    this.currentConfig = this.getDefaultConfig();\n    this.saveSettings();\n    this.saveConfig();\n  }\n\n  /**\n   * Exports current configuration as JSON\n   */\n  public exportConfig(): string {\n    return JSON.stringify({\n      settings: this.currentSettings,\n      config: this.currentConfig,\n      exportDate: new Date().toISOString(),\n      version: '1.0.0'\n    }, null, 2);\n  }\n\n  /**\n   * Imports configuration from JSON\n   */\n  public importConfig(jsonData: string): {\n    success: boolean;\n    error?: string;\n  } {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.settings) {\n        this.currentSettings = { ...this.getDefaultSettings(), ...data.settings };\n        this.saveSettings();\n      }\n      \n      if (data.config) {\n        const validation = this.validateConfig(data.config);\n        if (!validation.isValid) {\n          return {\n            success: false,\n            error: `Invalid configuration: ${validation.errors.join(', ')}`\n          };\n        }\n        \n        this.currentConfig = { ...this.getDefaultConfig(), ...data.config };\n        this.saveConfig();\n      }\n\n      return { success: true };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to import configuration: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  /**\n   * Generates a random seed\n   */\n  public generateRandomSeed(): number {\n    return Math.floor(Math.random() * 1000000);\n  }\n\n  /**\n   * Gets resource preset options\n   */\n  public getResourcePresets(): Array<{\n    name: string;\n    description: string;\n    resources: { metal: number; energy: number };\n  }> {\n    return [\n      {\n        name: 'Minimal',\n        description: 'Very limited starting resources',\n        resources: { metal: 2500, energy: 2500 }\n      },\n      {\n        name: 'Limited',\n        description: 'Reduced starting resources',\n        resources: { metal: 5000, energy: 5000 }\n      },\n      {\n        name: 'Standard',\n        description: 'Default balanced resources',\n        resources: { metal: 10000, energy: 10000 }\n      },\n      {\n        name: 'Abundant',\n        description: 'Increased starting resources',\n        resources: { metal: 20000, energy: 20000 }\n      },\n      {\n        name: 'Unlimited',\n        description: 'Very high starting resources for testing',\n        resources: { metal: 100000, energy: 100000 }\n      }\n    ];\n  }\n\n  /**\n   * Loads settings from localStorage\n   */\n  private loadSettings(): GameSettings {\n    try {\n      const stored = localStorage.getItem(GameConfigManager.SETTINGS_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return { ...this.getDefaultSettings(), ...parsed };\n      }\n    } catch (error) {\n      console.warn('Failed to load settings from localStorage:', error);\n    }\n    return this.getDefaultSettings();\n  }\n\n  /**\n   * Saves settings to localStorage\n   */\n  private saveSettings(): void {\n    try {\n      localStorage.setItem(GameConfigManager.SETTINGS_KEY, JSON.stringify(this.currentSettings));\n    } catch (error) {\n      console.warn('Failed to save settings to localStorage:', error);\n    }\n  }\n\n  /**\n   * Loads configuration from localStorage\n   */\n  private loadConfig(): WebGameConfig {\n    try {\n      const stored = localStorage.getItem(GameConfigManager.CONFIG_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        return { ...this.getDefaultConfig(), ...parsed };\n      }\n    } catch (error) {\n      console.warn('Failed to load config from localStorage:', error);\n    }\n    return this.getDefaultConfig();\n  }\n\n  /**\n   * Saves configuration to localStorage\n   */\n  private saveConfig(): void {\n    try {\n      localStorage.setItem(GameConfigManager.CONFIG_KEY, JSON.stringify(this.currentConfig));\n    } catch (error) {\n      console.warn('Failed to save config to localStorage:', error);\n    }\n  }\n\n  /**\n   * Gets default settings\n   */\n  private getDefaultSettings(): GameSettings {\n    return {\n      theme: 'dark',\n      showAnimations: true,\n      autoSave: true,\n      showDebugInfo: false,\n      soundEnabled: true,\n      volume: 0.7\n    };\n  }\n\n  /**\n   * Gets default configuration\n   */\n  private getDefaultConfig(): WebGameConfig {\n    return {\n      aiArchetype: 'hybrid',\n      startingResources: { metal: 10000, energy: 10000 },\n      webConfig: {\n        containerId: 'burn-rate-game',\n        theme: 'dark',\n        showAnimations: true,\n        autoSave: true,\n        showDebugInfo: false\n      }\n    };\n  }\n}","/**\n * Main entry point for the web version of Burn Rate\n * This file initializes the web interface and starts the game\n */\n\n// Import styles\nimport './styles/main.css';\n\n// Import game components\nimport { GameInitializer, GameInitializationConfig } from '../GameInitializer.js';\nimport { WebInterface, WebConfig } from './WebInterface.js';\nimport { WebDisplay } from './WebDisplay.js';\nimport { GameStateManager } from './GameStateManager.js';\nimport { GameConfigManager } from './GameConfigManager.js';\n\n// Global game instance\nlet webInterface: WebInterface | null = null;\nlet webDisplay: WebDisplay | null = null;\nlet gameStateManager: GameStateManager | null = null;\nlet gameConfigManager: GameConfigManager | null = null;\n\nconsole.log('Burn Rate Web Version - Loading...');\n\n// Main initialization\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('DOM loaded, initializing web interface...');\n    \n    try {\n        // Initialize managers\n        gameStateManager = new GameStateManager();\n        gameConfigManager = new GameConfigManager();\n        \n        // Initialize web display\n        webDisplay = new WebDisplay({\n            containerId: 'burn-rate-game',\n            showAnimations: true,\n            theme: 'dark'\n        });\n        \n        // Hide loading overlay\n        const loadingOverlay = document.getElementById('loading-overlay');\n        if (loadingOverlay) {\n            loadingOverlay.style.display = 'none';\n        }\n        \n        // Set up basic UI functionality\n        setupTabNavigation();\n        setupModalHandlers();\n        \n        // Set up game initialization\n        await setupGameInitialization();\n        \n        console.log('Web interface initialized successfully');\n        \n    } catch (error) {\n        console.error('Failed to initialize web interface:', error);\n        showError('Failed to initialize game. Please refresh the page.');\n    }\n});\n\n/**\n * Sets up game initialization and starts the game\n */\nasync function setupGameInitialization(): Promise<void> {\n    try {\n        // Check for saved game state\n        const hasSavedGame = gameStateManager?.hasValidSavedState() || false;\n        \n        if (hasSavedGame) {\n            // Show option to continue or start new game\n            showGameStartOptions();\n        } else {\n            // Start new game with default configuration\n            await startNewGame();\n        }\n        \n    } catch (error) {\n        console.error('Game initialization failed:', error);\n        throw error;\n    }\n}\n\n/**\n * Shows game start options (new game or continue)\n */\nfunction showGameStartOptions(): void {\n    const content = `\n        <div class=\"game-start-options\">\n            <h4>Welcome to Burn Rate</h4>\n            <p>A saved game was found. What would you like to do?</p>\n            <div class=\"button-group\">\n                <button id=\"continue-game-btn\" class=\"primary-button\">Continue Game</button>\n                <button id=\"new-game-btn\" class=\"secondary-button\">New Game</button>\n            </div>\n        </div>\n    `;\n    \n    showModal('Game Start', content);\n    \n    // Set up button handlers\n    const continueBtn = document.getElementById('continue-game-btn');\n    const newGameBtn = document.getElementById('new-game-btn');\n    \n    if (continueBtn) {\n        continueBtn.addEventListener('click', async () => {\n            hideModal();\n            await continueGame();\n        });\n    }\n    \n    if (newGameBtn) {\n        newGameBtn.addEventListener('click', async () => {\n            hideModal();\n            await startNewGame();\n        });\n    }\n}\n\n/**\n * Starts a new game with configuration options\n */\nasync function startNewGame(): Promise<void> {\n    try {\n        // Get game configuration from config manager\n        const gameConfig = gameConfigManager?.getConfig() || { webConfig: {} } as any;\n        \n        // Initialize game using GameInitializer\n        const initResult = await GameInitializer.initializeGame(gameConfig);\n        \n        if (!initResult.isValid) {\n            throw new Error(`Game initialization failed: ${initResult.errors.join(', ')}`);\n        }\n        \n        // Create web interface configuration\n        const webConfig: WebConfig = {\n            containerId: 'burn-rate-game',\n            showDebugInfo: gameConfig.webConfig?.showDebugInfo || false,\n            autoSave: true,\n            theme: 'dark'\n        };\n        \n        // Create and start web interface\n        webInterface = new WebInterface(initResult.gameEngine, webConfig);\n        await webInterface.start();\n        \n        // Set up game event listeners\n        setupGameEventListeners();\n        \n        // Initial display update\n        webInterface.updateDisplay();\n        \n        // Show game started message\n        showSuccess('New game started! Good luck, Commander.');\n        \n        console.log('New game started successfully');\n        \n    } catch (error) {\n        console.error('Failed to start new game:', error);\n        showError(`Failed to start new game: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n\n/**\n * Continues a saved game\n */\nasync function continueGame(): Promise<void> {\n    try {\n        // Load saved game state\n        const savedState = gameStateManager?.loadGameState();\n        if (!savedState) {\n            throw new Error('No valid saved game found');\n        }\n        \n        // For now, we'll start a new game since we don't have state restoration yet\n        // TODO: Implement proper game state restoration\n        await startNewGame();\n        \n        showSuccess('Game continued from saved state.');\n        \n    } catch (error) {\n        console.error('Failed to continue game:', error);\n        showError(`Failed to continue game: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        \n        // Fallback to new game\n        await startNewGame();\n    }\n}\n\n/**\n * Sets up game event listeners for the web interface\n */\nfunction setupGameEventListeners(): void {\n    const container = document.getElementById('burn-rate-game');\n    if (!container || !webInterface || !webDisplay) return;\n    \n    // Listen for game state updates\n    container.addEventListener('gameStateUpdate', (event: any) => {\n        const { gameState } = event.detail;\n        webDisplay?.displayGameState(gameState);\n    });\n    \n    // Listen for action results\n    container.addEventListener('actionResult', (event: any) => {\n        const result = event.detail;\n        if (result.success) {\n            showSuccess(result.message);\n        } else {\n            showError(result.message);\n        }\n    });\n    \n    // Listen for display errors\n    container.addEventListener('displayError', (event: any) => {\n        const { message } = event.detail;\n        showError(message);\n    });\n    \n    // Listen for game over events\n    container.addEventListener('gameOver', (event: any) => {\n        const { winner, victoryType } = event.detail;\n        handleGameOver(winner, victoryType);\n    });\n    \n    // Listen for debug updates\n    container.addEventListener('debugUpdate', (event: any) => {\n        const debugInfo = event.detail;\n        updateDebugDisplay(debugInfo);\n    });\n    \n    // Set up form submission handlers\n    setupFormHandlers();\n    \n    // Set up keyboard shortcuts\n    setupKeyboardShortcuts();\n}\n\n/**\n * Sets up form submission handlers\n */\nfunction setupFormHandlers(): void {\n    const container = document.getElementById('burn-rate-game');\n    if (!container) return;\n    \n    // Handle all form submissions within the game container\n    container.addEventListener('submit', async (event) => {\n        event.preventDefault();\n        \n        if (!webInterface) return;\n        \n        const form = event.target as HTMLFormElement;\n        const formData = new FormData(form);\n        const actionType = form.dataset.actionType;\n        \n        if (!actionType) return;\n        \n        const action = {\n            type: actionType as any,\n            data: Object.fromEntries(formData.entries()),\n            timestamp: Date.now()\n        };\n        \n        try {\n            const result = await webInterface.handleUserAction(action);\n            // Result is handled by event listeners\n        } catch (error) {\n            console.error('Form submission error:', error);\n            showError('Action failed. Please try again.');\n        }\n    });\n}\n\n/**\n * Sets up keyboard shortcuts\n */\nfunction setupKeyboardShortcuts(): void {\n    document.addEventListener('keydown', async (event) => {\n        // Only handle shortcuts when not typing in input fields\n        if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n            return;\n        }\n        \n        if (!webInterface) return;\n        \n        switch (event.key) {\n            case 'Enter':\n                if (event.ctrlKey) {\n                    // Ctrl+Enter: End turn\n                    event.preventDefault();\n                    await webInterface.handleUserAction({\n                        type: 'endTurn',\n                        timestamp: Date.now()\n                    });\n                }\n                break;\n            \n            case 'h':\n                // H: Show help\n                event.preventDefault();\n                showModal('Help', getHelpContent());\n                break;\n            \n            case 's':\n                if (event.ctrlKey) {\n                    // Ctrl+S: Save game\n                    event.preventDefault();\n                    saveGame();\n                } else {\n                    // S: Show status\n                    event.preventDefault();\n                    await webInterface.handleUserAction({\n                        type: 'status',\n                        timestamp: Date.now()\n                    });\n                }\n                break;\n            \n            case 'n':\n                if (event.ctrlKey) {\n                    // Ctrl+N: New game\n                    event.preventDefault();\n                    if (confirm('Start a new game? Current progress will be lost.')) {\n                        await startNewGame();\n                    }\n                }\n                break;\n        }\n    });\n}\n\n/**\n * Handles game over state\n */\nfunction handleGameOver(winner: string, victoryType: string): void {\n    const message = winner === 'player' ? \n        `Congratulations! You achieved ${victoryType} victory!` :\n        `Game Over. The AI achieved ${victoryType} victory.`;\n    \n    const content = `\n        <div class=\"game-over\">\n            <h4>Game Over</h4>\n            <p>${message}</p>\n            <div class=\"button-group\">\n                <button id=\"new-game-over-btn\" class=\"primary-button\">New Game</button>\n                <button id=\"view-stats-btn\" class=\"secondary-button\">View Statistics</button>\n            </div>\n        </div>\n    `;\n    \n    showModal('Game Over', content);\n    \n    // Set up button handlers\n    const newGameBtn = document.getElementById('new-game-over-btn');\n    const statsBtn = document.getElementById('view-stats-btn');\n    \n    if (newGameBtn) {\n        newGameBtn.addEventListener('click', async () => {\n            hideModal();\n            await startNewGame();\n        });\n    }\n    \n    if (statsBtn) {\n        statsBtn.addEventListener('click', () => {\n            showGameStatistics();\n        });\n    }\n}\n\n/**\n * Shows game statistics\n */\nfunction showGameStatistics(): void {\n    if (!webInterface) return;\n    \n    const gameEngine = webInterface.getGameEngine();\n    const stats = gameEngine.getGameStatistics();\n    \n    const content = `\n        <div class=\"game-statistics\">\n            <h4>Game Statistics</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <label>Final Turn:</label>\n                    <span>${stats.turn}</span>\n                </div>\n                <div class=\"stat-item\">\n                    <label>Game Phase:</label>\n                    <span>${stats.gamePhase}</span>\n                </div>\n                <div class=\"stat-item\">\n                    <label>Combat Events:</label>\n                    <span>${stats.combatEvents}</span>\n                </div>\n                <div class=\"stat-item\">\n                    <label>Your Fleet Size:</label>\n                    <span>${stats.playerStats.totalFleetSize}</span>\n                </div>\n                <div class=\"stat-item\">\n                    <label>AI Fleet Size:</label>\n                    <span>${stats.aiStats.totalFleetSize}</span>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    showModal('Game Statistics', content);\n}\n\n/**\n * Saves the current game\n */\nfunction saveGame(): void {\n    if (!webInterface || !gameStateManager) return;\n    \n    try {\n        const gameState = webInterface.getGameEngine().getGameState();\n        gameStateManager.saveGameState(gameState);\n        showSuccess('Game saved successfully.');\n    } catch (error) {\n        console.error('Failed to save game:', error);\n        showError('Failed to save game.');\n    }\n}\n\n/**\n * Updates debug display\n */\nfunction updateDebugDisplay(debugInfo: any): void {\n    const debugPanel = document.getElementById('debug-panel');\n    if (!debugPanel) return;\n    \n    debugPanel.innerHTML = `\n        <h4>Debug Information</h4>\n        <div class=\"debug-info\">\n            <div>Turn: ${debugInfo.turn}</div>\n            <div>Phase: ${debugInfo.gamePhase}</div>\n            <div>Game Over: ${debugInfo.isGameOver}</div>\n            <div>Pending Actions: ${debugInfo.pendingActions}</div>\n        </div>\n    `;\n}\n\n/**\n * Set up tab navigation for command panels\n */\nfunction setupTabNavigation(): void {\n    const tabButtons = document.querySelectorAll('.tab-button');\n    const commandPanels = document.querySelectorAll('.command-panel');\n    \n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const targetTab = button.getAttribute('data-tab');\n            \n            // Remove active class from all tabs and panels\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            commandPanels.forEach(panel => panel.classList.remove('active'));\n            \n            // Add active class to clicked tab and corresponding panel\n            button.classList.add('active');\n            const targetPanel = document.getElementById(`${targetTab}-panel`);\n            if (targetPanel) {\n                targetPanel.classList.add('active');\n            }\n        });\n    });\n}\n\n/**\n * Set up modal handlers\n */\nfunction setupModalHandlers(): void {\n    const modalOverlay = document.getElementById('modal-overlay');\n    const modalClose = document.getElementById('modal-close');\n    const helpBtn = document.getElementById('help-btn');\n    const settingsBtn = document.getElementById('settings-btn');\n    \n    // Close modal handlers\n    if (modalClose && modalOverlay) {\n        modalClose.addEventListener('click', () => {\n            modalOverlay.classList.add('hidden');\n        });\n        \n        modalOverlay.addEventListener('click', (e) => {\n            if (e.target === modalOverlay) {\n                modalOverlay.classList.add('hidden');\n            }\n        });\n    }\n    \n    // Help button handler\n    if (helpBtn) {\n        helpBtn.addEventListener('click', () => {\n            showModal('Help', getHelpContent());\n        });\n    }\n    \n    // Settings button handler\n    if (settingsBtn) {\n        settingsBtn.addEventListener('click', () => {\n            showModal('Settings', getSettingsContent());\n        });\n    }\n}\n\n/**\n * Hide modal\n */\nfunction hideModal(): void {\n    const modalOverlay = document.getElementById('modal-overlay');\n    if (modalOverlay) {\n        modalOverlay.classList.add('hidden');\n    }\n}\n\n/**\n * Show success message\n */\nfunction showSuccess(message: string): void {\n    // For now, use console.log - this should be replaced with proper UI notification\n    console.log('SUCCESS:', message);\n    // TODO: Implement proper success notification UI\n}\n\n/**\n * Show error message\n */\nfunction showError(message: string): void {\n    // For now, use console.error - this should be replaced with proper UI notification\n    console.error('ERROR:', message);\n    // TODO: Implement proper error notification UI\n}\n\n/**\n * Show modal with title and content\n */\nfunction showModal(title: string, content: string): void {\n    const modalOverlay = document.getElementById('modal-overlay');\n    const modalTitle = document.getElementById('modal-title');\n    const modalBody = document.getElementById('modal-body');\n    \n    if (modalOverlay && modalTitle && modalBody) {\n        modalTitle.textContent = title;\n        modalBody.innerHTML = content;\n        modalOverlay.classList.remove('hidden');\n    }\n}\n\n/**\n * Get help content\n */\nfunction getHelpContent(): string {\n    return `\n        <h4>Game Commands</h4>\n        <p><strong>Build:</strong> Construct units and structures to strengthen your forces.</p>\n        <p><strong>Attack:</strong> Launch attacks against enemy positions.</p>\n        <p><strong>Scan:</strong> Gather intelligence about enemy activities.</p>\n        <p><strong>End Turn:</strong> Complete your turn and let the AI take its actions.</p>\n        \n        <h4>Resources</h4>\n        <p>Manage your resources carefully to maintain your military operations.</p>\n        \n        <h4>Victory Conditions</h4>\n        <p>Defeat all enemy forces or achieve strategic objectives to win.</p>\n    `;\n}\n\n/**\n * Get settings content\n */\nfunction getSettingsContent(): string {\n    return `\n        <h4>Game Settings</h4>\n        <p>Settings panel will be implemented in future tasks.</p>\n        <p>Available options will include:</p>\n        <ul>\n            <li>AI Difficulty</li>\n            <li>Game Speed</li>\n            <li>Visual Theme</li>\n            <li>Sound Effects</li>\n        </ul>\n    `;\n}"],"names":["GameInitializer","initializeGame","config","errors","seed","validationResult","this","validateConfiguration","isValid","push","gameEngineConfig","aiArchetype","selectRandomAIArchetype","startingResources","metal","energy","gameEngine","GameEngine","gameStateValidation","validateGameState","cliConfig","showDebugInfo","autoAdvanceTurn","cliInterface","CLIInterface","finalValidation","validateGameSetup","length","error","Error","message","fallbackEngine","validArchetypes","includes","join","Number","isInteger","gameState","getGameState","turn","player","resources","ai","isGameOver","archetypes","Math","floor","random","createQuickStartGame","createDebugGame","performSystemCheck","checks","engine","name","passed","validation","turnResult","processTurn","success","result","isHealthy","every","check","_WebErrorHandler","constructor","__publicField","enableLogging","enableUserNotifications","enableRecoveryActions","maxLogEntries","containerId","container","document","getElementById","setupGlobalErrorHandling","createNotificationContainer","getInstance","instance","handleDOMError","elementSelector","context","handler","webError","type","severity","originalError","timestamp","Date","now","userAgent","navigator","url","window","location","href","stackTrace","stack","logError","recoveryActions","label","action","retryDOMOperation","description","refreshInterface","displayUserFriendlyError","handleStorageError","operation","storageAvailable","checkStorageAvailability","clearCorruptedStorage","disableAutoSave","handleGameStateError","sanitizeGameStateForLogging","hasBackup","hasGameStateBackup","restoreGameStateBackup","startNewGame","handleCompatibilityError","feature","browserInfo","getBrowserInfo","supportedFeatures","checkFeatureSupport","enableCompatibilityMode","dismissError","title","errorModal","createErrorModal","body","appendChild","setTimeout","parentNode","remove","errorLog","slice","localStorage","setItem","JSON","stringify","e","addEventListener","event","filename","lineno","colno","reason","String","promiseRejection","notificationContainer","createElement","id","className","style","cssText","modal","modalContent","actionsHtml","map","index","innerHTML","target","classList","contains","actionIndex","parseInt","dataset","Promise","resolve","catch","console","reload","test","removeItem","clear","getItem","confirm","language","platform","cookieEnabled","onLine","Storage","sessionStorage","webGL","WebGLRenderingContext","canvas","getContext","webWorkers","Worker","fetch","add","gamePhase","playerResourcesCount","Object","keys","aiResourcesCount","getErrorStatistics","stats","totalErrors","errorsByType","errorsBySeverity","recentErrors","forEach","clearErrorLog","WebErrorHandler","HelpSystem","Map","enableTooltips","enableTutorial","showHelpButton","tutorialAutoStart","initialize","createHelpButton","createHelpModal","setupTooltips","setupKeyboardShortcuts","isFirstVisit","startTutorial","helpButton","setAttribute","showHelpModal","existingHelpBtn","querySelector","replaceWith","helpModal","display","getTutorialContent","getGameplayContent","getInterfaceContent","getStrategyContent","setupHelpModalEvents","closeBtn","closeFooterBtn","hideHelpModal","querySelectorAll","btn","category","switchHelpCategory","tutorialBtn","key","isHelpModalOpen","firstFocusable","focus","overflow","toggle","getAttribute","section","element","content","position","createTooltip","targetElement","tooltip","zIndex","tooltips","set","showTooltip","rect","getBoundingClientRect","tooltipRect","left","width","top","height","bottom","right","hideTooltip","trigger","isTutorialActive","currentTutorial","getTutorialSteps","currentTutorialStep","createTutorialOverlay","showTutorialStep","tutorialOverlay","skipBtn","prevBtn","nextBtn","endTutorial","previousTutorialStep","nextTutorialStep","step","counter","textContent","disabled","highlightElement","positionTutorialPopup","selector","el","popup","transform","markTutorialCompleted","HTMLInputElement","HTMLTextAreaElement","toLowerCase","preventDefault","cleanup","WebInterface","gameController","GameController","start","isRunning","setupEventListeners","initializeHelpSystem","updateDisplay","stop","removeEventListeners","helpSystem","handleUserAction","gameStateChanged","command","convertActionToCommand","executeCommand","CustomEvent","detail","dispatchEvent","updateDebugInfo","getGameEngine","getGameController","getConfig","updateConfig","newConfig","theme","applyTheme","isInterfaceRunning","handleFormSubmit","bind","handleButtonClick","handleKeydown","handleVisibilityChange","removeEventListener","form","formData","FormData","actionType","data","fromEntries","entries","displayActionResult","button","ctrlKey","hidden","autoSave","saveGameState","buildType","quantity","attackFleet","frigates","cruisers","battleships","scanType","handleGameOver","displayError","winner","getWinner","victoryType","getVictoryType","debugInfo","playerResources","aiResources","pendingActions","getPendingActions","loadGameState","clearSavedState","getHelpSystem","WebDisplay","debounce","displayGameState","updateThrottleMs","setupUpdateHandling","processUpdateQueue","updateQueue","isUpdating","animationFrameId","performance","lastUpdateTime","requestAnimationFrame","updates","update","startUpdateLoop","queueUpdate","updateFn","updateChangedElements","lastGameState","lastState","updateTurnInfo","hasResourcesChanged","updateResourceDisplayWithAnimation","hasFleetChanged","fleet","updateFleetDisplayWithAnimation","hasHomeFleetChanged","homeSystem","updateAttackPanelFleetCounts","updateGameStatusIndicators","oldResources","newResources","metalIncome","energyIncome","oldFleet","newFleet","inTransit","outbound","oldHome","newHome","resourcesDisplay","newContent","formatNumber","formatIncome","showAnimations","updateWithFadeTransition","fleetDisplay","homeFleet","totalHome","renderInTransitFleets","renderConstructionQueue","economy","constructionQueue","renderIntelligenceInfo","intelligence","updateWithSlideTransition","displayCombatResults","events","processCombatEvents","combatEventsContainer","displaySingleCombatEvent","limitLogSize","eventElement","createCombatEventElement","scrollIntoView","behavior","block","showMessage","displaySuccess","initializeCommandInterface","initializeCommandTabs","populateCommandPanels","updateResourceDisplay","handleConcurrentStateChange","debouncedDisplayGameState","func","wait","timeout","args","clearTimeout","apply","handleUserInteractionFeedback","showInteractionFeedback","feedbackElement","actionButton","batchDOMUpdates","fragment","createDocumentFragment","tempDiv","firstChild","cloneNode","cancelAnimationFrame","updateElementText","toString","toUpperCase","phaseIndicator","updateFleetDisplay","lastScanTurn","turnsAgo","max","knownFleet","knownEnemyFleet","totalKnown","toggleClass","showGameOverMessage","tabButtons","tabId","tab","switchTab","buildPanel","createBuildPanelContent","attachBuildPanelListeners","attackPanel","createAttackPanelContent","attachAttackPanelListeners","scanPanel","createScanPanelContent","attachScanPanelListeners","panel","updateBuildCost","updateAttackTotal","frigatesAvailable","cruisersAvailable","battleshipsAvailable","updateScanCost","text","condition","systemLog","messageElement","toLocaleTimeString","icon","htmlButton","panels","get","costs","getBuildCosts","totalMetal","totalEnergy","costDisplay","total","totalDisplay","cost","basic","deep","advanced","frigate","cruiser","battleship","reactor","mine","num","toLocaleString","income","attackerName","attacker","defenderName","formatFleetComposition","attackerFleet","defenderFleet","outcome","formatBattleOutcome","getTotalShips","casualties","defender","maxItems","items","children","removeChild","movement","composition","missionType","arrivalTurn","order","progress","getConstructionProgress","unitType","remaining","turnsRemaining","GameStateManager","storageKey","enableCompression","maxStoredStates","saveData","version","serializedData","compressData","manageStoredStates","errorMessage","storedData","decompressData","parse","hasValidSavedState","i","getSavedStateInfo","hasSavedState","lastSaved","handlePageRefresh","createBackup","backupKey","backupData","isBackup","cleanupOldBackups","validateStorageAvailability","testKey","testData","retrieved","testLargeData","repeat","newSaveData","currentKey","nextKey","existingData","backupKeys","startsWith","sort","a","b","timestampA","split","pop","replace","match","char","compressedData","count","_GameConfigManager","currentSettings","loadSettings","currentConfig","loadConfig","getSettings","updateSettings","newSettings","saveSettings","webConfig","saveConfig","createGameConfig","options","debugMode","getAIArchetypes","value","getGamePresets","validateConfig","resetToDefaults","getDefaultSettings","getDefaultConfig","exportConfig","settings","exportDate","toISOString","importConfig","jsonData","generateRandomSeed","getResourcePresets","stored","SETTINGS_KEY","parsed","CONFIG_KEY","soundEnabled","volume","GameConfigManager","webInterface","webDisplay","gameStateManager","gameConfigManager","async","gameConfig","initResult","showSuccess","showError","showModal","newGameBtn","statsBtn","hideModal","getGameStatistics","combatEvents","playerStats","totalFleetSize","aiStats","showGameStatistics","debugPanel","updateDebugDisplay","setupFormHandlers","getHelpContent","saveGame","setupGameEventListeners","modalOverlay","modalTitle","modalBody","loadingOverlay","commandPanels","targetTab","targetPanel","setupTabNavigation","modalClose","helpBtn","settingsBtn","setupModalHandlers","continueBtn","savedState","continueGame","showGameStartOptions","setupGameInitialization"],"mappings":"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"}