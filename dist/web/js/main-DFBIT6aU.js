var e=Object.defineProperty,t=(t,n,a)=>((t,n,a)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a)(t,"symbol"!=typeof n?n+"":n,a);import{G as n}from"./engine-BWJrWsiH.js";import{C as a,G as s}from"./ui-CW801Oi8.js";import{o as i}from"./models-D6RH2t8d.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class r{static async initializeGame(e={}){const t=[];try{e.seed;const s=this.validateConfiguration(e);s.isValid||t.push(...s.errors);const i={aiArchetype:e.aiArchetype||this.selectRandomAIArchetype(),startingResources:e.startingResources||{metal:1e4,energy:1e4}},r=new n(i),o=r.validateGameState();o.isValid||t.push(...o.errors);const l={showDebugInfo:e.cliConfig?.showDebugInfo||!1,autoAdvanceTurn:e.cliConfig?.autoAdvanceTurn||!1},c=new a(r,l),u=this.validateGameSetup(r,c);return u.isValid||t.push(...u.errors),{gameEngine:r,cliInterface:c,isValid:0===t.length,errors:t}}catch(s){t.push(`Game initialization failed: ${s instanceof Error?s.message:"Unknown error"}`);const e=new n;return{gameEngine:e,cliInterface:new a(e),isValid:!1,errors:t}}}static validateConfiguration(e){const t=[];if(e.aiArchetype){const n=["aggressor","economist","trickster","hybrid"];n.includes(e.aiArchetype)||t.push(`Invalid AI archetype: ${e.aiArchetype}. Valid options: ${n.join(", ")}`)}return e.startingResources&&((e.startingResources.metal<0||e.startingResources.energy<0)&&t.push("Starting resources cannot be negative"),(e.startingResources.metal>1e6||e.startingResources.energy>1e6)&&t.push("Starting resources are unreasonably high (max: 1,000,000)")),void 0!==e.seed&&(!Number.isInteger(e.seed)||e.seed<0)&&t.push("Seed must be a non-negative integer"),{isValid:0===t.length,errors:t}}static validateGameSetup(e,t){const n=[];try{if(!e)return n.push("Game engine is null or undefined"),{isValid:!1,errors:n};if(!t)return n.push("CLI interface is null or undefined"),{isValid:!1,errors:n};const a=e.getGameState();if(!a)return n.push("Game state is null or undefined"),{isValid:!1,errors:n};a.turn<1&&n.push("Invalid turn number"),a.player?(a.player.resources.metal<0||a.player.resources.energy<0)&&n.push("Player has negative resources"):n.push("Player state is missing"),a.ai?(a.ai.resources.metal<0||a.ai.resources.energy<0)&&n.push("AI has negative resources"):n.push("AI state is missing"),e.isGameOver()&&n.push("Game is already over at initialization")}catch(a){n.push(`Game setup validation failed: ${a instanceof Error?a.message:"Unknown error"}`)}return{isValid:0===n.length,errors:n}}static selectRandomAIArchetype(){const e=["aggressor","economist","trickster","hybrid"];return e[Math.floor(Math.random()*e.length)]}static async createQuickStartGame(){return this.initializeGame({aiArchetype:this.selectRandomAIArchetype(),startingResources:{metal:1e4,energy:1e4},cliConfig:{showDebugInfo:!1,autoAdvanceTurn:!1}})}static async createDebugGame(){return this.initializeGame({aiArchetype:"hybrid",startingResources:{metal:5e4,energy:5e4},cliConfig:{showDebugInfo:!0,autoAdvanceTurn:!1}})}static async performSystemCheck(){const e=[];try{const a=new n;e.push({name:"Game Engine Creation",passed:!0});const s=a.validateGameState();e.push({name:"Initial Game State Validation",passed:s.isValid,error:s.errors.join(", ")||void 0});try{const t=a.processTurn([]);e.push({name:"Turn Processing",passed:t.success,error:t.errors.join(", ")||void 0})}catch(t){e.push({name:"Turn Processing",passed:!1,error:t instanceof Error?t.message:"Unknown error"})}}catch(t){e.push({name:"Game Engine Creation",passed:!1,error:t instanceof Error?t.message:"Unknown error"})}try{const t=new n;new a(t);e.push({name:"CLI Interface Creation",passed:!0})}catch(t){e.push({name:"CLI Interface Creation",passed:!1,error:t instanceof Error?t.message:"Unknown error"})}try{const t=await this.initializeGame();e.push({name:"Full Game Initialization",passed:t.isValid,error:t.errors.join(", ")||void 0})}catch(t){e.push({name:"Full Game Initialization",passed:!1,error:t instanceof Error?t.message:"Unknown error"})}return{isHealthy:e.every(e=>e.passed),checks:e}}}const o=class e{constructor(e={}){t(this,"config"),t(this,"errorLog",[]),t(this,"container",null),t(this,"notificationContainer",null),this.config={enableLogging:!0,enableUserNotifications:!0,enableRecoveryActions:!0,maxLogEntries:100,...e},this.config.containerId&&(this.container=document.getElementById(this.config.containerId)),this.setupGlobalErrorHandling(),this.createNotificationContainer()}static getInstance(t){return e.instance||(e.instance=new e(t)),e.instance}static handleDOMError(t,n,a){const s=e.getInstance(),i={type:"DOM_ERROR",severity:"medium",message:`DOM operation failed for element '${n}': ${t.message}`,originalError:t,context:{elementSelector:n,...a},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,stackTrace:t.stack};s.logError(i);const r=[{label:"Retry Operation",action:()=>s.retryDOMOperation(n,a),description:"Attempt the DOM operation again"},{label:"Refresh Interface",action:()=>s.refreshInterface(),description:"Reload the game interface"}];s.displayUserFriendlyError("Interface Update Failed","There was a problem updating the game display. You can try refreshing the interface.",r)}static handleStorageError(t,n){const a=e.getInstance(),s={type:"STORAGE_ERROR",severity:"high",message:`Storage operation failed${n?` (${n})`:""}: ${t.message}`,originalError:t,context:{operation:n,storageAvailable:a.checkStorageAvailability()},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,stackTrace:t.stack};a.logError(s);const i=[];a.checkStorageAvailability()&&i.push({label:"Clear Storage",action:()=>a.clearCorruptedStorage(),description:"Clear corrupted storage data and continue without save"}),i.push({label:"Continue Without Save",action:()=>a.disableAutoSave(),description:"Continue playing without automatic save functionality"}),a.displayUserFriendlyError("Save System Error","There was a problem with the game save system. Your progress may not be saved automatically.",i)}static handleGameStateError(t,n){const a=e.getInstance(),s={type:"GAME_STATE_ERROR",severity:"critical",message:`Game state error: ${t.message}`,originalError:t,context:{gameState:n?a.sanitizeGameStateForLogging(n):null,hasBackup:a.hasGameStateBackup()},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,stackTrace:t.stack};a.logError(s);const i=[];a.hasGameStateBackup()&&i.push({label:"Restore Backup",action:()=>a.restoreGameStateBackup(),description:"Restore from the most recent backup"}),i.push({label:"Start New Game",action:()=>a.startNewGame(),description:"Start a fresh game (current progress will be lost)"}),a.displayUserFriendlyError("Game State Corrupted","The game state has become corrupted. You can try restoring from a backup or starting a new game.",i)}static handleCompatibilityError(t,n){const a=e.getInstance(),s={type:"BROWSER_COMPATIBILITY",severity:"high",message:`Browser compatibility issue with feature '${t}'${n?`: ${n.message}`:""}`,originalError:n,context:{feature:t,browserInfo:a.getBrowserInfo(),supportedFeatures:a.checkFeatureSupport()},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,stackTrace:n?.stack};a.logError(s);const i=[{label:"Enable Compatibility Mode",action:()=>a.enableCompatibilityMode(),description:"Use simplified interface for better compatibility"},{label:"Continue Anyway",action:()=>a.dismissError(),description:"Continue with reduced functionality"}];a.displayUserFriendlyError("Browser Compatibility Issue",`Your browser may not fully support the feature '${t}'. You can enable compatibility mode for better experience.`,i)}displayUserFriendlyError(e,t,n=[]){if(!this.config.enableUserNotifications)return;const a=this.createErrorModal(e,t,n);document.body.appendChild(a),setTimeout(()=>{a.parentNode&&a.remove()},3e4)}logError(e){if(this.config.enableLogging){this.errorLog.push(e),this.errorLog.length>(this.config.maxLogEntries||100)&&(this.errorLog=this.errorLog.slice(-50));try{localStorage.setItem("burn-rate-error-log",JSON.stringify(this.errorLog.slice(-10)))}catch(t){}}}setupGlobalErrorHandling(){window.addEventListener("error",e=>{const t={type:"DOM_ERROR",severity:"high",message:`Unhandled error: ${e.message}`,originalError:e.error,context:{filename:e.filename,lineno:e.lineno,colno:e.colno},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,stackTrace:e.error?.stack};this.logError(t)}),window.addEventListener("unhandledrejection",e=>{const t={type:"GAME_STATE_ERROR",severity:"high",message:`Unhandled promise rejection: ${e.reason}`,originalError:e.reason instanceof Error?e.reason:new Error(String(e.reason)),context:{promiseRejection:!0},timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href};this.logError(t)})}createNotificationContainer(){this.config.enableUserNotifications&&(this.notificationContainer=document.createElement("div"),this.notificationContainer.id="web-error-notifications",this.notificationContainer.className="error-notifications-container",this.notificationContainer.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 10000;\n      max-width: 400px;\n      pointer-events: none;\n    ",document.body.appendChild(this.notificationContainer))}createErrorModal(e,t,n){const a=document.createElement("div");a.className="error-modal-overlay",a.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.7);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 10001;\n      pointer-events: auto;\n    ";const s=document.createElement("div");s.className="error-modal-content",s.style.cssText="\n      background: #fff;\n      border-radius: 8px;\n      padding: 24px;\n      max-width: 500px;\n      margin: 20px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n    ";const i=n.length>0?`\n      <div class="error-actions" style="margin-top: 20px; display: flex; gap: 10px; flex-wrap: wrap;">\n        ${n.map((e,t)=>`\n          <button \n            class="recovery-action-btn" \n            data-action-index="${t}"\n            style="\n              padding: 8px 16px;\n              border: 1px solid #ddd;\n              border-radius: 4px;\n              background: #f5f5f5;\n              cursor: pointer;\n              font-size: 14px;\n            "\n            title="${e.description||""}"\n          >\n            ${e.label}\n          </button>\n        `).join("")}\n        <button \n          class="dismiss-error-btn"\n          style="\n            padding: 8px 16px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            background: #e9e9e9;\n            cursor: pointer;\n            font-size: 14px;\n            margin-left: auto;\n          "\n        >\n          Dismiss\n        </button>\n      </div>\n    `:'\n      <div class="error-actions" style="margin-top: 20px; text-align: right;">\n        <button \n          class="dismiss-error-btn"\n          style="\n            padding: 8px 16px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            background: #e9e9e9;\n            cursor: pointer;\n            font-size: 14px;\n          "\n        >\n          OK\n        </button>\n      </div>\n    ';return s.innerHTML=`\n      <div class="error-header" style="display: flex; align-items: center; margin-bottom: 16px;">\n        <span style="font-size: 24px; margin-right: 12px;">⚠️</span>\n        <h3 style="margin: 0; color: #d32f2f;">${e}</h3>\n      </div>\n      <div class="error-message" style="margin-bottom: 16px; line-height: 1.5;">\n        ${t}\n      </div>\n      ${i}\n    `,s.addEventListener("click",e=>{const t=e.target;if(t.classList.contains("recovery-action-btn")){const e=parseInt(t.dataset.actionIndex||"0"),s=n[e];s&&(Promise.resolve(s.action()).catch(console.error),a.remove())}else t.classList.contains("dismiss-error-btn")&&a.remove()}),a.appendChild(s),a}retryDOMOperation(e,t){}refreshInterface(){window.location.reload()}checkStorageAvailability(){try{const e="test";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(e){return!1}}clearCorruptedStorage(){try{localStorage.clear()}catch(e){}}disableAutoSave(){}hasGameStateBackup(){try{return null!==localStorage.getItem("burn-rate-game-state-backup")}catch(e){return!1}}restoreGameStateBackup(){}startNewGame(){confirm("Are you sure you want to start a new game? Current progress will be lost.")&&window.location.reload()}getBrowserInfo(){return{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine}}checkFeatureSupport(){return{localStorage:"undefined"!=typeof Storage,sessionStorage:"undefined"!=typeof sessionStorage,webGL:!!window.WebGLRenderingContext,canvas:!!document.createElement("canvas").getContext,webWorkers:"undefined"!=typeof Worker,fetch:"undefined"!=typeof fetch}}enableCompatibilityMode(){document.body.classList.add("compatibility-mode")}dismissError(){}sanitizeGameStateForLogging(e){return{turn:e.turn,gamePhase:e.gamePhase,isGameOver:e.isGameOver,playerResourcesCount:Object.keys(e.player.resources).length,aiResourcesCount:Object.keys(e.ai.resources).length}}getErrorStatistics(){const e={totalErrors:this.errorLog.length,errorsByType:{},errorsBySeverity:{},recentErrors:this.errorLog.slice(-5)};return this.errorLog.forEach(t=>{e.errorsByType[t.type]=(e.errorsByType[t.type]||0)+1,e.errorsBySeverity[t.severity]=(e.errorsBySeverity[t.severity]||0)+1}),e}clearErrorLog(){this.errorLog=[];try{localStorage.removeItem("burn-rate-error-log")}catch(e){}}};t(o,"instance",null);let l=o;class c{constructor(e){t(this,"config"),t(this,"container",null),t(this,"helpModal",null),t(this,"tooltips",new Map),t(this,"currentTutorial",[]),t(this,"currentTutorialStep",0),t(this,"tutorialOverlay",null),t(this,"isHelpModalOpen",!1),t(this,"isTutorialActive",!1),this.config={enableTooltips:!0,enableTutorial:!0,showHelpButton:!0,tutorialAutoStart:!1,...e},this.container=document.getElementById(e.containerId),this.container&&this.initialize()}initialize(){this.createHelpButton(),this.createHelpModal(),this.setupTooltips(),this.setupKeyboardShortcuts(),this.config.tutorialAutoStart&&this.isFirstVisit()&&setTimeout(()=>this.startTutorial(),1e3)}createHelpButton(){if(!this.config.showHelpButton||!this.container)return;const e=document.createElement("button");e.id="help-button",e.className="help-button",e.innerHTML="❓",e.title="Help & Tutorial (Press H)",e.setAttribute("aria-label","Open help system"),e.addEventListener("click",()=>this.showHelpModal());const t=this.container.querySelector("#help-btn");t?t.replaceWith(e):this.container.appendChild(e)}createHelpModal(){this.container&&(this.helpModal=document.createElement("div"),this.helpModal.id="help-modal",this.helpModal.className="help-modal-overlay",this.helpModal.style.display="none",this.helpModal.innerHTML=`\n      <div class="help-modal-content">\n        <div class="help-modal-header">\n          <h2>Burn Rate - Help & Guide</h2>\n          <button class="help-modal-close" aria-label="Close help">&times;</button>\n        </div>\n        <div class="help-modal-body">\n          <div class="help-navigation">\n            <button class="help-nav-btn active" data-category="tutorial">Tutorial</button>\n            <button class="help-nav-btn" data-category="gameplay">Gameplay</button>\n            <button class="help-nav-btn" data-category="interface">Interface</button>\n            <button class="help-nav-btn" data-category="strategy">Strategy</button>\n          </div>\n          <div class="help-content-area">\n            <div id="help-content-tutorial" class="help-content-section active">\n              ${this.getTutorialContent()}\n            </div>\n            <div id="help-content-gameplay" class="help-content-section">\n              ${this.getGameplayContent()}\n            </div>\n            <div id="help-content-interface" class="help-content-section">\n              ${this.getInterfaceContent()}\n            </div>\n            <div id="help-content-strategy" class="help-content-section">\n              ${this.getStrategyContent()}\n            </div>\n          </div>\n        </div>\n        <div class="help-modal-footer">\n          <button class="help-start-tutorial-btn">Start Interactive Tutorial</button>\n          <button class="help-close-btn">Close</button>\n        </div>\n      </div>\n    `,this.setupHelpModalEvents(),document.body.appendChild(this.helpModal))}setupHelpModalEvents(){if(!this.helpModal)return;const e=this.helpModal.querySelector(".help-modal-close"),t=this.helpModal.querySelector(".help-close-btn");e?.addEventListener("click",()=>this.hideHelpModal()),t?.addEventListener("click",()=>this.hideHelpModal());this.helpModal.querySelectorAll(".help-nav-btn").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.category;t&&this.switchHelpCategory(t)})});const n=this.helpModal.querySelector(".help-start-tutorial-btn");n?.addEventListener("click",()=>{this.hideHelpModal(),this.startTutorial()}),this.helpModal.addEventListener("click",e=>{e.target===this.helpModal&&this.hideHelpModal()}),document.addEventListener("keydown",e=>{"Escape"===e.key&&this.isHelpModalOpen&&this.hideHelpModal()})}showHelpModal(){if(!this.helpModal)return;this.helpModal.style.display="flex",this.isHelpModalOpen=!0;const e=this.helpModal.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');e&&e.focus(),document.body.style.overflow="hidden"}hideHelpModal(){this.helpModal&&(this.helpModal.style.display="none",this.isHelpModalOpen=!1,document.body.style.overflow="")}switchHelpCategory(e){if(!this.helpModal)return;this.helpModal.querySelectorAll(".help-nav-btn").forEach(t=>{t.classList.toggle("active",t.getAttribute("data-category")===e)});this.helpModal.querySelectorAll(".help-content-section").forEach(t=>{t.classList.toggle("active",t.id===`help-content-${e}`)})}setupTooltips(){if(!this.config.enableTooltips)return;[{element:"#build-panel",content:"Build units and structures to expand your fleet and economy. Each unit type has different strengths and costs.",position:"top"},{element:"#attack-panel",content:"Launch attacks against enemy systems. Consider unit composition - Frigates beat Cruisers, Cruisers beat Battleships, Battleships beat Frigates.",position:"top"},{element:"#scan-panel",content:"Gather intelligence about enemy forces and economy. Higher-tier scans provide more accurate information.",position:"top"},{element:"#end-turn-btn",content:"End your turn to process all actions and advance to the next turn. Use Ctrl+Enter as a shortcut.",position:"top"},{element:"#resources-display",content:"Your current resources and income. Metal and Energy are needed for construction. Watch for resource shortages!",position:"bottom"},{element:"#fleet-display",content:"Your current fleet composition and construction queue. Plan your fleet balance carefully.",position:"bottom"}].forEach(e=>this.createTooltip(e))}createTooltip(e){const t=document.querySelector(e.element);if(!t)return;const n=document.createElement("div");n.className="help-tooltip",n.innerHTML=e.content,n.style.position="absolute",n.style.display="none",n.style.zIndex="10000",document.body.appendChild(n),this.tooltips.set(e.element,n);const a=()=>{const a=t.getBoundingClientRect(),s=n.getBoundingClientRect();switch(e.position||"top"){case"top":n.style.left=a.left+a.width/2-s.width/2+"px",n.style.top=a.top-s.height-8+"px";break;case"bottom":n.style.left=a.left+a.width/2-s.width/2+"px",n.style.top=`${a.bottom+8}px`;break;case"left":n.style.left=a.left-s.width-8+"px",n.style.top=a.top+a.height/2-s.height/2+"px";break;case"right":n.style.left=`${a.right+8}px`,n.style.top=a.top+a.height/2-s.height/2+"px"}n.style.display="block"},s=()=>{n.style.display="none"},i=e.trigger||"hover";"hover"===i?(t.addEventListener("mouseenter",a),t.addEventListener("mouseleave",s)):"click"===i&&(t.addEventListener("click",a),document.addEventListener("click",e=>{t.contains(e.target)||n.contains(e.target)||s()}))}startTutorial(){this.config.enableTutorial&&!this.isTutorialActive&&(this.currentTutorial=this.getTutorialSteps(),this.currentTutorialStep=0,this.isTutorialActive=!0,this.createTutorialOverlay(),this.showTutorialStep())}createTutorialOverlay(){this.tutorialOverlay=document.createElement("div"),this.tutorialOverlay.id="tutorial-overlay",this.tutorialOverlay.className="tutorial-overlay",this.tutorialOverlay.innerHTML='\n      <div class="tutorial-backdrop"></div>\n      <div class="tutorial-popup">\n        <div class="tutorial-header">\n          <h3 class="tutorial-title"></h3>\n          <button class="tutorial-close" aria-label="Close tutorial">&times;</button>\n        </div>\n        <div class="tutorial-content"></div>\n        <div class="tutorial-footer">\n          <div class="tutorial-progress">\n            <span class="tutorial-step-counter"></span>\n          </div>\n          <div class="tutorial-actions">\n            <button class="tutorial-prev-btn">Previous</button>\n            <button class="tutorial-next-btn">Next</button>\n            <button class="tutorial-skip-btn">Skip Tutorial</button>\n          </div>\n        </div>\n      </div>\n    ';const e=this.tutorialOverlay.querySelector(".tutorial-close"),t=this.tutorialOverlay.querySelector(".tutorial-skip-btn"),n=this.tutorialOverlay.querySelector(".tutorial-prev-btn"),a=this.tutorialOverlay.querySelector(".tutorial-next-btn");e?.addEventListener("click",()=>this.endTutorial()),t?.addEventListener("click",()=>this.endTutorial()),n?.addEventListener("click",()=>this.previousTutorialStep()),a?.addEventListener("click",()=>this.nextTutorialStep()),document.body.appendChild(this.tutorialOverlay)}showTutorialStep(){if(!this.tutorialOverlay||!this.currentTutorial.length)return;const e=this.currentTutorial[this.currentTutorialStep];if(!e)return;const t=this.tutorialOverlay.querySelector(".tutorial-title"),n=this.tutorialOverlay.querySelector(".tutorial-content"),a=this.tutorialOverlay.querySelector(".tutorial-step-counter"),s=this.tutorialOverlay.querySelector(".tutorial-prev-btn"),i=this.tutorialOverlay.querySelector(".tutorial-next-btn");t&&(t.textContent=e.title),n&&(n.innerHTML=e.content),a&&(a.textContent=`Step ${this.currentTutorialStep+1} of ${this.currentTutorial.length}`),s&&(s.disabled=0===this.currentTutorialStep),i&&(i.textContent=this.currentTutorialStep===this.currentTutorial.length-1?"Finish":"Next"),e.target&&this.highlightElement(e.target),this.positionTutorialPopup(e)}highlightElement(e){document.querySelectorAll(".tutorial-highlight").forEach(e=>{e.classList.remove("tutorial-highlight")});const t=document.querySelector(e);t&&t.classList.add("tutorial-highlight")}positionTutorialPopup(e){if(!this.tutorialOverlay)return;const t=this.tutorialOverlay.querySelector(".tutorial-popup");if(t)if(e.target){const n=document.querySelector(e.target);if(n){const a=n.getBoundingClientRect();switch(e.position||"bottom"){case"top":t.style.left=`${a.left+a.width/2}px`,t.style.top=a.top-20+"px",t.style.transform="translate(-50%, -100%)";break;case"bottom":t.style.left=`${a.left+a.width/2}px`,t.style.top=`${a.bottom+20}px`,t.style.transform="translate(-50%, 0)";break;case"left":t.style.left=a.left-20+"px",t.style.top=`${a.top+a.height/2}px`,t.style.transform="translate(-100%, -50%)";break;case"right":t.style.left=`${a.right+20}px`,t.style.top=`${a.top+a.height/2}px`,t.style.transform="translate(0, -50%)"}}}else t.style.left="50%",t.style.top="50%",t.style.transform="translate(-50%, -50%)"}nextTutorialStep(){this.currentTutorialStep<this.currentTutorial.length-1?(this.currentTutorialStep++,this.showTutorialStep()):this.endTutorial()}previousTutorialStep(){this.currentTutorialStep>0&&(this.currentTutorialStep--,this.showTutorialStep())}endTutorial(){this.tutorialOverlay&&(this.tutorialOverlay.remove(),this.tutorialOverlay=null),document.querySelectorAll(".tutorial-highlight").forEach(e=>{e.classList.remove("tutorial-highlight")}),this.isTutorialActive=!1,this.markTutorialCompleted()}setupKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(!(e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement))switch(e.key.toLowerCase()){case"h":this.isTutorialActive||(e.preventDefault(),this.showHelpModal());break;case"f1":e.preventDefault(),this.showHelpModal()}})}isFirstVisit(){try{return!localStorage.getItem("burn-rate-tutorial-completed")}catch(e){return!0}}markTutorialCompleted(){try{localStorage.setItem("burn-rate-tutorial-completed","true")}catch(e){}}getTutorialContent(){return'\n      <div class="help-section">\n        <h3>Welcome to Burn Rate!</h3>\n        <p>Burn Rate is a fast-paced strategy game where you build fleets, manage resources, and compete against AI opponents to achieve victory.</p>\n        \n        <h4>Quick Start</h4>\n        <ol>\n          <li><strong>Build Units:</strong> Use the Build tab to construct ships and structures</li>\n          <li><strong>Manage Resources:</strong> Watch your Metal and Energy levels</li>\n          <li><strong>Attack:</strong> Use the Attack tab to launch fleets against enemies</li>\n          <li><strong>Gather Intel:</strong> Use the Scan tab to learn about enemy forces</li>\n          <li><strong>End Turn:</strong> Click "End Turn" or press Ctrl+Enter to advance</li>\n        </ol>\n\n        <h4>Victory Conditions</h4>\n        <ul>\n          <li><strong>Military Victory:</strong> Destroy all enemy fleets and structures</li>\n          <li><strong>Economic Victory:</strong> Achieve massive resource production</li>\n          <li><strong>Time Victory:</strong> Have the strongest position when time runs out</li>\n        </ul>\n\n        <div class="help-tip">\n          💡 <strong>Tip:</strong> Start the interactive tutorial below to learn the game step-by-step!\n        </div>\n      </div>\n    '}getGameplayContent(){return'\n      <div class="help-section">\n        <h3>Core Gameplay</h3>\n        \n        <h4>Unit Types</h4>\n        <div class="unit-guide">\n          <div class="unit-item">\n            <strong>🚀 Frigate</strong> (4 Metal, 2 Energy)\n            <p>Fast, cheap units effective against Cruisers. Good for early game and swarm tactics.</p>\n          </div>\n          <div class="unit-item">\n            <strong>🛸 Cruiser</strong> (10 Metal, 6 Energy)\n            <p>Balanced units effective against Battleships. The backbone of most fleets.</p>\n          </div>\n          <div class="unit-item">\n            <strong>🚁 Battleship</strong> (20 Metal, 12 Energy)\n            <p>Heavy units effective against Frigates. Expensive but powerful.</p>\n          </div>\n        </div>\n\n        <h4>Rock-Paper-Scissors Combat</h4>\n        <div class="combat-guide">\n          <p><strong>Frigates</strong> beat <strong>Cruisers</strong></p>\n          <p><strong>Cruisers</strong> beat <strong>Battleships</strong></p>\n          <p><strong>Battleships</strong> beat <strong>Frigates</strong></p>\n        </div>\n\n        <h4>Structures</h4>\n        <div class="structure-guide">\n          <div class="structure-item">\n            <strong>⚡ Reactor</strong> (900 Metal, 1200 Energy)\n            <p>Provides +500 Energy per turn. Essential for large fleets.</p>\n          </div>\n          <div class="structure-item">\n            <strong>⛏️ Mine</strong> (1500 Metal, 600 Energy)\n            <p>Provides +500 Metal per turn. Needed for construction.</p>\n          </div>\n        </div>\n\n        <h4>Intelligence</h4>\n        <p>Use scans to gather information about enemy forces:</p>\n        <ul>\n          <li><strong>Basic Scan:</strong> Total fleet count (±30% accuracy)</li>\n          <li><strong>Deep Scan:</strong> Unit composition + economy (±10% accuracy)</li>\n          <li><strong>Advanced Scan:</strong> Strategic analysis and predictions</li>\n        </ul>\n      </div>\n    '}getInterfaceContent(){return'\n      <div class="help-section">\n        <h3>Interface Guide</h3>\n        \n        <h4>Main Panels</h4>\n        <ul>\n          <li><strong>Resources Panel:</strong> Shows current Metal, Energy, and income rates</li>\n          <li><strong>Fleet Panel:</strong> Displays your ships, construction queue, and intelligence</li>\n          <li><strong>Command Tabs:</strong> Switch between Build, Attack, and Scan actions</li>\n        </ul>\n\n        <h4>Keyboard Shortcuts</h4>\n        <div class="shortcuts-guide">\n          <div class="shortcut-item">\n            <kbd>H</kbd> or <kbd>F1</kbd> - Open this help system\n          </div>\n          <div class="shortcut-item">\n            <kbd>Ctrl</kbd> + <kbd>Enter</kbd> - End turn\n          </div>\n          <div class="shortcut-item">\n            <kbd>S</kbd> - Show game status\n          </div>\n          <div class="shortcut-item">\n            <kbd>Esc</kbd> - Close modals and dialogs\n          </div>\n        </div>\n\n        <h4>Visual Indicators</h4>\n        <ul>\n          <li><strong>Red text/borders:</strong> Low resources or warnings</li>\n          <li><strong>Green highlights:</strong> Successful actions</li>\n          <li><strong>Yellow highlights:</strong> Important information</li>\n          <li><strong>Pulsing elements:</strong> Require attention</li>\n        </ul>\n\n        <h4>Responsive Design</h4>\n        <p>The interface adapts to different screen sizes. On smaller screens, some panels may collapse or stack vertically for better usability.</p>\n      </div>\n    '}getStrategyContent(){return'\n      <div class="help-section">\n        <h3>Strategy Guide</h3>\n        \n        <h4>Early Game (Turns 1-10)</h4>\n        <ul>\n          <li>Focus on economic growth - build Reactors and Mines</li>\n          <li>Construct a small defensive fleet</li>\n          <li>Use Basic Scans to assess enemy strength</li>\n          <li>Avoid large attacks until you have economic advantage</li>\n        </ul>\n\n        <h4>Mid Game (Turns 11-25)</h4>\n        <ul>\n          <li>Expand your fleet with balanced unit composition</li>\n          <li>Launch probing attacks to test enemy defenses</li>\n          <li>Use Deep Scans for detailed intelligence</li>\n          <li>Consider specializing in one unit type for mass production</li>\n        </ul>\n\n        <h4>Late Game (Turns 26+)</h4>\n        <ul>\n          <li>Launch decisive attacks with overwhelming force</li>\n          <li>Use Advanced Scans to predict enemy moves</li>\n          <li>Focus on victory conditions - military or economic</li>\n          <li>Don\'t let the AI catch up economically</li>\n        </ul>\n\n        <h4>AI Archetypes</h4>\n        <div class="ai-guide">\n          <div class="ai-item">\n            <strong>Aggressor:</strong> Attacks early and often. Build defenses quickly.\n          </div>\n          <div class="ai-item">\n            <strong>Economist:</strong> Focuses on resource growth. Don\'t let them get ahead economically.\n          </div>\n          <div class="ai-item">\n            <strong>Trickster:</strong> Unpredictable strategy. Use frequent scans to track their plans.\n          </div>\n          <div class="ai-item">\n            <strong>Hybrid:</strong> Balanced approach. Adapt your strategy based on their actions.\n          </div>\n        </div>\n\n        <h4>Pro Tips</h4>\n        <div class="pro-tips">\n          <div class="tip-item">\n            💡 Always maintain positive resource income\n          </div>\n          <div class="tip-item">\n            💡 Counter the enemy\'s main unit type with its weakness\n          </div>\n          <div class="tip-item">\n            💡 Time your attacks when enemy fleets are away\n          </div>\n          <div class="tip-item">\n            💡 Economic victory is often easier than military victory\n          </div>\n        </div>\n      </div>\n    '}getTutorialSteps(){return[{id:"welcome",title:"Welcome to Burn Rate!",content:"\n          <p>Welcome to Burn Rate, a fast-paced strategy game!</p>\n          <p>In this tutorial, you'll learn the basics of building fleets, managing resources, and achieving victory.</p>\n          <p>Let's start by exploring the interface.</p>\n        "},{id:"resources",title:"Resources Overview",content:"\n          <p>This panel shows your current resources:</p>\n          <ul>\n            <li><strong>Metal:</strong> Used for construction</li>\n            <li><strong>Energy:</strong> Powers your operations</li>\n            <li><strong>Income:</strong> Resources gained per turn</li>\n          </ul>\n          <p>Keep an eye on these numbers - you need positive income to grow!</p>\n        ",target:"#resources-display",position:"bottom"},{id:"fleet",title:"Fleet Information",content:"\n          <p>This panel shows your fleet status:</p>\n          <ul>\n            <li><strong>Home Fleet:</strong> Ships defending your base</li>\n            <li><strong>In Transit:</strong> Fleets traveling to/from combat</li>\n            <li><strong>Construction Queue:</strong> Units being built</li>\n          </ul>\n          <p>You start with a small defensive fleet.</p>\n        ",target:"#fleet-display",position:"bottom"},{id:"build-tab",title:"Building Units",content:"\n          <p>Click the Build tab to construct new units and structures.</p>\n          <p>You can build:</p>\n          <ul>\n            <li><strong>Ships:</strong> Frigates, Cruisers, Battleships</li>\n            <li><strong>Structures:</strong> Reactors (energy), Mines (metal)</li>\n          </ul>\n          <p>Try building a Frigate - it's cheap and effective!</p>\n        ",target:'[data-tab="build"]',position:"bottom"},{id:"attack-tab",title:"Launching Attacks",content:"\n          <p>The Attack tab lets you send fleets to attack enemies.</p>\n          <p>Remember the combat triangle:</p>\n          <ul>\n            <li>Frigates beat Cruisers</li>\n            <li>Cruisers beat Battleships</li>\n            <li>Battleships beat Frigates</li>\n          </ul>\n          <p>Don't attack yet - build up your forces first!</p>\n        ",target:'[data-tab="attack"]',position:"bottom"},{id:"scan-tab",title:"Gathering Intelligence",content:"\n          <p>The Scan tab helps you spy on enemy forces.</p>\n          <p>Different scan types provide different information:</p>\n          <ul>\n            <li><strong>Basic:</strong> Fleet size (rough estimate)</li>\n            <li><strong>Deep:</strong> Unit composition and economy</li>\n            <li><strong>Advanced:</strong> Strategic analysis</li>\n          </ul>\n          <p>Intelligence is crucial for planning attacks!</p>\n        ",target:'[data-tab="scan"]',position:"bottom"},{id:"end-turn",title:"Ending Your Turn",content:"\n          <p>When you're done with your actions, click \"End Turn\" to advance the game.</p>\n          <p>You can also use the keyboard shortcut <kbd>Ctrl+Enter</kbd>.</p>\n          <p>The AI will then take its turn, and you'll see the results.</p>\n        ",target:"#end-turn-btn",position:"top"},{id:"strategy",title:"Basic Strategy",content:"\n          <p>Here's a simple strategy to get started:</p>\n          <ol>\n            <li>Build economic structures (Reactors, Mines)</li>\n            <li>Construct a balanced fleet</li>\n            <li>Use scans to assess enemy strength</li>\n            <li>Attack when you have an advantage</li>\n          </ol>\n          <p>Remember: economic growth often leads to military victory!</p>\n        "},{id:"complete",title:"Tutorial Complete!",content:"\n          <p>Congratulations! You've completed the tutorial.</p>\n          <p>You now know the basics of Burn Rate. Here are some final tips:</p>\n          <ul>\n            <li>Press <kbd>H</kbd> anytime to open the help system</li>\n            <li>Experiment with different strategies</li>\n            <li>Watch your resource income carefully</li>\n            <li>Have fun and good luck!</li>\n          </ul>\n        "}]}cleanup(){this.tooltips.forEach(e=>e.remove()),this.tooltips.clear(),this.helpModal&&(this.helpModal.remove(),this.helpModal=null),this.tutorialOverlay&&(this.tutorialOverlay.remove(),this.tutorialOverlay=null),document.querySelectorAll(".tutorial-highlight").forEach(e=>{e.classList.remove("tutorial-highlight")}),document.body.style.overflow=""}}class u{constructor(e,n){t(this,"gameEngine"),t(this,"gameController"),t(this,"config"),t(this,"isRunning",!1),t(this,"container",null),t(this,"helpSystem",null),this.gameEngine=e,this.gameController=new s(e),this.config=n,l.getInstance({containerId:n.containerId,enableLogging:n.showDebugInfo||!1,enableUserNotifications:!0})}async start(){try{if(this.container=document.getElementById(this.config.containerId),!this.container){const e=new Error(`Container element with id '${this.config.containerId}' not found`);throw l.handleDOMError(e,`#${this.config.containerId}`,{operation:"initialization"}),e}this.isRunning=!0,this.setupEventListeners(),this.initializeHelpSystem(),this.updateDisplay()}catch(e){throw e instanceof Error&&l.handleDOMError(e,`#${this.config.containerId}`,{operation:"start"}),e}}stop(){this.isRunning=!1,this.removeEventListeners(),this.helpSystem&&(this.helpSystem.cleanup(),this.helpSystem=null)}async handleUserAction(e){if(!this.isRunning)return{success:!1,message:"Interface is not running",gameStateChanged:!1};try{const t=this.convertActionToCommand(e);if(!t)return{success:!1,message:"Invalid action type",gameStateChanged:!1};const n=this.gameController.executeCommand(t);return n.success&&"end_turn"===t.type&&await this.processTurn(),n.gameStateChanged&&this.updateDisplay(),n}catch(t){return t instanceof Error&&l.handleGameStateError(t,this.gameEngine.getGameState()),{success:!1,message:`Action failed: ${t instanceof Error?t.message:"Unknown error"}`,gameStateChanged:!1}}}updateDisplay(){if(this.container&&this.isRunning)try{const e=this.gameEngine.getGameState(),t=new CustomEvent("gameStateUpdate",{detail:{gameState:e}});this.container.dispatchEvent(t),this.config.showDebugInfo&&this.updateDebugInfo(e)}catch(e){e instanceof Error&&l.handleDOMError(e,`#${this.config.containerId}`,{operation:"updateDisplay"})}}getGameEngine(){return this.gameEngine}getGameController(){return this.gameController}getConfig(){return{...this.config}}updateConfig(e){this.config={...this.config,...e},e.theme&&this.applyTheme(e.theme)}isInterfaceRunning(){return this.isRunning}setupEventListeners(){this.container&&(this.container.addEventListener("submit",this.handleFormSubmit.bind(this)),this.container.addEventListener("click",this.handleButtonClick.bind(this)),document.addEventListener("keydown",this.handleKeydown.bind(this)),document.addEventListener("visibilitychange",this.handleVisibilityChange.bind(this)))}removeEventListeners(){this.container&&(this.container.removeEventListener("submit",this.handleFormSubmit.bind(this)),this.container.removeEventListener("click",this.handleButtonClick.bind(this)),document.removeEventListener("keydown",this.handleKeydown.bind(this)),document.removeEventListener("visibilitychange",this.handleVisibilityChange.bind(this)))}async handleFormSubmit(e){e.preventDefault();const t=e.target,n=new FormData(t),a=t.dataset.actionType;if(!a)return;const s={type:a,data:Object.fromEntries(n.entries()),timestamp:Date.now()},i=await this.handleUserAction(s);this.displayActionResult(i)}async handleButtonClick(e){const t=e.target,n=t.dataset.action;if(!n)return;const a={type:n,data:t.dataset,timestamp:Date.now()},s=await this.handleUserAction(a);this.displayActionResult(s)}async handleKeydown(e){if(!(e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement))switch(e.key){case"Enter":e.ctrlKey&&(e.preventDefault(),await this.handleUserAction({type:"endTurn",timestamp:Date.now()}));break;case"h":e.preventDefault(),await this.handleUserAction({type:"help",timestamp:Date.now()});break;case"s":e.preventDefault(),await this.handleUserAction({type:"status",timestamp:Date.now()})}}handleVisibilityChange(){document.hidden?this.config.autoSave&&this.saveGameState():this.updateDisplay()}convertActionToCommand(e){switch(e.type){case"build":return{type:"build",buildType:e.data?.buildType,quantity:parseInt(e.data?.quantity)||1};case"attack":return{type:"attack",attackFleet:{frigates:parseInt(e.data?.frigates)||0,cruisers:parseInt(e.data?.cruisers)||0,battleships:parseInt(e.data?.battleships)||0},target:e.data?.target||"enemy"};case"scan":return{type:"scan",scanType:e.data?.scanType};case"endTurn":return{type:"end_turn"};case"status":return{type:"status"};case"help":return this.helpSystem&&this.helpSystem.showHelpModal(),null;default:return null}}async processTurn(){try{this.updateDisplay(),this.config.autoSave&&this.saveGameState(),this.gameEngine.isGameOver()&&this.handleGameOver()}catch(e){e instanceof Error&&l.handleGameStateError(e,this.gameEngine.getGameState()),this.displayError(`Turn processing failed: ${e instanceof Error?e.message:"Unknown error"}`)}}handleGameOver(){const e=this.gameEngine.getWinner(),t=this.gameEngine.getVictoryType(),n=new CustomEvent("gameOver",{detail:{winner:e,victoryType:t}});this.container?.dispatchEvent(n)}displayActionResult(e){const t=new CustomEvent("actionResult",{detail:e});this.container?.dispatchEvent(t)}displayError(e){const t=new CustomEvent("displayError",{detail:{message:e}});this.container?.dispatchEvent(t)}updateDebugInfo(e){if(!this.config.showDebugInfo)return;const t={turn:e.turn,gamePhase:e.gamePhase,isGameOver:e.isGameOver,playerResources:e.player.resources,aiResources:e.ai.resources,pendingActions:this.gameController.getPendingActions().length},n=new CustomEvent("debugUpdate",{detail:t});this.container?.dispatchEvent(n)}applyTheme(e){this.container&&(this.container.classList.remove("theme-dark","theme-light"),this.container.classList.add(`theme-${e}`))}saveGameState(){if(this.config.autoSave)try{const e=this.gameEngine.getGameState();localStorage.setItem("burnrate_gamestate",JSON.stringify(e))}catch(e){e instanceof Error&&l.handleStorageError(e,"saveGameState")}}loadGameState(){try{return!!localStorage.getItem("burnrate_gamestate")}catch(e){return e instanceof Error&&l.handleStorageError(e,"loadGameState"),!1}}clearSavedState(){try{localStorage.removeItem("burnrate_gamestate")}catch(e){e instanceof Error&&l.handleStorageError(e,"clearSavedState")}}initializeHelpSystem(){try{this.helpSystem=new c({containerId:this.config.containerId,enableTooltips:!0,enableTutorial:!0,showHelpButton:!0,tutorialAutoStart:!1})}catch(e){e instanceof Error&&l.handleDOMError(e,`#${this.config.containerId}`,{operation:"initializeHelpSystem"})}}getHelpSystem(){return this.helpSystem}}class d{constructor(e){if(t(this,"config"),t(this,"container",null),t(this,"lastGameState",null),t(this,"updateQueue",[]),t(this,"isUpdating",!1),t(this,"animationFrameId",null),t(this,"lastUpdateTime",0),t(this,"startUpdateLoop"),t(this,"debouncedDisplayGameState",this.debounce(e=>{this.displayGameState(e)},50)),this.config={updateThrottleMs:16,...e},this.container=document.getElementById(e.containerId),!this.container){const t=new Error(`Container element with id '${e.containerId}' not found`);throw l.handleDOMError(t,`#${e.containerId}`,{operation:"WebDisplay initialization"}),t}this.setupUpdateHandling()}setupUpdateHandling(){const e=()=>{if(0===this.updateQueue.length)return this.isUpdating=!1,void(this.animationFrameId=null);const t=performance.now();if(t-this.lastUpdateTime<(this.config.updateThrottleMs||16))return void(this.animationFrameId=requestAnimationFrame(e));const n=[...this.updateQueue];this.updateQueue=[],n.forEach(e=>{try{e()}catch(t){t instanceof Error&&l.handleDOMError(t,".game-display",{operation:"update queue processing"})}}),this.lastUpdateTime=t,this.updateQueue.length>0?this.animationFrameId=requestAnimationFrame(e):(this.isUpdating=!1,this.animationFrameId=null)};this.startUpdateLoop=()=>{this.isUpdating||(this.isUpdating=!0,this.animationFrameId=requestAnimationFrame(e))}}queueUpdate(e){this.updateQueue.push(e),this.startUpdateLoop()}displayGameState(e){this.container&&this.queueUpdate(()=>{try{this.updateChangedElements(e),this.lastGameState={...e}}catch(t){t instanceof Error&&l.handleDOMError(t,".game-display",{operation:"displayGameState",gameState:e}),this.displayError("Failed to update game display")}})}updateChangedElements(e){const t=this.lastGameState;this.updateTurnInfo(e),t&&!this.hasResourcesChanged(t.player.resources,e.player.resources)||this.updateResourceDisplayWithAnimation(e.player.resources),t&&!this.hasFleetChanged(t.player.fleet,e.player.fleet)||this.updateFleetDisplayWithAnimation(e.player),t&&!this.hasHomeFleetChanged(t.player.fleet.homeSystem,e.player.fleet.homeSystem)||this.updateAttackPanelFleetCounts(e.player.fleet.homeSystem),t&&t.isGameOver===e.isGameOver||this.updateGameStatusIndicators(e)}hasResourcesChanged(e,t){return e.metal!==t.metal||e.energy!==t.energy||e.metalIncome!==t.metalIncome||e.energyIncome!==t.energyIncome}hasFleetChanged(e,t){return this.hasHomeFleetChanged(e.homeSystem,t.homeSystem)||e.inTransit.outbound.length!==t.inTransit.outbound.length}hasHomeFleetChanged(e,t){return e.frigates!==t.frigates||e.cruisers!==t.cruisers||e.battleships!==t.battleships}updateResourceDisplayWithAnimation(e){const t=this.container?.querySelector("#resources-display");if(!t)return;const n=`\n      <div class="resource-item metal-display ${e.metal<1e3?"warning":""}">\n        <div class="resource-icon">⚙️</div>\n        <div class="resource-info">\n          <div class="resource-name">Metal</div>\n          <div class="resource-amount metal-amount">${this.formatNumber(e.metal)}</div>\n          <div class="resource-income metal-income ${e.metalIncome<=0?"stalled":""}">${this.formatIncome(e.metalIncome)}/turn</div>\n        </div>\n      </div>\n      <div class="resource-item energy-display ${e.energy<1e3?"warning":""}">\n        <div class="resource-icon">⚡</div>\n        <div class="resource-info">\n          <div class="resource-name">Energy</div>\n          <div class="resource-amount energy-amount">${this.formatNumber(e.energy)}</div>\n          <div class="resource-income energy-income ${e.energyIncome<=0?"stalled":""}">${this.formatIncome(e.energyIncome)}/turn</div>\n        </div>\n      </div>\n    `;this.config.showAnimations?this.updateWithFadeTransition(t,n):t.innerHTML=n}updateFleetDisplayWithAnimation(e){const t=this.container?.querySelector("#fleet-display");if(!t)return;const n=e.fleet.homeSystem,a=n.frigates+n.cruisers+n.battleships,s=`\n      <div class="fleet-summary">\n        <div class="fleet-total">\n          <strong>Home Fleet: ${this.formatNumber(a)} ships</strong>\n        </div>\n        <div class="fleet-breakdown">\n          <div class="unit-count">\n            <span class="unit-icon">🚀</span>\n            <span class="unit-name">Frigates:</span>\n            <span class="frigates-count">${this.formatNumber(n.frigates)}</span>\n          </div>\n          <div class="unit-count">\n            <span class="unit-icon">🛸</span>\n            <span class="unit-name">Cruisers:</span>\n            <span class="cruisers-count">${this.formatNumber(n.cruisers)}</span>\n          </div>\n          <div class="unit-count">\n            <span class="unit-icon">🚁</span>\n            <span class="unit-name">Battleships:</span>\n            <span class="battleships-count">${this.formatNumber(n.battleships)}</span>\n          </div>\n        </div>\n      </div>\n      <div class="fleets-in-transit">\n        <h5>Fleets in Transit</h5>\n        <div class="transit-fleets">\n          ${this.renderInTransitFleets(e.fleet.inTransit.outbound)}\n        </div>\n      </div>\n      <div class="construction-queue">\n        <h5>Construction Queue</h5>\n        ${this.renderConstructionQueue(e.economy.constructionQueue)}\n      </div>\n      <div class="intelligence-panel">\n        <h5>Intelligence</h5>\n        ${this.renderIntelligenceInfo(e.intelligence)}\n      </div>\n    `;this.config.showAnimations?this.updateWithSlideTransition(t,s):t.innerHTML=s}updateWithFadeTransition(e,t){e.classList.add("updating"),setTimeout(()=>{e.innerHTML=t,e.classList.remove("updating"),e.classList.add("updated"),setTimeout(()=>{e.classList.remove("updated")},300)},150)}updateWithSlideTransition(e,t){e.classList.add("slide-out"),setTimeout(()=>{e.innerHTML=t,e.classList.remove("slide-out"),e.classList.add("slide-in"),setTimeout(()=>{e.classList.remove("slide-in")},300)},150)}displayCombatResults(e){this.container&&0!==e.length&&this.queueUpdate(()=>{this.processCombatEvents(e)})}processCombatEvents(e){const t=this.container?.querySelector("#combat-events");t&&(e.forEach((e,n)=>{setTimeout(()=>{this.displaySingleCombatEvent(e,t)},500*n)}),setTimeout(()=>{this.limitLogSize(t,50)},500*e.length+1e3))}displaySingleCombatEvent(e,t){const n=this.createCombatEventElement(e);this.config.showAnimations?(n.classList.add("combat-event-entering"),t.appendChild(n),setTimeout(()=>{n.classList.remove("combat-event-entering"),n.classList.add("combat-event-entered")},50),setTimeout(()=>{n.scrollIntoView({behavior:"smooth",block:"nearest"})},300)):(t.appendChild(n),n.scrollIntoView({behavior:"smooth",block:"nearest"}))}displayError(e){this.showMessage(e,"error")}displaySuccess(e){this.showMessage(e,"success")}initializeCommandInterface(){this.container&&(this.initializeCommandTabs(),this.populateCommandPanels())}updateResourceDisplay(e){this.queueUpdate(()=>{this.updateResourceDisplayWithAnimation(e)})}handleConcurrentStateChange(e){this.debouncedDisplayGameState(e)}debounce(e,t){let n;return(...a)=>{clearTimeout(n),n=setTimeout(()=>e.apply(this,a),t)}}handleUserInteractionFeedback(e,t){this.queueUpdate(()=>{this.showInteractionFeedback(e,t)})}showInteractionFeedback(e,t){const n=document.createElement("div");n.className="interaction-feedback "+(t?"success":"error"),n.textContent=t?`${e} successful`:`${e} failed`;const a=this.container?.querySelector(`[data-action="${e}"]`);if(a){const e=a.getBoundingClientRect();n.style.position="fixed",n.style.left=`${e.left}px`,n.style.top=e.top-30+"px",n.style.zIndex="1000"}document.body.appendChild(n),this.config.showAnimations?(n.classList.add("feedback-entering"),setTimeout(()=>{n.classList.add("feedback-leaving"),setTimeout(()=>{n.parentNode&&n.remove()},300)},2e3)):setTimeout(()=>{n.parentNode&&n.remove()},2e3)}batchDOMUpdates(e){const t=document.createDocumentFragment();e.forEach(({element:e,content:n})=>{const a=document.createElement("div");for(a.innerHTML=n;a.firstChild;)t.appendChild(a.firstChild);e.innerHTML="",e.appendChild(t.cloneNode(!0))})}cleanup(){this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null),this.updateQueue=[],this.isUpdating=!1,this.lastGameState=null}updateTurnInfo(e){this.updateElementText(".current-turn",e.turn.toString()),this.updateElementText(".game-phase",e.gamePhase.toUpperCase());const t=this.container?.querySelector(".phase-indicator");t&&(t.className=`phase-indicator phase-${e.gamePhase}`)}updateFleetDisplay(e){const t=this.container?.querySelector("#fleet-display");if(!t)return;const n=e.fleet.homeSystem,a=n.frigates+n.cruisers+n.battleships;t.innerHTML=`\n      <div class="fleet-summary">\n        <div class="fleet-total">\n          <strong>Home Fleet: ${this.formatNumber(a)} ships</strong>\n        </div>\n        <div class="fleet-breakdown">\n          <div class="unit-count">\n            <span class="unit-icon">🚀</span>\n            <span class="unit-name">Frigates:</span>\n            <span class="frigates-count">${this.formatNumber(n.frigates)}</span>\n          </div>\n          <div class="unit-count">\n            <span class="unit-icon">🛸</span>\n            <span class="unit-name">Cruisers:</span>\n            <span class="cruisers-count">${this.formatNumber(n.cruisers)}</span>\n          </div>\n          <div class="unit-count">\n            <span class="unit-icon">🚁</span>\n            <span class="unit-name">Battleships:</span>\n            <span class="battleships-count">${this.formatNumber(n.battleships)}</span>\n          </div>\n        </div>\n      </div>\n      <div class="fleets-in-transit">\n        <h5>Fleets in Transit</h5>\n        <div class="transit-fleets">\n          ${this.renderInTransitFleets(e.fleet.inTransit.outbound)}\n        </div>\n      </div>\n      <div class="construction-queue">\n        <h5>Construction Queue</h5>\n        ${this.renderConstructionQueue(e.economy.constructionQueue)}\n      </div>\n      <div class="intelligence-panel">\n        <h5>Intelligence</h5>\n        ${this.renderIntelligenceInfo(e.intelligence)}\n      </div>\n    `}renderIntelligenceInfo(e){if(0===e.lastScanTurn)return'<div class="no-intel">No enemy scans performed</div>';const t=Math.max(0,e.lastScanTurn),n=e.knownEnemyFleet,a=n.frigates+n.cruisers+n.battleships;return`\n      <div class="intel-summary">\n        <div class="last-scan">Last scan: ${0===t?"This turn":`${t} turns ago`}</div>\n        ${a>0?`\n          <div class="known-fleet">\n            <div class="fleet-title">Known Enemy Fleet (~${this.formatNumber(a)} ships):</div>\n            <div class="fleet-breakdown">\n              <div>🚀 Frigates: ~${this.formatNumber(n.frigates)}</div>\n              <div>🛸 Cruisers: ~${this.formatNumber(n.cruisers)}</div>\n              <div>🚁 Battleships: ~${this.formatNumber(n.battleships)}</div>\n            </div>\n            ${t>2?'<div class="intel-warning">⚠️ Intelligence data may be outdated</div>':""}\n          </div>\n        `:""}\n      </div>\n    `}updateGameStatusIndicators(e){this.toggleClass(".game-container","game-over",e.isGameOver),e.isGameOver&&this.showGameOverMessage(e)}initializeCommandTabs(){const e=this.container?.querySelectorAll(".tab-button");e&&e.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.tab;t&&this.switchTab(t)})})}populateCommandPanels(){const e=this.container?.querySelector("#build-panel");e&&(e.innerHTML=this.createBuildPanelContent(),this.attachBuildPanelListeners(e));const t=this.container?.querySelector("#attack-panel");t&&(t.innerHTML=this.createAttackPanelContent(),this.attachAttackPanelListeners(t));const n=this.container?.querySelector("#scan-panel");n&&(n.innerHTML=this.createScanPanelContent(),this.attachScanPanelListeners(n))}createBuildPanelContent(){return'\n      <form data-action-type="build" class="build-form">\n        <div class="form-section">\n          <h3>Build Units</h3>\n          <div class="build-options">\n            <div class="build-option">\n              <label>\n                <input type="radio" name="buildType" value="frigate" checked>\n                <span class="build-info">\n                  <strong>Frigate</strong> (4 Metal, 2 Energy)\n                  <small>Fast, effective vs Cruisers</small>\n                </span>\n              </label>\n            </div>\n            <div class="build-option">\n              <label>\n                <input type="radio" name="buildType" value="cruiser">\n                <span class="build-info">\n                  <strong>Cruiser</strong> (10 Metal, 6 Energy)\n                  <small>Balanced, effective vs Battleships</small>\n                </span>\n              </label>\n            </div>\n            <div class="build-option">\n              <label>\n                <input type="radio" name="buildType" value="battleship">\n                <span class="build-info">\n                  <strong>Battleship</strong> (20 Metal, 12 Energy)\n                  <small>Heavy, effective vs Frigates</small>\n                </span>\n              </label>\n            </div>\n          </div>\n          <div class="quantity-input">\n            <label for="unit-quantity">Quantity:</label>\n            <input type="number" id="unit-quantity" name="quantity" value="1" min="1" max="1000">\n          </div>\n        </div>\n        \n        <div class="form-section">\n          <h3>Build Structures</h3>\n          <div class="build-options">\n            <div class="build-option">\n              <label>\n                <input type="radio" name="buildType" value="reactor">\n                <span class="build-info">\n                  <strong>Reactor</strong> (900 Metal, 1200 Energy)\n                  <small>+500 Energy/turn</small>\n                </span>\n              </label>\n            </div>\n            <div class="build-option">\n              <label>\n                <input type="radio" name="buildType" value="mine">\n                <span class="build-info">\n                  <strong>Mine</strong> (1500 Metal, 600 Energy)\n                  <small>+500 Metal/turn</small>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div class="form-actions">\n          <button type="submit" class="primary-button">Build</button>\n          <div class="cost-display">\n            <span class="total-cost">Total Cost: <span class="cost-amount">4 Metal, 2 Energy</span></span>\n          </div>\n        </div>\n      </form>\n    '}attachBuildPanelListeners(e){const t=e.querySelector("form");t&&(t.addEventListener("change",()=>this.updateBuildCost(t)),t.addEventListener("input",()=>this.updateBuildCost(t)))}createAttackPanelContent(){return'\n      <form data-action-type="attack" class="attack-form">\n        <div class="form-section">\n          <h3>Fleet Composition</h3>\n          <div class="fleet-inputs">\n            <div class="fleet-input">\n              <label for="attack-frigates">Frigates:</label>\n              <input type="number" id="attack-frigates" name="frigates" value="0" min="0">\n              <span class="available">Available: <span class="frigates-available">0</span></span>\n            </div>\n            <div class="fleet-input">\n              <label for="attack-cruisers">Cruisers:</label>\n              <input type="number" id="attack-cruisers" name="cruisers" value="0" min="0">\n              <span class="available">Available: <span class="cruisers-available">0</span></span>\n            </div>\n            <div class="fleet-input">\n              <label for="attack-battleships">Battleships:</label>\n              <input type="number" id="attack-battleships" name="battleships" value="0" min="0">\n              <span class="available">Available: <span class="battleships-available">0</span></span>\n            </div>\n          </div>\n          \n          <div class="fleet-summary">\n            <div class="total-ships">Total Ships: <span class="attack-total">0</span></div>\n            <div class="fleet-effectiveness">\n              <div class="effectiveness-tip">\n                💡 Frigates > Cruisers > Battleships > Frigates\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class="form-section">\n          <h3>Target</h3>\n          <div class="target-selection">\n            <label>\n              <input type="radio" name="target" value="enemy" checked>\n              <span>Enemy Home System</span>\n            </label>\n          </div>\n        </div>\n        \n        <div class="form-actions">\n          <button type="submit" class="primary-button danger">Launch Attack</button>\n          <div class="attack-info">\n            <small>Fleet will arrive next turn and return in 3 turns</small>\n          </div>\n        </div>\n      </form>\n    '}attachAttackPanelListeners(e){const t=e.querySelector("form");t&&t.addEventListener("input",()=>this.updateAttackTotal(t))}updateAttackPanelFleetCounts(e){if(!this.container)return;const t=this.container.querySelector("#attack-panel");if(!t)return;const n=t.querySelector(".frigates-available"),a=t.querySelector(".cruisers-available"),s=t.querySelector(".battleships-available");n&&(n.textContent=this.formatNumber(e.frigates)),a&&(a.textContent=this.formatNumber(e.cruisers)),s&&(s.textContent=this.formatNumber(e.battleships))}createScanPanelContent(){return'\n      <form data-action-type="scan" class="scan-form">\n        <div class="form-section">\n          <h3>Intelligence Scans</h3>\n          <div class="scan-options">\n            <div class="scan-option">\n              <label>\n                <input type="radio" name="scanType" value="basic" checked>\n                <span class="scan-info">\n                  <strong>Basic Scan</strong> (1,000 Energy)\n                  <small>Total enemy fleet count (±30% accuracy)</small>\n                </span>\n              </label>\n            </div>\n            <div class="scan-option">\n              <label>\n                <input type="radio" name="scanType" value="deep">\n                <span class="scan-info">\n                  <strong>Deep Scan</strong> (2,500 Energy)\n                  <small>Unit composition + economy (±10% accuracy)</small>\n                </span>\n              </label>\n            </div>\n            <div class="scan-option">\n              <label>\n                <input type="radio" name="scanType" value="advanced">\n                <span class="scan-info">\n                  <strong>Advanced Scan</strong> (4,000 Energy)\n                  <small>Strategic intent analysis</small>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div class="form-actions">\n          <button type="submit" class="primary-button">Perform Scan</button>\n          <div class="scan-cost">\n            <span class="energy-cost">Cost: <span class="cost-amount">1,000 Energy</span></span>\n          </div>\n        </div>\n      </form>\n    '}attachScanPanelListeners(e){const t=e.querySelector("form");t&&t.addEventListener("change",()=>this.updateScanCost(t))}updateElementText(e,t){const n=this.container?.querySelector(e);n&&(n.textContent=t)}toggleClass(e,t,n){const a=this.container?.querySelector(e);a&&a.classList.toggle(t,n)}showMessage(e,t="info"){const n=this.container?.querySelector("#system-log");if(!n)return;const a=document.createElement("div");a.className=`message message-${t}`;const s=(new Date).toLocaleTimeString(),i="error"===t?"❌":"success"===t?"✅":"ℹ️";a.innerHTML=`\n      <span class="message-time">${s}</span>\n      <span class="message-icon">${i}</span>\n      <span class="message-text">${e}</span>\n    `,n.appendChild(a),setTimeout(()=>{a.parentNode&&a.remove()},5e3),a.addEventListener("click",()=>{a.remove()}),a.scrollIntoView({behavior:"smooth"}),this.limitLogSize(n,20)}switchTab(e){const t=this.container?.querySelectorAll(".tab-button");t?.forEach(t=>{const n=t;n.classList.toggle("active",n.dataset.tab===e)});const n=this.container?.querySelectorAll(".command-panel");n?.forEach(t=>{t.classList.toggle("active",t.id===`${e}-panel`)})}updateBuildCost(e){const t=new FormData(e),n=t.get("buildType"),a=parseInt(t.get("quantity"))||1,s=this.getBuildCosts(n),i=s.metal*a,r=s.energy*a,o=e.querySelector(".cost-amount");o&&(o.textContent=`${this.formatNumber(i)} Metal, ${this.formatNumber(r)} Energy`)}updateAttackTotal(e){const t=new FormData(e),n=(parseInt(t.get("frigates"))||0)+(parseInt(t.get("cruisers"))||0)+(parseInt(t.get("battleships"))||0),a=e.querySelector(".attack-total");a&&(a.textContent=n.toString())}updateScanCost(e){const t={basic:1e3,deep:2500,advanced:4e3}[new FormData(e).get("scanType")]||1e3,n=e.querySelector(".cost-amount");n&&(n.textContent=`${this.formatNumber(t)} Energy`)}getBuildCosts(e){return{frigate:{metal:4,energy:2},cruiser:{metal:10,energy:6},battleship:{metal:20,energy:12},reactor:{metal:900,energy:1200},mine:{metal:1500,energy:600}}[e]||{metal:0,energy:0}}formatNumber(e){return e.toLocaleString()}formatIncome(e){return`${e>=0?"+":""}${this.formatNumber(e)}`}createCombatEventElement(e){const t=document.createElement("div");t.className="combat-event";const n="player"===e.attacker?"YOUR":"ENEMY",a="player"===e.attacker?"ENEMY":"YOUR";return t.innerHTML=`\n      <div class="combat-header">\n        <span class="combat-turn">Turn ${e.turn}</span>\n        <span class="combat-title">${n} FLEET ATTACKS ${a} SYSTEM</span>\n      </div>\n      <div class="combat-details">\n        <div class="fleet-comparison">\n          <div class="attacker-fleet">\n            <strong>Attacker:</strong> ${this.formatFleetComposition(e.attackerFleet)}\n          </div>\n          <div class="defender-fleet">\n            <strong>Defender:</strong> ${this.formatFleetComposition(e.defenderFleet)}\n          </div>\n        </div>\n        <div class="combat-outcome ${e.outcome}">\n          ${this.formatBattleOutcome(e.outcome)}\n        </div>\n        <div class="casualties">\n          <div>Casualties: ${n} lost ${this.getTotalShips(e.casualties.attacker)} ships, \n               ${a} lost ${this.getTotalShips(e.casualties.defender)} ships</div>\n        </div>\n      </div>\n    `,t}formatFleetComposition(e){return`${e.frigates+e.cruisers+e.battleships} ships (${e.frigates}F, ${e.cruisers}C, ${e.battleships}B)`}getTotalShips(e){return e.frigates+e.cruisers+e.battleships}formatBattleOutcome(e){switch(e){case"decisive_attacker":return"DECISIVE ATTACKER VICTORY";case"decisive_defender":return"DECISIVE DEFENDER VICTORY";case"close_battle":return"CLOSE BATTLE";default:return e.toUpperCase()}}limitLogSize(e,t){const n=e.children;for(;n.length>t;)e.removeChild(n[0])}renderInTransitFleets(e){return 0===e.length?'<div class="no-transit">No fleets in transit</div>':e.map((e,t)=>`\n        <div class="transit-fleet">\n          <span class="fleet-number">Fleet ${t+1}:</span>\n          <span class="fleet-size">${this.getTotalShips(e.composition)} ships</span>\n          <span class="mission-type">${e.missionType}</span>\n          <span class="arrival-info">(arrives turn ${e.arrivalTurn})</span>\n        </div>\n      `).join("")}renderConstructionQueue(e){return 0===e.length?'<div class="queue-empty">No construction in progress</div>':e.map((e,t)=>{const n=this.getConstructionProgress(e);return`\n        <div class="queue-item">\n          <div class="queue-number">${t+1}.</div>\n          <div class="queue-details">\n            <div class="queue-item-name">${e.quantity}x ${e.unitType}</div>\n            <div class="queue-progress">${n}</div>\n          </div>\n        </div>\n      `}).join("")}getConstructionProgress(e){const t=e.turnsRemaining;return 1===t?"Completes next turn":`${t} turns remaining`}showGameOverMessage(e){const t=e.winner,n=e.victoryType,a="player"===t?`🎉 VICTORY! You defeated the AI via ${n} victory!`:`💀 DEFEAT! The AI defeated you via ${n} victory!`;this.showMessage(a,"player"===t?"success":"error")}}class h{constructor(e={}){t(this,"storageKey"),t(this,"enableCompression"),t(this,"maxStoredStates"),t(this,"autoSave"),this.storageKey=e.storageKey||"burn-rate-game-state",this.enableCompression=e.enableCompression||!1,this.maxStoredStates=e.maxStoredStates||5,this.autoSave=e.autoSave||!0}saveGameState(e){try{const t=i(e);if(!t.isValid)return{success:!1,error:`Invalid game state: ${t.errors.join(", ")}`};const n={gameState:e,timestamp:Date.now(),version:"1.0.0",turn:e.turn};let a=JSON.stringify(n);return this.enableCompression&&(a=this.compressData(a)),localStorage.setItem(this.storageKey,a),this.maxStoredStates>1&&this.manageStoredStates(n),{success:!0}}catch(t){const e=`Failed to save game state: ${t instanceof Error?t.message:"Unknown error"}`;return t instanceof Error&&l.handleStorageError(t,"saveGameState"),{success:!1,error:e}}}loadGameState(){try{const e=localStorage.getItem(this.storageKey);if(!e)return{success:!1,error:"No saved game state found"};let t=e;this.enableCompression&&(t=this.decompressData(e));const n=JSON.parse(t);if(!n.gameState||!n.timestamp)return{success:!1,error:"Invalid save data format"};const a=i(n.gameState);return a.isValid?{success:!0,data:n.gameState}:{success:!1,error:`Corrupted game state: ${a.errors.join(", ")}`}}catch(e){const t=`Failed to load game state: ${e instanceof Error?e.message:"Unknown error"}`;return e instanceof Error&&l.handleStorageError(e,"loadGameState"),{success:!1,error:t}}}hasValidSavedState(){const e=this.loadGameState();return e.success&&void 0!==e.data}clearSavedState(){try{if(localStorage.removeItem(this.storageKey),this.maxStoredStates>1)for(let e=1;e<this.maxStoredStates;e++)localStorage.removeItem(`${this.storageKey}-${e}`);return{success:!0}}catch(e){const t=`Failed to clear saved state: ${e instanceof Error?e.message:"Unknown error"}`;return e instanceof Error&&l.handleStorageError(e,"clearSavedState"),{success:!1,error:t}}}getSavedStateInfo(){try{const e=localStorage.getItem(this.storageKey);if(!e)return{hasSavedState:!1};let t=e;this.enableCompression&&(t=this.decompressData(e));const n=JSON.parse(t);return{hasSavedState:!0,lastSaved:new Date(n.timestamp),turn:n.turn}}catch(e){return{hasSavedState:!1}}}handlePageRefresh(){return this.hasValidSavedState()?this.loadGameState():{success:!1,error:"No valid saved state found for recovery"}}createBackup(e){try{const t=`${this.storageKey}-backup-${Date.now()}`,n={gameState:e,timestamp:Date.now(),isBackup:!0};return localStorage.setItem(t,JSON.stringify(n)),this.cleanupOldBackups(),{success:!0}}catch(t){const e=`Failed to create backup: ${t instanceof Error?t.message:"Unknown error"}`;return t instanceof Error&&l.handleStorageError(t,"createBackup"),{success:!1,error:e}}}validateStorageAvailability(){const e=[];try{"undefined"==typeof localStorage&&e.push("localStorage is not supported in this browser");const n=`${this.storageKey}-test`,a="test-data";localStorage.setItem(n,a);const s=localStorage.getItem(n);localStorage.removeItem(n),s!==a&&e.push("localStorage read/write test failed");const i="x".repeat(1048576);try{localStorage.setItem(`${n}-large`,i),localStorage.removeItem(`${n}-large`)}catch(t){e.push("Insufficient localStorage space available")}}catch(n){e.push(`localStorage validation failed: ${n instanceof Error?n.message:"Unknown error"}`)}return{isValid:0===e.length,errors:e}}manageStoredStates(e){try{for(let e=this.maxStoredStates-1;e>0;e--){const t=1===e?this.storageKey:`${this.storageKey}-${e-1}`,n=`${this.storageKey}-${e}`,a=localStorage.getItem(t);a&&localStorage.setItem(n,a)}}catch(t){}}cleanupOldBackups(){try{const e=[];for(let t=0;t<localStorage.length;t++){const n=localStorage.key(t);n&&n.startsWith(`${this.storageKey}-backup-`)&&e.push(n)}e.sort((e,t)=>{const n=parseInt(e.split("-").pop()||"0");return parseInt(t.split("-").pop()||"0")-n});for(let t=3;t<e.length;t++)localStorage.removeItem(e[t])}catch(e){}}compressData(e){return e.replace(/(.)\1{2,}/g,(e,t)=>`${t}${e.length}${t}`)}decompressData(e){return e.replace(/(.)\d+\1/g,(e,t)=>{const n=parseInt(e.slice(1,-1));return t.repeat(n)})}}const p=class e{constructor(){t(this,"currentSettings"),t(this,"currentConfig"),this.currentSettings=this.loadSettings(),this.currentConfig=this.loadConfig()}getSettings(){return{...this.currentSettings}}updateSettings(e){this.currentSettings={...this.currentSettings,...e},this.saveSettings()}getConfig(){return{...this.currentConfig}}updateConfig(e){this.currentConfig={...this.currentConfig,...e,webConfig:{...this.currentConfig.webConfig,...e.webConfig||{}}},this.saveConfig()}createGameConfig(e){const t={aiArchetype:e.aiArchetype||"hybrid",startingResources:e.startingResources||{metal:1e4,energy:1e4},seed:e.seed,webConfig:{containerId:"burn-rate-game",theme:this.currentSettings.theme,showAnimations:this.currentSettings.showAnimations,autoSave:this.currentSettings.autoSave,showDebugInfo:e.debugMode||this.currentSettings.showDebugInfo}};return this.currentConfig=t,this.saveConfig(),t}getAIArchetypes(){return[{value:"aggressor",name:"Aggressor",description:"Focuses on military expansion and early attacks. Builds large fleets quickly and attacks frequently."},{value:"economist",name:"Economist",description:"Prioritizes economic development and infrastructure. Builds up resources before military expansion."},{value:"trickster",name:"Trickster",description:"Uses deception and unpredictable strategies. May provide false intelligence and vary tactics."},{value:"hybrid",name:"Hybrid",description:"Adapts strategy based on game conditions. Balances economic and military development dynamically."}]}getGamePresets(){return[{name:"Quick Start",description:"Standard game with balanced settings for new players",config:{aiArchetype:"hybrid",startingResources:{metal:1e4,energy:1e4},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1}}},{name:"Economic Challenge",description:"Start with limited resources against an economist AI",config:{aiArchetype:"economist",startingResources:{metal:5e3,energy:5e3},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1}}},{name:"Military Rush",description:"Face an aggressive AI with standard resources",config:{aiArchetype:"aggressor",startingResources:{metal:1e4,energy:1e4},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1}}},{name:"Unpredictable",description:"Random AI behavior with trickster archetype",config:{aiArchetype:"trickster",startingResources:{metal:1e4,energy:1e4},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1}}},{name:"Debug Mode",description:"Enhanced resources and debug information for testing",config:{aiArchetype:"hybrid",startingResources:{metal:5e4,energy:5e4},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!1,autoSave:!1,showDebugInfo:!0}}}]}validateConfig(e){const t=[];if(e.aiArchetype){["aggressor","economist","trickster","hybrid"].includes(e.aiArchetype)||t.push(`Invalid AI archetype: ${e.aiArchetype}`)}return e.startingResources&&((e.startingResources.metal<0||e.startingResources.energy<0)&&t.push("Starting resources cannot be negative"),(e.startingResources.metal>1e6||e.startingResources.energy>1e6)&&t.push("Starting resources cannot exceed 1,000,000")),void 0!==e.seed&&(!Number.isInteger(e.seed)||e.seed<0)&&t.push("Seed must be a non-negative integer"),e.webConfig&&(e.webConfig.theme&&!["dark","light"].includes(e.webConfig.theme)&&t.push('Theme must be either "dark" or "light"'),e.webConfig.containerId&&"string"!=typeof e.webConfig.containerId&&t.push("Container ID must be a string")),{isValid:0===t.length,errors:t}}resetToDefaults(){this.currentSettings=this.getDefaultSettings(),this.currentConfig=this.getDefaultConfig(),this.saveSettings(),this.saveConfig()}exportConfig(){return JSON.stringify({settings:this.currentSettings,config:this.currentConfig,exportDate:(new Date).toISOString(),version:"1.0.0"},null,2)}importConfig(e){try{const t=JSON.parse(e);if(t.settings&&(this.currentSettings={...this.getDefaultSettings(),...t.settings},this.saveSettings()),t.config){const e=this.validateConfig(t.config);if(!e.isValid)return{success:!1,error:`Invalid configuration: ${e.errors.join(", ")}`};this.currentConfig={...this.getDefaultConfig(),...t.config},this.saveConfig()}return{success:!0}}catch(t){return{success:!1,error:`Failed to import configuration: ${t instanceof Error?t.message:"Unknown error"}`}}}generateRandomSeed(){return Math.floor(1e6*Math.random())}getResourcePresets(){return[{name:"Minimal",description:"Very limited starting resources",resources:{metal:2500,energy:2500}},{name:"Limited",description:"Reduced starting resources",resources:{metal:5e3,energy:5e3}},{name:"Standard",description:"Default balanced resources",resources:{metal:1e4,energy:1e4}},{name:"Abundant",description:"Increased starting resources",resources:{metal:2e4,energy:2e4}},{name:"Unlimited",description:"Very high starting resources for testing",resources:{metal:1e5,energy:1e5}}]}loadSettings(){try{const t=localStorage.getItem(e.SETTINGS_KEY);if(t){const e=JSON.parse(t);return{...this.getDefaultSettings(),...e}}}catch(t){}return this.getDefaultSettings()}saveSettings(){try{localStorage.setItem(e.SETTINGS_KEY,JSON.stringify(this.currentSettings))}catch(t){}}loadConfig(){try{const t=localStorage.getItem(e.CONFIG_KEY);if(t){const e=JSON.parse(t);return{...this.getDefaultConfig(),...e}}}catch(t){}return this.getDefaultConfig()}saveConfig(){try{localStorage.setItem(e.CONFIG_KEY,JSON.stringify(this.currentConfig))}catch(t){}}getDefaultSettings(){return{theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1,soundEnabled:!0,volume:.7}}getDefaultConfig(){return{aiArchetype:"hybrid",startingResources:{metal:1e4,energy:1e4},webConfig:{containerId:"burn-rate-game",theme:"dark",showAnimations:!0,autoSave:!0,showDebugInfo:!1}}}};t(p,"SETTINGS_KEY","burn-rate-settings"),t(p,"CONFIG_KEY","burn-rate-config");let m=p,g=null,y=null,v=null,f=null;async function b(){try{const e=f?.getConfig()||{webConfig:{}},t=await r.initializeGame(e);if(!t.isValid)throw new Error(`Game initialization failed: ${t.errors.join(", ")}`);const n={containerId:"burn-rate-game",showDebugInfo:e.webConfig?.showDebugInfo||!1,autoSave:!0,theme:"dark"};g=new u(t.gameEngine,n),await g.start(),function(){const e=document.getElementById("burn-rate-game");if(!e||!g||!y)return;e.addEventListener("gameStateUpdate",e=>{const{gameState:t}=e.detail;y?.displayGameState(t)}),e.addEventListener("actionResult",e=>{const t=e.detail;t.success?E(t.message):w(t.message)}),e.addEventListener("displayError",e=>{const{message:t}=e.detail;w(t)}),e.addEventListener("gameOver",e=>{const{winner:t,victoryType:n}=e.detail;!function(e,t){const n="player"===e?`Congratulations! You achieved ${t} victory!`:`Game Over. The AI achieved ${t} victory.`;C("Game Over",`\n        <div class="game-over">\n            <h4>Game Over</h4>\n            <p>${n}</p>\n            <div class="button-group">\n                <button id="new-game-over-btn" class="primary-button">New Game</button>\n                <button id="view-stats-btn" class="secondary-button">View Statistics</button>\n            </div>\n        </div>\n    `);const a=document.getElementById("new-game-over-btn"),s=document.getElementById("view-stats-btn");a&&a.addEventListener("click",async()=>{S(),await b()});s&&s.addEventListener("click",()=>{!function(){if(!g)return;const e=g.getGameEngine().getGameStatistics(),t=`\n        <div class="game-statistics">\n            <h4>Game Statistics</h4>\n            <div class="stats-grid">\n                <div class="stat-item">\n                    <label>Final Turn:</label>\n                    <span>${e.turn}</span>\n                </div>\n                <div class="stat-item">\n                    <label>Game Phase:</label>\n                    <span>${e.gamePhase}</span>\n                </div>\n                <div class="stat-item">\n                    <label>Combat Events:</label>\n                    <span>${e.combatEvents}</span>\n                </div>\n                <div class="stat-item">\n                    <label>Your Fleet Size:</label>\n                    <span>${e.playerStats.totalFleetSize}</span>\n                </div>\n                <div class="stat-item">\n                    <label>AI Fleet Size:</label>\n                    <span>${e.aiStats.totalFleetSize}</span>\n                </div>\n            </div>\n        </div>\n    `;C("Game Statistics",t)}()})}(t,n)}),e.addEventListener("debugUpdate",e=>{!function(e){const t=document.getElementById("debug-panel");if(!t)return;t.innerHTML=`\n        <h4>Debug Information</h4>\n        <div class="debug-info">\n            <div>Turn: ${e.turn}</div>\n            <div>Phase: ${e.gamePhase}</div>\n            <div>Game Over: ${e.isGameOver}</div>\n            <div>Pending Actions: ${e.pendingActions}</div>\n        </div>\n    `}(e.detail)}),function(){const e=document.getElementById("burn-rate-game");if(!e)return;e.addEventListener("submit",async e=>{if(e.preventDefault(),!g)return;const t=e.target,n=new FormData(t),a=t.dataset.actionType;if(!a)return;const s={type:a,data:Object.fromEntries(n.entries()),timestamp:Date.now()};try{await g.handleUserAction(s)}catch(i){w("Action failed. Please try again.")}})}(),document.addEventListener("keydown",async e=>{if(!(e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement)&&g)switch(e.key){case"Enter":e.ctrlKey&&(e.preventDefault(),await g.handleUserAction({type:"endTurn",timestamp:Date.now()}));break;case"h":e.preventDefault(),C("Help",T());break;case"s":e.ctrlKey?(e.preventDefault(),function(){if(g&&v)try{const e=g.getGameEngine().getGameState();v.saveGameState(e),E("Game saved successfully.")}catch(e){w("Failed to save game.")}}()):(e.preventDefault(),await g.handleUserAction({type:"status",timestamp:Date.now()}));break;case"n":e.ctrlKey&&(e.preventDefault(),confirm("Start a new game? Current progress will be lost.")&&await b())}})}(),g.updateDisplay(),E("New game started! Good luck, Commander.")}catch(e){w(`Failed to start new game: ${e instanceof Error?e.message:"Unknown error"}`)}}function S(){const e=document.getElementById("modal-overlay");e&&e.classList.add("hidden")}function E(e){}function w(e){}function C(e,t){const n=document.getElementById("modal-overlay"),a=document.getElementById("modal-title"),s=document.getElementById("modal-body");n&&a&&s&&(a.textContent=e,s.innerHTML=t,n.classList.remove("hidden"))}function T(){return"\n        <h4>Game Commands</h4>\n        <p><strong>Build:</strong> Construct units and structures to strengthen your forces.</p>\n        <p><strong>Attack:</strong> Launch attacks against enemy positions.</p>\n        <p><strong>Scan:</strong> Gather intelligence about enemy activities.</p>\n        <p><strong>End Turn:</strong> Complete your turn and let the AI take its actions.</p>\n        \n        <h4>Resources</h4>\n        <p>Manage your resources carefully to maintain your military operations.</p>\n        \n        <h4>Victory Conditions</h4>\n        <p>Defeat all enemy forces or achieve strategic objectives to win.</p>\n    "}document.addEventListener("DOMContentLoaded",async()=>{try{v=new h,f=new m,y=new d({containerId:"burn-rate-game",showAnimations:!0,theme:"dark"});const e=document.getElementById("loading-overlay");e&&(e.style.display="none"),function(){const e=document.querySelectorAll(".tab-button"),t=document.querySelectorAll(".command-panel");e.forEach(n=>{n.addEventListener("click",()=>{const a=n.getAttribute("data-tab");e.forEach(e=>e.classList.remove("active")),t.forEach(e=>e.classList.remove("active")),n.classList.add("active");const s=document.getElementById(`${a}-panel`);s&&s.classList.add("active")})})}(),function(){const e=document.getElementById("modal-overlay"),t=document.getElementById("modal-close"),n=document.getElementById("help-btn"),a=document.getElementById("settings-btn");t&&e&&(t.addEventListener("click",()=>{e.classList.add("hidden")}),e.addEventListener("click",t=>{t.target===e&&e.classList.add("hidden")}));n&&n.addEventListener("click",()=>{C("Help",T())});a&&a.addEventListener("click",()=>{C("Settings","\n        <h4>Game Settings</h4>\n        <p>Settings panel will be implemented in future tasks.</p>\n        <p>Available options will include:</p>\n        <ul>\n            <li>AI Difficulty</li>\n            <li>Game Speed</li>\n            <li>Visual Theme</li>\n            <li>Sound Effects</li>\n        </ul>\n    ")})}(),await async function(){try{v?.hasValidSavedState()||!1?function(){C("Game Start",'\n        <div class="game-start-options">\n            <h4>Welcome to Burn Rate</h4>\n            <p>A saved game was found. What would you like to do?</p>\n            <div class="button-group">\n                <button id="continue-game-btn" class="primary-button">Continue Game</button>\n                <button id="new-game-btn" class="secondary-button">New Game</button>\n            </div>\n        </div>\n    ');const e=document.getElementById("continue-game-btn"),t=document.getElementById("new-game-btn");e&&e.addEventListener("click",async()=>{S(),await async function(){try{const e=v?.loadGameState();if(!e)throw new Error("No valid saved game found");await b(),E("Game continued from saved state.")}catch(e){w(`Failed to continue game: ${e instanceof Error?e.message:"Unknown error"}`),await b()}}()});t&&t.addEventListener("click",async()=>{S(),await b()})}():await b()}catch(e){throw e}}()}catch(e){w("Failed to initialize game. Please refresh the page.")}});
//# sourceMappingURL=main-DFBIT6aU.js.map
