{"version":3,"file":"engine-BWJrWsiH.js","sources":["../../../src/engine/EconomyEngine.ts","../../../src/engine/ai/AggressorAI.ts","../../../src/engine/ai/EconomistAI.ts","../../../src/engine/ai/TricksterAI.ts","../../../src/engine/ai/HybridAI.ts","../../../src/engine/AIEngine.ts","../../../src/engine/IntelligenceEngine.ts","../../../src/engine/GameEngine.ts"],"sourcesContent":["import { PlayerState } from '../models/PlayerState.js';\nimport { \n  calculateStructureIncome, \n  calculateConstructionDrain, \n  calculateNetIncome,\n  BASE_INCOME,\n  processConstructionQueue,\n  validateBuildOrder,\n  canAffordBuildOrder,\n  canSustainBuildOrder,\n  isStructureViable,\n  BuildOrder\n} from '../models/Economy.js';\nimport { calculateFleetUpkeep, getTotalFleetSize } from '../models/Fleet.js';\n\nexport class EconomyEngine {\n  /**\n   * Calculates and updates the player's resource income based on:\n   * - Base income (+10,000 Metal/Energy per turn)\n   * - Economic structure bonuses (+500 per structure)\n   * - Construction drain (resources consumed during building)\n   * - Unit upkeep costs (permanent drain from completed units)\n   */\n  calculateIncome(player: PlayerState): void {\n    // Calculate base income from economic structures\n    const structureIncome = calculateStructureIncome(\n      player.economy.reactors, \n      player.economy.mines\n    );\n\n    // Calculate construction drain from active build orders\n    const constructionDrain = calculateConstructionDrain(player.economy.constructionQueue);\n\n    // Calculate upkeep costs from existing fleet\n    const fleetUpkeep = calculateFleetUpkeep(player.fleet.homeSystem);\n\n    // Calculate net income after all drains\n    const grossIncome = calculateNetIncome(structureIncome, constructionDrain);\n    const netIncome = calculateNetIncome(grossIncome, fleetUpkeep);\n\n    // Update player's income rates\n    player.resources.metalIncome = netIncome.metal;\n    player.resources.energyIncome = netIncome.energy;\n\n    // Apply income to current resources\n    player.resources.metal += netIncome.metal;\n    player.resources.energy += netIncome.energy;\n\n    // Prevent negative resources (can't go below 0)\n    player.resources.metal = Math.max(0, player.resources.metal);\n    player.resources.energy = Math.max(0, player.resources.energy);\n  }\n\n  /**\n   * Gets the current net income without applying it to resources\n   * Useful for checking economic viability before making decisions\n   */\n  getNetIncome(player: PlayerState): { metal: number; energy: number } {\n    const structureIncome = calculateStructureIncome(\n      player.economy.reactors, \n      player.economy.mines\n    );\n    const constructionDrain = calculateConstructionDrain(player.economy.constructionQueue);\n    const fleetUpkeep = calculateFleetUpkeep(player.fleet.homeSystem);\n\n    const grossIncome = calculateNetIncome(structureIncome, constructionDrain);\n    return calculateNetIncome(grossIncome, fleetUpkeep);\n  }\n\n  /**\n   * Checks if the player's economy is in a stall condition\n   * (income ≤ 0, preventing new production)\n   */\n  isEconomyStalled(player: PlayerState): boolean {\n    const netIncome = this.getNetIncome(player);\n    return netIncome.metal <= 0 || netIncome.energy <= 0;\n  }\n\n  /**\n   * Gets detailed income breakdown for display/debugging\n   */\n  getIncomeBreakdown(player: PlayerState): {\n    baseIncome: { metal: number; energy: number };\n    structureBonus: { metal: number; energy: number };\n    constructionDrain: { metal: number; energy: number };\n    fleetUpkeep: { metal: number; energy: number };\n    netIncome: { metal: number; energy: number };\n  } {\n    const baseIncome = { ...BASE_INCOME };\n    const structureIncome = calculateStructureIncome(\n      player.economy.reactors, \n      player.economy.mines\n    );\n    const structureBonus = {\n      metal: structureIncome.metal - BASE_INCOME.metal,\n      energy: structureIncome.energy - BASE_INCOME.energy\n    };\n    const constructionDrain = calculateConstructionDrain(player.economy.constructionQueue);\n    const fleetUpkeep = calculateFleetUpkeep(player.fleet.homeSystem);\n    const netIncome = this.getNetIncome(player);\n\n    return {\n      baseIncome,\n      structureBonus,\n      constructionDrain,\n      fleetUpkeep,\n      netIncome\n    };\n  }\n\n  /**\n   * Processes construction queue for one turn:\n   * - Advances all build orders by 1 turn\n   * - Completes finished orders and adds units/structures to player\n   * - Validates resource availability before processing\n   * - Halts production if economy is stalled\n   */\n  processConstruction(player: PlayerState): void {\n    // Check if economy is stalled - halt all new production\n    if (this.isEconomyStalled(player)) {\n      // Don't start new construction, but continue existing orders\n      this.advanceExistingConstruction(player);\n      return;\n    }\n\n    // Process existing construction queue\n    this.advanceExistingConstruction(player);\n  }\n\n  /**\n   * Advances existing construction orders by one turn and completes finished ones\n   */\n  private advanceExistingConstruction(player: PlayerState): void {\n    const { completedOrders, remainingQueue } = processConstructionQueue(player.economy.constructionQueue);\n    \n    // Update construction queue\n    player.economy.constructionQueue = remainingQueue;\n\n    // Apply completed orders to player state\n    for (const completedOrder of completedOrders) {\n      this.applyCompletedOrder(player, completedOrder);\n    }\n  }\n\n  /**\n   * Applies a completed build order to the player state\n   */\n  private applyCompletedOrder(player: PlayerState, order: BuildOrder): void {\n    switch (order.unitType) {\n      case 'frigate':\n        player.fleet.homeSystem.frigates += order.quantity;\n        break;\n      case 'cruiser':\n        player.fleet.homeSystem.cruisers += order.quantity;\n        break;\n      case 'battleship':\n        player.fleet.homeSystem.battleships += order.quantity;\n        break;\n      case 'reactor':\n        player.economy.reactors += order.quantity;\n        break;\n      case 'mine':\n        player.economy.mines += order.quantity;\n        break;\n    }\n  }\n\n  /**\n   * Validates if a build order can be afforded and sustained\n   */\n  canAffordAndSustainBuildOrder(player: PlayerState, buildOrder: BuildOrder): {\n    canAfford: boolean;\n    canSustain: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n    \n    // Check if player has enough resources for the total cost\n    const canAfford = canAffordBuildOrder(player.resources, buildOrder);\n    if (!canAfford) {\n      const totalMetalCost = buildOrder.resourceDrainPerTurn.metal * buildOrder.turnsRemaining;\n      const totalEnergyCost = buildOrder.resourceDrainPerTurn.energy * buildOrder.turnsRemaining;\n      errors.push(`Insufficient resources: need ${totalMetalCost} metal, ${totalEnergyCost} energy`);\n    }\n\n    // Check if income can sustain the drain\n    const netIncome = this.getNetIncome(player);\n    const canSustain = canSustainBuildOrder(netIncome, buildOrder);\n    if (!canSustain) {\n      errors.push(`Insufficient income to sustain construction drain: ${buildOrder.resourceDrainPerTurn.metal} metal/turn, ${buildOrder.resourceDrainPerTurn.energy} energy/turn`);\n    }\n\n    return { canAfford, canSustain, errors };\n  }\n\n  /**\n   * Adds a build order to the construction queue if valid\n   */\n  addBuildOrder(player: PlayerState, buildOrder: BuildOrder): {\n    success: boolean;\n    errors: string[];\n  } {\n    // Validate build order structure\n    const validation = validateBuildOrder(buildOrder);\n    if (!validation.isValid) {\n      return { success: false, errors: validation.errors };\n    }\n\n    // Check affordability and sustainability\n    const affordability = this.canAffordAndSustainBuildOrder(player, buildOrder);\n    if (!affordability.canAfford) {\n      return { success: false, errors: affordability.errors };\n    }\n\n    // Check if economy would stall with this order\n    const projectedQueue = [...player.economy.constructionQueue, buildOrder];\n    const projectedDrain = calculateConstructionDrain(projectedQueue);\n    const structureIncome = calculateStructureIncome(player.economy.reactors, player.economy.mines);\n    const fleetUpkeep = calculateFleetUpkeep(player.fleet.homeSystem);\n    const projectedNetIncome = calculateNetIncome(\n      calculateNetIncome(structureIncome, projectedDrain),\n      fleetUpkeep\n    );\n\n    if (projectedNetIncome.metal <= 0 || projectedNetIncome.energy <= 0) {\n      return { \n        success: false, \n        errors: ['Adding this build order would stall the economy (income ≤ 0)'] \n      };\n    }\n\n    // Add to queue\n    player.economy.constructionQueue.push(buildOrder);\n    return { success: true, errors: [] };\n  }\n\n  /**\n   * Removes a build order from the construction queue by index\n   */\n  cancelBuildOrder(player: PlayerState, index: number): {\n    success: boolean;\n    errors: string[];\n  } {\n    if (index < 0 || index >= player.economy.constructionQueue.length) {\n      return { success: false, errors: ['Invalid build order index'] };\n    }\n\n    player.economy.constructionQueue.splice(index, 1);\n    return { success: true, errors: [] };\n  }\n\n  /**\n   * Gets the total construction drain from all active build orders\n   */\n  getTotalConstructionDrain(player: PlayerState): { metal: number; energy: number } {\n    return calculateConstructionDrain(player.economy.constructionQueue);\n  }\n\n  /**\n   * Checks if any construction is currently active\n   */\n  hasActiveConstruction(player: PlayerState): boolean {\n    return player.economy.constructionQueue.length > 0;\n  }\n\n  /**\n   * Gets estimated completion times for all build orders\n   */\n  getConstructionStatus(player: PlayerState): Array<{\n    order: BuildOrder;\n    index: number;\n    completionTurn: number;\n  }> {\n    return player.economy.constructionQueue.map((order, index) => ({\n      order,\n      index,\n      completionTurn: order.turnsRemaining\n    }));\n  }\n\n  /**\n   * Applies upkeep costs for completed units and validates economic balance\n   * This method is called as part of the income calculation process\n   * Note: Upkeep is already handled in calculateIncome(), this provides additional validation\n   */\n  applyUpkeep(player: PlayerState): void {\n    // Upkeep is automatically applied in calculateIncome()\n    // This method provides additional economic validation and balance checks\n    \n    const validation = this.validateEconomicState(player);\n    if (!validation.isValid) {\n      // Log warnings for economic issues (in a real game, this might trigger UI warnings)\n      console.warn('Economic validation warnings:', validation.warnings);\n    }\n  }\n\n  /**\n   * Validates the overall economic state and provides warnings for potential issues\n   */\n  validateEconomicState(player: PlayerState): {\n    isValid: boolean;\n    warnings: string[];\n    recommendations: string[];\n  } {\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    const breakdown = this.getIncomeBreakdown(player);\n    const netIncome = breakdown.netIncome;\n\n    // Check for economic stall\n    if (netIncome.metal <= 0) {\n      warnings.push('Metal income is zero or negative - economy stalled');\n      recommendations.push('Reduce fleet size or build more mines');\n    }\n\n    if (netIncome.energy <= 0) {\n      warnings.push('Energy income is zero or negative - economy stalled');\n      recommendations.push('Reduce fleet size or build more reactors');\n    }\n\n    // Check for low income warnings (less than 1000 per turn)\n    if (netIncome.metal > 0 && netIncome.metal < 1000) {\n      warnings.push('Metal income is critically low');\n      recommendations.push('Consider building mines or reducing military spending');\n    }\n\n    if (netIncome.energy > 0 && netIncome.energy < 1000) {\n      warnings.push('Energy income is critically low');\n      recommendations.push('Consider building reactors or reducing military spending');\n    }\n\n    // Check for excessive construction drain (more than 80% of base income)\n    const constructionDrainRatio = {\n      metal: breakdown.constructionDrain.metal / breakdown.baseIncome.metal,\n      energy: breakdown.constructionDrain.energy / breakdown.baseIncome.energy\n    };\n\n    if (constructionDrainRatio.metal > 0.8) {\n      warnings.push('Construction is consuming excessive metal resources');\n      recommendations.push('Consider reducing construction queue or building more mines');\n    }\n\n    if (constructionDrainRatio.energy > 0.8) {\n      warnings.push('Construction is consuming excessive energy resources');\n      recommendations.push('Consider reducing construction queue or building more reactors');\n    }\n\n    // Check for excessive fleet upkeep (more than 70% of base income)\n    const upkeepRatio = {\n      metal: breakdown.fleetUpkeep.metal / breakdown.baseIncome.metal,\n      energy: breakdown.fleetUpkeep.energy / breakdown.baseIncome.energy\n    };\n\n    if (upkeepRatio.metal > 0.7) {\n      warnings.push('Fleet upkeep is consuming excessive metal');\n      recommendations.push('Consider reducing fleet size or building more mines');\n    }\n\n    if (upkeepRatio.energy > 0.7) {\n      warnings.push('Fleet upkeep is consuming excessive energy');\n      recommendations.push('Consider reducing fleet size or building more reactors');\n    }\n\n    // Check for resource hoarding (more than 50,000 of either resource with positive income)\n    if (player.resources.metal > 50000 && netIncome.metal > 2000) {\n      recommendations.push('Consider investing excess metal in fleet or economic expansion');\n    }\n\n    if (player.resources.energy > 50000 && netIncome.energy > 2000) {\n      recommendations.push('Consider investing excess energy in fleet or economic expansion');\n    }\n\n    // Check structure viability\n    const structureWarnings = this.validateStructureViability(player);\n    warnings.push(...structureWarnings);\n\n    return {\n      isValid: warnings.length === 0,\n      warnings,\n      recommendations\n    };\n  }\n\n  /**\n   * Validates that economic structures are still viable investments\n   */\n  private validateStructureViability(player: PlayerState): string[] {\n    const warnings: string[] = [];\n\n    // Check if additional reactors would be viable\n    if (player.economy.reactors > 0) {\n      const nextReactorViable = isStructureViable('reactor', player.economy.reactors, 15);\n      if (!nextReactorViable) {\n        warnings.push('Additional reactors may not be cost-effective (payback > 15 turns)');\n      }\n    }\n\n    // Check if additional mines would be viable\n    if (player.economy.mines > 0) {\n      const nextMineViable = isStructureViable('mine', player.economy.mines, 15);\n      if (!nextMineViable) {\n        warnings.push('Additional mines may not be cost-effective (payback > 15 turns)');\n      }\n    }\n\n    return warnings;\n  }\n\n  /**\n   * Calculates the economic efficiency of the current setup\n   */\n  getEconomicEfficiency(player: PlayerState): {\n    overallEfficiency: number;\n    metalEfficiency: number;\n    energyEfficiency: number;\n    structureEfficiency: number;\n    fleetEfficiency: number;\n  } {\n    const breakdown = this.getIncomeBreakdown(player);\n    const totalFleetSize = getTotalFleetSize(player.fleet.homeSystem);\n\n    // Calculate efficiency ratios (0-1 scale)\n    const metalEfficiency = Math.max(0, Math.min(1, breakdown.netIncome.metal / breakdown.baseIncome.metal));\n    const energyEfficiency = Math.max(0, Math.min(1, breakdown.netIncome.energy / breakdown.baseIncome.energy));\n\n    // Structure efficiency: income bonus vs base income\n    const structureEfficiency = (breakdown.structureBonus.metal + breakdown.structureBonus.energy) / \n                               (breakdown.baseIncome.metal + breakdown.baseIncome.energy);\n\n    // Fleet efficiency: fleet size vs upkeep cost (higher is better)\n    const fleetEfficiency = totalFleetSize > 0 ? \n      totalFleetSize / (breakdown.fleetUpkeep.metal + breakdown.fleetUpkeep.energy) : 0;\n\n    const overallEfficiency = (metalEfficiency + energyEfficiency + \n                              Math.min(1, structureEfficiency) + \n                              Math.min(1, fleetEfficiency * 0.1)) / 4;\n\n    return {\n      overallEfficiency,\n      metalEfficiency,\n      energyEfficiency,\n      structureEfficiency,\n      fleetEfficiency\n    };\n  }\n\n  /**\n   * Provides economic recommendations based on current state\n   */\n  getEconomicRecommendations(player: PlayerState): {\n    priority: 'high' | 'medium' | 'low';\n    action: string;\n    reason: string;\n  }[] {\n    const recommendations: Array<{\n      priority: 'high' | 'medium' | 'low';\n      action: string;\n      reason: string;\n    }> = [];\n\n    const breakdown = this.getIncomeBreakdown(player);\n    const netIncome = breakdown.netIncome;\n\n    // High priority: Fix stalled economy\n    if (netIncome.metal <= 0) {\n      recommendations.push({\n        priority: 'high',\n        action: 'Reduce fleet size or build mines immediately',\n        reason: 'Metal income is zero or negative'\n      });\n    }\n\n    if (netIncome.energy <= 0) {\n      recommendations.push({\n        priority: 'high',\n        action: 'Reduce fleet size or build reactors immediately',\n        reason: 'Energy income is zero or negative'\n      });\n    }\n\n    // Medium priority: Improve efficiency\n    if (netIncome.metal > 0 && netIncome.metal < 2000) {\n      recommendations.push({\n        priority: 'medium',\n        action: 'Build additional mines',\n        reason: 'Metal income is low but positive'\n      });\n    }\n\n    if (netIncome.energy > 0 && netIncome.energy < 2000) {\n      recommendations.push({\n        priority: 'medium',\n        action: 'Build additional reactors',\n        reason: 'Energy income is low but positive'\n      });\n    }\n\n    // Low priority: Optimization\n    if (player.resources.metal > 30000 && netIncome.metal > 5000) {\n      recommendations.push({\n        priority: 'low',\n        action: 'Invest in fleet expansion',\n        reason: 'Excess metal resources available'\n      });\n    }\n\n    if (player.resources.energy > 30000 && netIncome.energy > 5000) {\n      recommendations.push({\n        priority: 'low',\n        action: 'Invest in fleet expansion or scanning',\n        reason: 'Excess energy resources available'\n      });\n    }\n\n    return recommendations;\n  }\n}","import { BaseAIArchetype, AIState, AIDecision } from '../../models/AI.js';\nimport { GameState } from '../../models/GameState.js';\n\nexport class AggressorAI extends BaseAIArchetype {\n  constructor() {\n    super('aggressor', {\n      militaryFocus: 0.8,\n      economicFocus: 0.2,\n      aggressionLevel: 0.9,\n      deceptionChance: 0.1,\n      adaptiveVariation: 0.2\n    });\n  }\n\n  makeDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Update threat assessment\n    aiState.threatLevel = this.calculateThreatLevel(gameState, aiState);\n    aiState.economicAdvantage = this.calculateEconomicAdvantage(gameState, aiState);\n\n    // 20% chance to turtle defensively (adaptive behavior)\n    if (this.shouldAdaptBehavior() && aiState.threatLevel > 0.7) {\n      return this.makeDefensiveDecision(aiState);\n    }\n\n    // 80% military focus - prioritize building units and attacking\n    if (Math.random() < this.behaviorProbabilities.militaryFocus) {\n      return this.makeMilitaryDecision(gameState, aiState);\n    }\n\n    // 20% economic focus - build economic structures when needed\n    return this.makeEconomicDecision(aiState);\n  }\n\n  private makeDefensiveDecision(aiState: AIState): AIDecision {\n    // Focus on building defensive units (battleships for their strength)\n    if (this.canAffordBuild(aiState.resources, 'battleship')) {\n      return {\n        type: 'build',\n        buildType: 'battleship',\n        buildQuantity: 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n      return {\n        type: 'build',\n        buildType: 'cruiser',\n        buildQuantity: Math.floor(Math.random() * 3) + 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'frigate')) {\n      return {\n        type: 'build',\n        buildType: 'frigate',\n        buildQuantity: Math.floor(Math.random() * 5) + 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeMilitaryDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n\n    // If we have a decent fleet, consider attacking\n    if (totalUnits >= 5 && aiState.threatLevel < 0.8) {\n      const playerFleet = gameState.player.fleet.homeSystem;\n      const attackFleet = this.planAttackFleet(currentFleet, playerFleet);\n      \n      if (attackFleet && this.hasAvailableFleet(aiState, attackFleet)) {\n        return {\n          type: 'attack',\n          attackTarget: 'player_home',\n          attackFleet\n        };\n      }\n    }\n\n    // Otherwise, build military units\n    return this.buildMilitaryUnits(aiState);\n  }\n\n  private planAttackFleet(availableFleet: any, enemyFleet: any) {\n    const totalAvailable = availableFleet.frigates + availableFleet.cruisers + availableFleet.battleships;\n    \n    if (totalAvailable < 3) return null;\n\n    // Use 60-80% of available fleet for attack\n    const attackRatio = 0.6 + Math.random() * 0.2;\n    \n    return {\n      frigates: Math.floor(availableFleet.frigates * attackRatio),\n      cruisers: Math.floor(availableFleet.cruisers * attackRatio),\n      battleships: Math.floor(availableFleet.battleships * attackRatio)\n    };\n  }\n\n  private buildMilitaryUnits(aiState: AIState): AIDecision {\n    // Prefer fast, aggressive units\n    if (this.canAffordBuild(aiState.resources, 'frigate', 3)) {\n      return {\n        type: 'build',\n        buildType: 'frigate',\n        buildQuantity: Math.floor(Math.random() * 3) + 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'cruiser', 2)) {\n      return {\n        type: 'build',\n        buildType: 'cruiser',\n        buildQuantity: Math.floor(Math.random() * 2) + 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'battleship')) {\n      return {\n        type: 'build',\n        buildType: 'battleship',\n        buildQuantity: 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeEconomicDecision(aiState: AIState): AIDecision {\n    // Only build economy if income is getting low\n    const totalIncome = aiState.resources.metalIncome + aiState.resources.energyIncome;\n    \n    if (totalIncome < 15000) {\n      if (aiState.resources.metalIncome < aiState.resources.energyIncome && \n          this.canAffordBuild(aiState.resources, 'mine')) {\n        return {\n          type: 'build',\n          buildType: 'mine',\n          buildQuantity: 1\n        };\n      }\n\n      if (this.canAffordBuild(aiState.resources, 'reactor')) {\n        return {\n          type: 'build',\n          buildType: 'reactor',\n          buildQuantity: 1\n        };\n      }\n    }\n\n    // Fall back to military if can't build economy\n    return this.buildMilitaryUnits(aiState);\n  }\n\n\n}","import { BaseAIArchetype, AIState, AIDecision } from '../../models/AI.js';\nimport { GameState } from '../../models/GameState.js';\n\nexport class EconomistAI extends BaseAIArchetype {\n  constructor() {\n    super('economist', {\n      militaryFocus: 0.25,\n      economicFocus: 0.75,\n      aggressionLevel: 0.3,\n      deceptionChance: 0.1,\n      adaptiveVariation: 0.25\n    });\n  }\n\n  makeDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Update threat assessment\n    aiState.threatLevel = this.calculateThreatLevel(gameState, aiState);\n    aiState.economicAdvantage = this.calculateEconomicAdvantage(gameState, aiState);\n\n    // 25% chance to build military when threatened\n    if (aiState.threatLevel > 0.5 && Math.random() < this.behaviorProbabilities.militaryFocus) {\n      return this.makeMilitaryDecision(gameState, aiState);\n    }\n\n    // 75% economic focus - prioritize economic expansion\n    if (Math.random() < this.behaviorProbabilities.economicFocus) {\n      return this.makeEconomicDecision(aiState);\n    }\n\n    // Fallback to defensive military\n    return this.makeDefensiveMilitaryDecision(aiState);\n  }\n\n  private makeEconomicDecision(aiState: AIState): AIDecision {\n    const currentIncome = aiState.resources.metalIncome + aiState.resources.energyIncome;\n    const targetIncome = 25000; // Economist wants strong economy\n\n    if (currentIncome < targetIncome) {\n      // Prioritize the resource type that's lower\n      if (aiState.resources.metalIncome <= aiState.resources.energyIncome) {\n        if (this.canAffordBuild(aiState.resources, 'mine')) {\n          return {\n            type: 'build',\n            buildType: 'mine',\n            buildQuantity: 1\n          };\n        }\n      } else {\n        if (this.canAffordBuild(aiState.resources, 'reactor')) {\n          return {\n            type: 'build',\n            buildType: 'reactor',\n            buildQuantity: 1\n          };\n        }\n      }\n    }\n\n    // If economy is strong enough, build some defensive units\n    return this.makeDefensiveMilitaryDecision(aiState);\n  }\n\n  private makeMilitaryDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n\n    // Only attack if we have overwhelming advantage\n    if (totalUnits >= 10 && aiState.economicAdvantage > 0.3) {\n      const playerFleet = gameState.player.fleet.homeSystem;\n      const attackFleet = this.planConservativeAttack(currentFleet, playerFleet);\n      \n      if (attackFleet && this.hasAvailableFleet(aiState, attackFleet)) {\n        return {\n          type: 'attack',\n          attackTarget: 'player_home',\n          attackFleet\n        };\n      }\n    }\n\n    // Otherwise build defensive units\n    return this.makeDefensiveMilitaryDecision(aiState);\n  }\n\n  private planConservativeAttack(availableFleet: any, enemyFleet: any) {\n    const ourStrength = this.calculateFleetStrength(availableFleet);\n    const enemyStrength = this.calculateFleetStrength(enemyFleet);\n    \n    // Only attack if we have 2:1 advantage\n    if (ourStrength < enemyStrength * 2) return null;\n\n    // Use only 40-50% of fleet for attack (conservative)\n    const attackRatio = 0.4 + Math.random() * 0.1;\n    \n    return {\n      frigates: Math.floor(availableFleet.frigates * attackRatio),\n      cruisers: Math.floor(availableFleet.cruisers * attackRatio),\n      battleships: Math.floor(availableFleet.battleships * attackRatio)\n    };\n  }\n\n  private makeDefensiveMilitaryDecision(aiState: AIState): AIDecision {\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n\n    // Maintain a minimum defensive fleet\n    const targetDefensiveFleet = 8;\n    \n    if (totalUnits < targetDefensiveFleet) {\n      // Build cost-effective defensive units\n      if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n        return {\n          type: 'build',\n          buildType: 'cruiser',\n          buildQuantity: 1\n        };\n      }\n\n      if (this.canAffordBuild(aiState.resources, 'frigate', 2)) {\n        return {\n          type: 'build',\n          buildType: 'frigate',\n          buildQuantity: 2\n        };\n      }\n\n      if (this.canAffordBuild(aiState.resources, 'battleship')) {\n        return {\n          type: 'build',\n          buildType: 'battleship',\n          buildQuantity: 1\n        };\n      }\n    }\n\n    // If defensive fleet is adequate, scan for intelligence\n    if (aiState.resources.energy >= 2500 && Math.random() < 0.3) {\n      return {\n        type: 'scan',\n        scanType: 'deep'\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n\n}","import { BaseAIArchetype, AIState, AIDecision } from '../../models/AI.js';\nimport { GameState } from '../../models/GameState.js';\n\nexport class TricksterAI extends BaseAIArchetype {\n  private lastDeceptionTurn: number = 0;\n  private deceptionCooldown: number = 3; // Turns between deception attempts\n\n  constructor() {\n    super('trickster', {\n      militaryFocus: 0.4,\n      economicFocus: 0.3,\n      aggressionLevel: 0.6,\n      deceptionChance: 0.7,\n      adaptiveVariation: 0.3\n    });\n  }\n\n  makeDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Update threat assessment\n    aiState.threatLevel = this.calculateThreatLevel(gameState, aiState);\n    aiState.economicAdvantage = this.calculateEconomicAdvantage(gameState, aiState);\n\n    // 30% chance to play straightforward when player stops scanning\n    const playerLastScan = gameState.player.intelligence.lastScanTurn;\n    const turnsSincePlayerScan = gameState.turn - playerLastScan;\n    \n    if (turnsSincePlayerScan > 3 && Math.random() < 0.3) {\n      return this.makeStraightforwardDecision(gameState, aiState);\n    }\n\n    // 70% deception and misdirection\n    if (Math.random() < this.behaviorProbabilities.deceptionChance) {\n      return this.makeDeceptiveDecision(gameState, aiState);\n    }\n\n    // Fallback to balanced approach\n    return this.makeBalancedDecision(gameState, aiState);\n  }\n\n  private makeDeceptiveDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const currentTurn = gameState.turn;\n    \n    // Deploy misinformation through scanning behavior\n    if (currentTurn - this.lastDeceptionTurn >= this.deceptionCooldown) {\n      // Scan to appear like we're gathering intelligence (misdirection)\n      if (aiState.resources.energy >= 1000 && Math.random() < 0.4) {\n        this.lastDeceptionTurn = currentTurn;\n        return {\n          type: 'scan',\n          scanType: 'basic'\n        };\n      }\n    }\n\n    // Build unexpected unit compositions\n    return this.buildUnexpectedUnits(aiState, gameState);\n  }\n\n  private buildUnexpectedUnits(aiState: AIState, gameState: GameState): AIDecision {\n    const playerFleet = gameState.player.fleet.homeSystem;\n    const playerDominantUnit = this.getDominantUnitType(playerFleet);\n    \n    // Build units that seem suboptimal but create confusion\n    switch (playerDominantUnit) {\n      case 'frigate':\n        // Player expects us to build battleships, build cruisers instead\n        if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n          return {\n            type: 'build',\n            buildType: 'cruiser',\n            buildQuantity: Math.floor(Math.random() * 2) + 1\n          };\n        }\n        break;\n      \n      case 'cruiser':\n        // Player expects frigates, build battleships\n        if (this.canAffordBuild(aiState.resources, 'battleship')) {\n          return {\n            type: 'build',\n            buildType: 'battleship',\n            buildQuantity: 1\n          };\n        }\n        break;\n      \n      case 'battleship':\n        // Player expects cruisers, build frigates\n        if (this.canAffordBuild(aiState.resources, 'frigate', 3)) {\n          return {\n            type: 'build',\n            buildType: 'frigate',\n            buildQuantity: Math.floor(Math.random() * 4) + 2\n          };\n        }\n        break;\n    }\n\n    // Fallback to random unit type\n    const unitTypes = ['frigate', 'cruiser', 'battleship'] as const;\n    const randomUnit = unitTypes[Math.floor(Math.random() * unitTypes.length)];\n    \n    if (this.canAffordBuild(aiState.resources, randomUnit)) {\n      return {\n        type: 'build',\n        buildType: randomUnit,\n        buildQuantity: 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeStraightforwardDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Play optimally when player isn't watching\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n\n    // Attack if we have advantage\n    if (totalUnits >= 6 && aiState.threatLevel < 0.6) {\n      const playerFleet = gameState.player.fleet.homeSystem;\n      const attackFleet = this.planOptimalAttack(currentFleet, playerFleet);\n      \n      if (attackFleet && this.hasAvailableFleet(aiState, attackFleet)) {\n        return {\n          type: 'attack',\n          attackTarget: 'player_home',\n          attackFleet\n        };\n      }\n    }\n\n    // Build optimal counters\n    return this.buildOptimalUnits(aiState, gameState);\n  }\n\n  private planOptimalAttack(availableFleet: any, enemyFleet: any) {\n    const ourStrength = this.calculateFleetStrength(availableFleet);\n    const enemyStrength = this.calculateFleetStrength(enemyFleet);\n    \n    if (ourStrength < enemyStrength * 1.2) return null;\n\n    // Use 50-70% of fleet for attack\n    const attackRatio = 0.5 + Math.random() * 0.2;\n    \n    return {\n      frigates: Math.floor(availableFleet.frigates * attackRatio),\n      cruisers: Math.floor(availableFleet.cruisers * attackRatio),\n      battleships: Math.floor(availableFleet.battleships * attackRatio)\n    };\n  }\n\n  private buildOptimalUnits(aiState: AIState, gameState: GameState): AIDecision {\n    const playerFleet = gameState.player.fleet.homeSystem;\n    const optimalCounter = this.getOptimalCounter(playerFleet);\n    \n    if (this.canAffordBuild(aiState.resources, optimalCounter.unitType, optimalCounter.quantity)) {\n      return {\n        type: 'build',\n        buildType: optimalCounter.unitType,\n        buildQuantity: optimalCounter.quantity\n      };\n    }\n\n    // Fallback to any affordable unit\n    if (this.canAffordBuild(aiState.resources, 'frigate')) {\n      return {\n        type: 'build',\n        buildType: 'frigate',\n        buildQuantity: 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private getOptimalCounter(enemyFleet: any): { unitType: 'frigate' | 'cruiser' | 'battleship', quantity: number } {\n    const dominantUnit = this.getDominantUnitType(enemyFleet);\n    \n    switch (dominantUnit) {\n      case 'frigate':\n        return { unitType: 'battleship', quantity: 1 };\n      case 'cruiser':\n        return { unitType: 'frigate', quantity: 3 };\n      case 'battleship':\n        return { unitType: 'cruiser', quantity: 2 };\n    }\n  }\n\n  private makeBalancedDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Mix of economic and military decisions\n    if (Math.random() < 0.5) {\n      return this.makeEconomicDecision(aiState);\n    } else {\n      return this.makeMilitaryDecision(aiState);\n    }\n  }\n\n  private makeEconomicDecision(aiState: AIState): AIDecision {\n    if (aiState.resources.metalIncome < 15000 && this.canAffordBuild(aiState.resources, 'mine')) {\n      return {\n        type: 'build',\n        buildType: 'mine',\n        buildQuantity: 1\n      };\n    }\n\n    if (aiState.resources.energyIncome < 15000 && this.canAffordBuild(aiState.resources, 'reactor')) {\n      return {\n        type: 'build',\n        buildType: 'reactor',\n        buildQuantity: 1\n      };\n    }\n\n    return this.makeMilitaryDecision(aiState);\n  }\n\n  private makeMilitaryDecision(aiState: AIState): AIDecision {\n    const unitTypes = ['frigate', 'cruiser', 'battleship'] as const;\n    const randomUnit = unitTypes[Math.floor(Math.random() * unitTypes.length)];\n    \n    if (this.canAffordBuild(aiState.resources, randomUnit)) {\n      return {\n        type: 'build',\n        buildType: randomUnit,\n        buildQuantity: 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n\n\n\n}","import { BaseAIArchetype, AIState, AIDecision } from '../../models/AI.js';\nimport { GameState } from '../../models/GameState.js';\n\nexport class HybridAI extends BaseAIArchetype {\n  private currentStrategy: 'aggressive' | 'economic' | 'defensive' | 'opportunistic';\n  private strategyChangeTimer: number = 0;\n  private strategyDuration: number = 3; // Turns to stick with a strategy\n\n  constructor() {\n    super('hybrid', {\n      militaryFocus: 0.6,\n      economicFocus: 0.6,\n      aggressionLevel: 0.5,\n      deceptionChance: 0.2,\n      adaptiveVariation: 0.4\n    });\n    \n    this.currentStrategy = this.selectInitialStrategy();\n  }\n\n  makeDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Update threat assessment\n    aiState.threatLevel = this.calculateThreatLevel(gameState, aiState);\n    aiState.economicAdvantage = this.calculateEconomicAdvantage(gameState, aiState);\n\n    // 40% chance to deviate from balanced approach each turn\n    if (this.shouldAdaptBehavior()) {\n      this.adaptStrategy(gameState, aiState);\n    }\n\n    // Check if it's time to change strategy\n    this.strategyChangeTimer++;\n    if (this.strategyChangeTimer >= this.strategyDuration) {\n      this.currentStrategy = this.selectNewStrategy(gameState, aiState);\n      this.strategyChangeTimer = 0;\n      this.strategyDuration = Math.floor(Math.random() * 3) + 2; // 2-4 turns\n    }\n\n    // Execute decision based on current strategy\n    return this.executeStrategy(gameState, aiState);\n  }\n\n  private selectInitialStrategy(): 'aggressive' | 'economic' | 'defensive' | 'opportunistic' {\n    const strategies = ['aggressive', 'economic', 'defensive', 'opportunistic'] as const;\n    return strategies[Math.floor(Math.random() * strategies.length)];\n  }\n\n  private selectNewStrategy(gameState: GameState, aiState: AIState): 'aggressive' | 'economic' | 'defensive' | 'opportunistic' {\n    // Choose strategy based on game state\n    if (aiState.threatLevel > 0.7) {\n      return Math.random() < 0.7 ? 'defensive' : 'aggressive';\n    }\n    \n    if (aiState.economicAdvantage < -0.3) {\n      return Math.random() < 0.6 ? 'economic' : 'opportunistic';\n    }\n    \n    if (aiState.economicAdvantage > 0.3) {\n      return Math.random() < 0.6 ? 'aggressive' : 'opportunistic';\n    }\n    \n    // Balanced situation - random choice\n    const strategies = ['aggressive', 'economic', 'defensive', 'opportunistic'] as const;\n    return strategies[Math.floor(Math.random() * strategies.length)];\n  }\n\n  private adaptStrategy(gameState: GameState, aiState: AIState): void {\n    // Reactive adaptation based on player actions\n    const playerFleet = gameState.player.fleet.homeSystem;\n    const playerTotalUnits = playerFleet.frigates + playerFleet.cruisers + playerFleet.battleships;\n    \n    // If player is building military, adapt accordingly\n    if (playerTotalUnits > 5 && aiState.threatLevel > 0.5) {\n      this.currentStrategy = Math.random() < 0.6 ? 'defensive' : 'aggressive';\n    }\n    \n    // If player is focusing on economy, exploit or match\n    const playerIncome = gameState.player.resources.metalIncome + gameState.player.resources.energyIncome;\n    if (playerIncome > 20000 && aiState.economicAdvantage < 0) {\n      this.currentStrategy = Math.random() < 0.5 ? 'economic' : 'aggressive';\n    }\n  }\n\n  private executeStrategy(gameState: GameState, aiState: AIState): AIDecision {\n    switch (this.currentStrategy) {\n      case 'aggressive':\n        return this.makeAggressiveDecision(gameState, aiState);\n      case 'economic':\n        return this.makeEconomicDecision(gameState, aiState);\n      case 'defensive':\n        return this.makeDefensiveDecision(gameState, aiState);\n      case 'opportunistic':\n        return this.makeOpportunisticDecision(gameState, aiState);\n    }\n  }\n\n  private makeAggressiveDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n\n    // Attack if we have sufficient force\n    if (totalUnits >= 4) {\n      const playerFleet = gameState.player.fleet.homeSystem;\n      const attackFleet = this.planAggressiveAttack(currentFleet, playerFleet);\n      \n      if (attackFleet && this.hasAvailableFleet(aiState, attackFleet)) {\n        return {\n          type: 'attack',\n          attackTarget: 'player_home',\n          attackFleet\n        };\n      }\n    }\n\n    // Build fast, aggressive units\n    if (this.canAffordBuild(aiState.resources, 'frigate', 2)) {\n      return {\n        type: 'build',\n        buildType: 'frigate',\n        buildQuantity: Math.floor(Math.random() * 3) + 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n      return {\n        type: 'build',\n        buildType: 'cruiser',\n        buildQuantity: 1\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeEconomicDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const targetIncome = 20000;\n    const currentIncome = aiState.resources.metalIncome + aiState.resources.energyIncome;\n\n    if (currentIncome < targetIncome) {\n      // Balance metal and energy income\n      if (aiState.resources.metalIncome <= aiState.resources.energyIncome) {\n        if (this.canAffordBuild(aiState.resources, 'mine')) {\n          return {\n            type: 'build',\n            buildType: 'mine',\n            buildQuantity: 1\n          };\n        }\n      } else {\n        if (this.canAffordBuild(aiState.resources, 'reactor')) {\n          return {\n            type: 'build',\n            buildType: 'reactor',\n            buildQuantity: 1\n          };\n        }\n      }\n    }\n\n    // Build minimal defense\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n    \n    if (totalUnits < 3) {\n      if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n        return {\n          type: 'build',\n          buildType: 'cruiser',\n          buildQuantity: 1\n        };\n      }\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeDefensiveDecision(gameState: GameState, aiState: AIState): AIDecision {\n    const currentFleet = aiState.fleet.homeSystem;\n    const totalUnits = currentFleet.frigates + currentFleet.cruisers + currentFleet.battleships;\n    const targetDefense = 8;\n\n    if (totalUnits < targetDefense) {\n      // Build defensive units based on threat\n      const playerFleet = gameState.player.fleet.homeSystem;\n      const counterUnit = this.getDefensiveCounter(playerFleet);\n      \n      if (this.canAffordBuild(aiState.resources, counterUnit)) {\n        return {\n          type: 'build',\n          buildType: counterUnit,\n          buildQuantity: 1\n        };\n      }\n    }\n\n    // Scan for intelligence when defensive\n    if (aiState.resources.energy >= 2500 && Math.random() < 0.4) {\n      return {\n        type: 'scan',\n        scanType: 'deep'\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private makeOpportunisticDecision(gameState: GameState, aiState: AIState): AIDecision {\n    // Look for opportunities based on game state\n    const playerFleet = gameState.player.fleet.homeSystem;\n    const playerTotalUnits = playerFleet.frigates + playerFleet.cruisers + playerFleet.battleships;\n    \n    // If player fleet is weak, attack\n    if (playerTotalUnits <= 2 && aiState.fleet.homeSystem.frigates + aiState.fleet.homeSystem.cruisers + aiState.fleet.homeSystem.battleships >= 3) {\n      const attackFleet = {\n        frigates: Math.floor(aiState.fleet.homeSystem.frigates * 0.8),\n        cruisers: Math.floor(aiState.fleet.homeSystem.cruisers * 0.8),\n        battleships: Math.floor(aiState.fleet.homeSystem.battleships * 0.8)\n      };\n      \n      if (this.hasAvailableFleet(aiState, attackFleet)) {\n        return {\n          type: 'attack',\n          attackTarget: 'player_home',\n          attackFleet\n        };\n      }\n    }\n\n    // If player is building economy, match or counter\n    const playerIncome = gameState.player.resources.metalIncome + gameState.player.resources.energyIncome;\n    if (playerIncome > aiState.resources.metalIncome + aiState.resources.energyIncome) {\n      return this.makeEconomicDecision(gameState, aiState);\n    }\n\n    // Default to balanced military build\n    if (this.canAffordBuild(aiState.resources, 'cruiser')) {\n      return {\n        type: 'build',\n        buildType: 'cruiser',\n        buildQuantity: 1\n      };\n    }\n\n    if (this.canAffordBuild(aiState.resources, 'frigate')) {\n      return {\n        type: 'build',\n        buildType: 'frigate',\n        buildQuantity: 2\n      };\n    }\n\n    return { type: 'wait' };\n  }\n\n  private planAggressiveAttack(availableFleet: any, enemyFleet: any) {\n    const totalAvailable = availableFleet.frigates + availableFleet.cruisers + availableFleet.battleships;\n    \n    if (totalAvailable < 2) return null;\n\n    // Use 70-90% of available fleet for aggressive attack\n    const attackRatio = 0.7 + Math.random() * 0.2;\n    \n    return {\n      frigates: Math.floor(availableFleet.frigates * attackRatio),\n      cruisers: Math.floor(availableFleet.cruisers * attackRatio),\n      battleships: Math.floor(availableFleet.battleships * attackRatio)\n    };\n  }\n\n  private getDefensiveCounter(enemyFleet: any): 'frigate' | 'cruiser' | 'battleship' {\n    const dominantUnit = this.getDominantUnitType(enemyFleet);\n    \n    // Build counters\n    switch (dominantUnit) {\n      case 'frigate':\n        return 'battleship';\n      case 'cruiser':\n        return 'frigate';\n      case 'battleship':\n        return 'cruiser';\n    }\n  }\n\n\n\n\n}","import { GameState } from '../models/GameState.js';\nimport { AIState, AIDecision, BaseAIArchetype, AIArchetype } from '../models/AI.js';\nimport { AggressorAI } from './ai/AggressorAI.js';\nimport { EconomistAI } from './ai/EconomistAI.js';\nimport { TricksterAI } from './ai/TricksterAI.js';\nimport { HybridAI } from './ai/HybridAI.js';\n\nexport class AIEngine {\n  private aiArchetype: BaseAIArchetype;\n  private aiState: AIState;\n\n  constructor(archetype: AIArchetype) {\n    this.aiArchetype = this.createArchetype(archetype);\n    this.aiState = this.initializeAIState(archetype);\n  }\n\n  private createArchetype(archetype: AIArchetype): BaseAIArchetype {\n    switch (archetype) {\n      case 'aggressor':\n        return new AggressorAI();\n      case 'economist':\n        return new EconomistAI();\n      case 'trickster':\n        return new TricksterAI();\n      case 'hybrid':\n        return new HybridAI();\n      default:\n        throw new Error(`Unknown AI archetype: ${archetype}`);\n    }\n  }\n\n  private initializeAIState(archetype: AIArchetype): AIState {\n    // Initialize with base player state structure\n    const baseState = {\n      resources: {\n        metal: 10000,\n        energy: 10000,\n        metalIncome: 10000,\n        energyIncome: 10000\n      },\n      fleet: {\n        homeSystem: {\n          frigates: 0,\n          cruisers: 0,\n          battleships: 0\n        },\n        inTransit: {\n          outbound: []\n        }\n      },\n      economy: {\n        reactors: 0,\n        mines: 0,\n        constructionQueue: []\n      },\n      intelligence: {\n        lastScanTurn: 0,\n        knownEnemyFleet: {\n          frigates: 0,\n          cruisers: 0,\n          battleships: 0\n        },\n        scanAccuracy: 0.7,\n        lastScanData: null,\n        misinformationActive: false\n      }\n    };\n\n    return {\n      ...baseState,\n      archetype,\n      behaviorProbabilities: this.getBehaviorProbabilities(archetype),\n      threatLevel: 0,\n      economicAdvantage: 0\n    };\n  }\n\n  private getBehaviorProbabilities(archetype: AIArchetype) {\n    switch (archetype) {\n      case 'aggressor':\n        return {\n          militaryFocus: 0.8,\n          economicFocus: 0.2,\n          aggressionLevel: 0.9,\n          deceptionChance: 0.1,\n          adaptiveVariation: 0.2\n        };\n      case 'economist':\n        return {\n          militaryFocus: 0.25,\n          economicFocus: 0.75,\n          aggressionLevel: 0.3,\n          deceptionChance: 0.1,\n          adaptiveVariation: 0.25\n        };\n      case 'trickster':\n        return {\n          militaryFocus: 0.4,\n          economicFocus: 0.3,\n          aggressionLevel: 0.6,\n          deceptionChance: 0.7,\n          adaptiveVariation: 0.3\n        };\n      case 'hybrid':\n        return {\n          militaryFocus: 0.6,\n          economicFocus: 0.6,\n          aggressionLevel: 0.5,\n          deceptionChance: 0.2,\n          adaptiveVariation: 0.4\n        };\n    }\n  }\n\n  public processTurn(gameState: GameState): AIDecision {\n    // Update AI state with current game information\n    this.updateAIState(gameState);\n    \n    // Make decision based on archetype\n    const decision = this.aiArchetype.makeDecision(gameState, this.aiState);\n    \n    // Store the decision for future reference\n    this.aiState.lastPlayerAction = decision;\n    \n    return decision;\n  }\n\n  private updateAIState(gameState: GameState): void {\n    // Update AI state to match current game state\n    this.aiState.resources = { ...gameState.ai.resources };\n    this.aiState.fleet = { ...gameState.ai.fleet };\n    this.aiState.economy = { ...gameState.ai.economy };\n    this.aiState.intelligence = { ...gameState.ai.intelligence };\n    \n    // Update threat assessment\n    this.aiState.threatLevel = this.calculateThreatLevel(gameState);\n    this.aiState.economicAdvantage = this.calculateEconomicAdvantage(gameState);\n  }\n\n  private calculateThreatLevel(gameState: GameState): number {\n    const playerFleet = gameState.player.fleet.homeSystem;\n    const aiFleet = this.aiState.fleet.homeSystem;\n    \n    const playerStrength = this.calculateFleetStrength(playerFleet);\n    const aiStrength = this.calculateFleetStrength(aiFleet);\n    \n    if (aiStrength === 0) return 1.0;\n    \n    const ratio = playerStrength / aiStrength;\n    return Math.min(1.0, Math.max(0.0, ratio - 0.5));\n  }\n\n  private calculateEconomicAdvantage(gameState: GameState): number {\n    const playerIncome = gameState.player.resources.metalIncome + gameState.player.resources.energyIncome;\n    const aiIncome = this.aiState.resources.metalIncome + this.aiState.resources.energyIncome;\n    \n    if (playerIncome + aiIncome === 0) return 0;\n    \n    return (aiIncome - playerIncome) / (aiIncome + playerIncome);\n  }\n\n  private calculateFleetStrength(fleet: { frigates: number; cruisers: number; battleships: number }): number {\n    return fleet.frigates * 1 + fleet.cruisers * 2.5 + fleet.battleships * 5;\n  }\n\n  public getAIState(): AIState {\n    return { ...this.aiState };\n  }\n\n  public getArchetype(): AIArchetype {\n    return this.aiState.archetype;\n  }\n}","import { PlayerState } from '../models/PlayerState.js';\nimport { FleetComposition } from '../models/GameState.js';\nimport { \n  ScanType, \n  ScanResult, \n  SCAN_COSTS, \n  IntelligenceGap,\n  MISINFORMATION_BASE_CHANCE,\n  CONFIDENCE_DECAY_RATE \n} from '../models/Intelligence.js';\n\nexport class IntelligenceEngine {\n  /**\n   * Validates if a player has sufficient resources to perform a scan\n   */\n  canAffordScan(playerState: PlayerState, scanType: ScanType): boolean {\n    const cost = SCAN_COSTS[scanType];\n    if (!cost) {\n      throw new Error(`Unknown scan type: ${scanType}`);\n    }\n    return playerState.resources.metal >= cost.metal && \n           playerState.resources.energy >= cost.energy;\n  }\n\n  /**\n   * Deducts scan costs from player resources\n   */\n  deductScanCost(playerState: PlayerState, scanType: ScanType): void {\n    const cost = SCAN_COSTS[scanType];\n    if (!cost) {\n      throw new Error(`Unknown scan type: ${scanType}`);\n    }\n    playerState.resources.metal -= cost.metal;\n    playerState.resources.energy -= cost.energy;\n  }\n\n  /**\n   * Performs a basic scan - reveals total fleet count with ±30% accuracy\n   */\n  performBasicScan(targetState: PlayerState, currentTurn: number): ScanResult {\n    const actualFleet = targetState.fleet.homeSystem;\n    const totalShips = actualFleet.frigates + actualFleet.cruisers + actualFleet.battleships;\n    \n    // Apply ±30% accuracy variation\n    const accuracyVariation = 0.3;\n    const randomFactor = 1 + (Math.random() - 0.5) * 2 * accuracyVariation;\n    const reportedTotal = Math.max(0, Math.round(totalShips * randomFactor));\n\n    return {\n      scanType: 'basic',\n      timestamp: currentTurn,\n      fleetData: {\n        // Only report total as a single frigate count for simplicity\n        frigates: reportedTotal,\n        cruisers: 0,\n        battleships: 0\n      },\n      accuracy: 0.7, // 70% base accuracy for basic scans\n      dataAge: 0\n    };\n  }\n\n  /**\n   * Performs a deep scan - reveals unit composition and economic status with ±10% accuracy\n   */\n  performDeepScan(targetState: PlayerState, currentTurn: number): ScanResult {\n    const actualFleet = targetState.fleet.homeSystem;\n    const accuracyVariation = 0.1;\n\n    // Apply ±10% accuracy to each unit type\n    const applyAccuracy = (value: number): number => {\n      const randomFactor = 1 + (Math.random() - 0.5) * 2 * accuracyVariation;\n      return Math.max(0, Math.round(value * randomFactor));\n    };\n\n    return {\n      scanType: 'deep',\n      timestamp: currentTurn,\n      fleetData: {\n        frigates: applyAccuracy(actualFleet.frigates),\n        cruisers: applyAccuracy(actualFleet.cruisers),\n        battleships: applyAccuracy(actualFleet.battleships)\n      },\n      economicData: {\n        reactors: targetState.economy.reactors,\n        mines: targetState.economy.mines\n      },\n      accuracy: 0.9, // 90% base accuracy for deep scans\n      dataAge: 0\n    };\n  }\n\n  /**\n   * Performs an advanced scan - reveals strategic intent with vague numbers\n   */\n  performAdvancedScan(targetState: PlayerState, currentTurn: number): ScanResult {\n    const actualFleet = targetState.fleet.homeSystem;\n    const totalShips = actualFleet.frigates + actualFleet.cruisers + actualFleet.battleships;\n    const constructionQueue = targetState.economy.constructionQueue;\n    \n    // Determine strategic intent based on fleet composition and construction\n    let strategicIntent = this.determineStrategicIntent(targetState);\n    \n    // Provide vague fleet numbers\n    const fleetSizeCategory = this.categorizeFleetSize(totalShips);\n\n    return {\n      scanType: 'advanced',\n      timestamp: currentTurn,\n      fleetData: {\n        // Vague numbers - just size categories\n        frigates: fleetSizeCategory === 'small' ? Math.floor(totalShips * 0.6) : \n                 fleetSizeCategory === 'medium' ? Math.floor(totalShips * 0.5) :\n                 Math.floor(totalShips * 0.4),\n        cruisers: Math.floor(totalShips * 0.3),\n        battleships: Math.floor(totalShips * 0.1)\n      },\n      strategicIntent,\n      accuracy: 0.95, // 95% accuracy for strategic assessment\n      dataAge: 0\n    };\n  }\n\n  /**\n   * Determines strategic intent based on player state\n   */\n  private determineStrategicIntent(targetState: PlayerState): string {\n    const fleet = targetState.fleet.homeSystem;\n    const totalShips = fleet.frigates + fleet.cruisers + fleet.battleships;\n    const constructionQueue = targetState.economy.constructionQueue;\n    const economicStructures = targetState.economy.reactors + targetState.economy.mines;\n    \n    // Check construction queue for military vs economic focus\n    const militaryInQueue = constructionQueue.filter(order => \n      ['frigate', 'cruiser', 'battleship'].includes(order.unitType)\n    ).length;\n    \n    const economicInQueue = constructionQueue.filter(order => \n      ['reactor', 'mine'].includes(order.unitType)\n    ).length;\n\n    if (militaryInQueue > economicInQueue && totalShips > 100) {\n      return \"Major offensive operations planned within 2-3 turns. Heavy military buildup detected.\";\n    } else if (economicInQueue > militaryInQueue) {\n      return \"Focusing on economic expansion. Defensive posture likely for next few turns.\";\n    } else if (totalShips < 50) {\n      return \"Rebuilding phase detected. Vulnerable to immediate pressure.\";\n    } else if (fleet.battleships > fleet.frigates + fleet.cruisers) {\n      return \"Heavy battleship focus suggests anti-frigate strategy preparation.\";\n    } else if (fleet.frigates > fleet.cruisers + fleet.battleships) {\n      return \"Frigate swarm tactics detected. Likely targeting cruiser-heavy fleets.\";\n    } else {\n      return \"Balanced development approach. Strategic intentions unclear.\";\n    }\n  }\n\n  /**\n   * Categorizes fleet size for vague reporting\n   */\n  private categorizeFleetSize(totalShips: number): 'small' | 'medium' | 'large' {\n    if (totalShips < 100) return 'small';\n    if (totalShips < 500) return 'medium';\n    return 'large';\n  }\n\n  /**\n   * Stores scan result in player's intelligence history\n   */\n  storeScanResult(playerState: PlayerState, scanResult: ScanResult): void {\n    // Add data age (0 for fresh scan)\n    scanResult.dataAge = 0;\n    \n    // Store in scan history\n    if (!playerState.intelligence.scanHistory) {\n      playerState.intelligence.scanHistory = [];\n    }\n    playerState.intelligence.scanHistory.push(scanResult);\n    \n    // Update last scan turn\n    playerState.intelligence.lastScanTurn = scanResult.timestamp;\n    \n    // Update known enemy fleet if scan includes fleet data\n    if (scanResult.fleetData) {\n      playerState.intelligence.knownEnemyFleet = {\n        frigates: scanResult.fleetData.frigates || 0,\n        cruisers: scanResult.fleetData.cruisers || 0,\n        battleships: scanResult.fleetData.battleships || 0\n      };\n    }\n    \n    // Update scan accuracy\n    playerState.intelligence.scanAccuracy = scanResult.accuracy;\n    \n    // Limit history size to last 10 scans\n    if (playerState.intelligence.scanHistory && playerState.intelligence.scanHistory.length > 10) {\n      playerState.intelligence.scanHistory = playerState.intelligence.scanHistory.slice(-10);\n    }\n  }\n\n  /**\n   * Applies misinformation to scan results\n   */\n  applyMisinformation(scanResult: ScanResult, misinformationChance: number): ScanResult {\n    if (Math.random() < misinformationChance) {\n      const misinformedResult = { ...scanResult };\n      misinformedResult.isMisinformation = true;\n      \n      // Apply misinformation based on scan type\n      if (misinformedResult.fleetData) {\n        const variation = 0.5; // ±50% variation for misinformation\n        misinformedResult.fleetData = {\n          frigates: Math.max(0, Math.round((misinformedResult.fleetData.frigates || 0) * (1 + (Math.random() - 0.5) * 2 * variation))),\n          cruisers: Math.max(0, Math.round((misinformedResult.fleetData.cruisers || 0) * (1 + (Math.random() - 0.5) * 2 * variation))),\n          battleships: Math.max(0, Math.round((misinformedResult.fleetData.battleships || 0) * (1 + (Math.random() - 0.5) * 2 * variation)))\n        };\n      }\n      \n      // Reduce accuracy for misinformation\n      misinformedResult.accuracy *= 0.5;\n      \n      return misinformedResult;\n    }\n    \n    return scanResult;\n  }\n\n  /**\n   * Ages existing scan data and reduces confidence\n   */\n  ageIntelligenceData(playerState: PlayerState, currentTurn: number): void {\n    if (playerState.intelligence.scanHistory) {\n      playerState.intelligence.scanHistory.forEach(scan => {\n        scan.dataAge = currentTurn - scan.timestamp;\n        // Reduce accuracy over time\n        scan.accuracy = Math.max(0.1, scan.accuracy - (scan.dataAge * CONFIDENCE_DECAY_RATE));\n      });\n    }\n  }\n\n  /**\n   * Calculates intelligence gaps for in-transit fleets\n   */\n  calculateIntelligenceGap(playerState: PlayerState, currentTurn: number): IntelligenceGap {\n    const lastScan = this.getLatestScan(playerState);\n    \n    if (!lastScan) {\n      return {\n        lastKnownFleet: { frigates: 0, cruisers: 0, battleships: 0 },\n        lastScanTurn: 0,\n        estimatedInTransit: 0,\n        confidence: 0\n      };\n    }\n\n    const turnsSinceLastScan = currentTurn - lastScan.timestamp;\n    const confidence = Math.max(0, 1 - (turnsSinceLastScan * CONFIDENCE_DECAY_RATE));\n    \n    // Estimate potential in-transit fleets based on time gap\n    const estimatedInTransit = turnsSinceLastScan > 2 ? \n      Math.floor((playerState.intelligence.knownEnemyFleet.frigates + \n                  playerState.intelligence.knownEnemyFleet.cruisers + \n                  playerState.intelligence.knownEnemyFleet.battleships) * 0.3) : 0;\n\n    return {\n      lastKnownFleet: playerState.intelligence.knownEnemyFleet,\n      lastScanTurn: lastScan.timestamp,\n      estimatedInTransit,\n      confidence\n    };\n  }\n\n  /**\n   * Gets the most recent scan result\n   */\n  getLatestScan(playerState: PlayerState): ScanResult | null {\n    const history = playerState.intelligence.scanHistory;\n    return history && history.length > 0 ? history[history.length - 1] : null;\n  }\n\n  /**\n   * Gets scan results of a specific type\n   */\n  getScansByType(playerState: PlayerState, scanType: ScanType): ScanResult[] {\n    return playerState.intelligence.scanHistory?.filter(scan => scan.scanType === scanType) || [];\n  }\n\n  /**\n   * Formats scan result for display\n   */\n  formatScanResult(scanResult: ScanResult): string {\n    const ageText = scanResult.dataAge > 0 ? ` (${scanResult.dataAge} turns old)` : ' (fresh)';\n    const misinfoText = scanResult.isMisinformation ? ' [UNRELIABLE]' : '';\n    \n    let result = `${scanResult.scanType.toUpperCase()} SCAN - Turn ${scanResult.timestamp}${ageText}${misinfoText}\\n`;\n    result += `Accuracy: ${Math.round(scanResult.accuracy * 100)}%\\n`;\n    \n    if (scanResult.fleetData) {\n      result += `Fleet Composition:\\n`;\n      result += `  Frigates: ${scanResult.fleetData.frigates || 0}\\n`;\n      result += `  Cruisers: ${scanResult.fleetData.cruisers || 0}\\n`;\n      result += `  Battleships: ${scanResult.fleetData.battleships || 0}\\n`;\n      \n      const total = (scanResult.fleetData.frigates || 0) + \n                   (scanResult.fleetData.cruisers || 0) + \n                   (scanResult.fleetData.battleships || 0);\n      result += `  Total Ships: ${total}\\n`;\n    }\n    \n    if (scanResult.economicData) {\n      result += `Economic Infrastructure:\\n`;\n      result += `  Reactors: ${scanResult.economicData.reactors}\\n`;\n      result += `  Mines: ${scanResult.economicData.mines}\\n`;\n    }\n    \n    if (scanResult.strategicIntent) {\n      result += `Strategic Assessment:\\n`;\n      result += `  ${scanResult.strategicIntent}\\n`;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Formats intelligence gap information\n   */\n  formatIntelligenceGap(gap: IntelligenceGap, currentTurn: number): string {\n    const turnsSince = currentTurn - gap.lastScanTurn;\n    \n    let result = `INTELLIGENCE ASSESSMENT\\n`;\n    result += `Last scan: ${turnsSince} turns ago (Turn ${gap.lastScanTurn})\\n`;\n    result += `Data confidence: ${Math.round(gap.confidence * 100)}%\\n`;\n    \n    if (gap.estimatedInTransit > 0) {\n      result += `WARNING: Estimated ${gap.estimatedInTransit} ships may be in transit (invisible to scans)\\n`;\n    }\n    \n    result += `Last known fleet composition:\\n`;\n    result += `  Frigates: ${gap.lastKnownFleet.frigates}\\n`;\n    result += `  Cruisers: ${gap.lastKnownFleet.cruisers}\\n`;\n    result += `  Battleships: ${gap.lastKnownFleet.battleships}\\n`;\n    \n    if (gap.confidence < 0.5) {\n      result += `CAUTION: Intelligence data is highly unreliable. Consider new scan.\\n`;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Main scan method that handles validation, cost deduction, and scan execution\n   */\n  performScan(\n    playerState: PlayerState, \n    targetState: PlayerState, \n    scanType: ScanType, \n    currentTurn: number\n  ): ScanResult | null {\n    // Validate resources\n    if (!this.canAffordScan(playerState, scanType)) {\n      return null;\n    }\n\n    // Deduct costs\n    this.deductScanCost(playerState, scanType);\n\n    // Perform the appropriate scan\n    let scanResult: ScanResult;\n    switch (scanType) {\n      case 'basic':\n        scanResult = this.performBasicScan(targetState, currentTurn);\n        break;\n      case 'deep':\n        scanResult = this.performDeepScan(targetState, currentTurn);\n        break;\n      case 'advanced':\n        scanResult = this.performAdvancedScan(targetState, currentTurn);\n        break;\n      default:\n        throw new Error(`Unknown scan type: ${scanType}`);\n    }\n\n    // Apply misinformation\n    scanResult = this.applyMisinformation(scanResult, playerState.intelligence.misinformationChance || MISINFORMATION_BASE_CHANCE);\n    \n    // Store the scan result\n    this.storeScanResult(playerState, scanResult);\n    \n    return scanResult;\n  }\n}","import { GameState, GamePhase, CombatEvent, FleetComposition } from '../models/GameState.js';\nimport { PlayerState, BuildOrder, BuildableType, UnitType, StructureType } from '../models/PlayerState.js';\nimport { EconomyEngine } from './EconomyEngine.js';\nimport { AIEngine } from './AIEngine.js';\nimport { IntelligenceEngine } from './IntelligenceEngine.js';\nimport { \n  processFleetMovements, \n  processCombatMovement, \n  checkVictoryConditions,\n  checkFleetElimination,\n  FleetMovement,\n  UNIT_STATS,\n  calculateFleetUpkeep\n} from '../models/Fleet.js';\nimport { AIDecision, AIArchetype } from '../models/AI.js';\nimport { ScanType } from '../models/Intelligence.js';\nimport { createStructureBuildOrder, createUnitBuildOrder } from '../models/Economy.js';\n\nexport interface GameEngineConfig {\n  aiArchetype?: AIArchetype;\n  startingResources?: {\n    metal: number;\n    energy: number;\n  };\n}\n\nexport interface TurnResult {\n  success: boolean;\n  combatEvents: CombatEvent[];\n  gameEnded: boolean;\n  winner?: 'player' | 'ai';\n  victoryType?: 'military' | 'economic';\n  errors: string[];\n}\n\nexport class GameEngine {\n  private gameState: GameState;\n  private economyEngine: EconomyEngine;\n  private aiEngine: AIEngine;\n  private intelligenceEngine: IntelligenceEngine;\n\n  constructor(config: GameEngineConfig = {}) {\n    this.economyEngine = new EconomyEngine();\n    this.aiEngine = new AIEngine(config.aiArchetype || 'hybrid');\n    this.intelligenceEngine = new IntelligenceEngine();\n    \n    this.gameState = this.initializeGameState(config);\n  }\n\n  /**\n   * Initializes a new game state with default values\n   */\n  private initializeGameState(config: GameEngineConfig): GameState {\n    const startingResources = config.startingResources || { metal: 10000, energy: 10000 };\n    \n    const createInitialPlayerState = (): PlayerState => ({\n      resources: {\n        metal: startingResources.metal,\n        energy: startingResources.energy,\n        metalIncome: 10000, // Base income\n        energyIncome: 10000  // Base income\n      },\n      fleet: {\n        homeSystem: {\n          frigates: 50,   // Start with decent fleet\n          cruisers: 20,   // Balanced composition\n          battleships: 10 // Some heavy units\n        },\n        inTransit: {\n          outbound: []\n        }\n      },\n      economy: {\n        reactors: 0,\n        mines: 0,\n        constructionQueue: []\n      },\n      intelligence: {\n        lastScanTurn: 0,\n        knownEnemyFleet: {\n          frigates: 0,\n          cruisers: 0,\n          battleships: 0\n        },\n        scanAccuracy: 0.7,\n        scanHistory: [],\n        misinformationChance: 0.2\n      }\n    });\n\n    return {\n      turn: 1,\n      player: createInitialPlayerState(),\n      ai: createInitialPlayerState(),\n      combatLog: [],\n      gamePhase: 'early',\n      isGameOver: false,\n      playerHasBeenAttacked: false,\n      aiHasBeenAttacked: false\n    };\n  }\n\n  /**\n   * Processes a complete game turn following the turn sequence:\n   * Start → Income → Actions → AI → Combat → Victory → Next\n   */\n  public processTurn(playerActions?: any[]): TurnResult {\n    const errors: string[] = [];\n    const combatEvents: CombatEvent[] = [];\n\n    try {\n      // 1. Start Phase - Process turn start\n      \n      // 2. Income Phase - Calculate and apply resource income\n      this.processIncomePhase();\n      \n      // 3. Actions Phase - Process player actions (handled externally, state already updated)\n      // Player actions are processed before calling this method\n      \n      // 4. AI Phase - Process AI decision and actions\n      const aiDecision = this.processAIPhase();\n      \n      // 5. Combat Phase - Resolve all fleet movements and combat\n      const combatResults = this.processCombatPhase();\n      combatEvents.push(...combatResults);\n      \n      // 6. Victory Phase - Check for game end conditions\n      const victoryResult = this.checkVictoryConditions();\n      \n      // 7. Next Phase - Prepare for next turn\n      if (!victoryResult.gameEnded) {\n        this.prepareNextTurn();\n        // Update game phase after turn increment\n        this.updateGamePhase();\n      }\n\n      return {\n        success: true,\n        combatEvents,\n        gameEnded: victoryResult.gameEnded,\n        winner: victoryResult.winner,\n        victoryType: victoryResult.victoryType,\n        errors\n      };\n\n    } catch (error) {\n      errors.push(`Turn processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      return {\n        success: false,\n        combatEvents,\n        gameEnded: false,\n        errors\n      };\n    }\n  }\n\n  /**\n   * Updates the game phase based on turn number and game state\n   */\n  private updateGamePhase(): void {\n    const turn = this.gameState.turn;\n    \n    if (turn <= 5) {\n      this.gameState.gamePhase = 'early';\n    } else if (turn <= 15) {\n      this.gameState.gamePhase = 'mid';\n    } else if (turn <= 25) {\n      this.gameState.gamePhase = 'late';\n    } else {\n      this.gameState.gamePhase = 'endgame';\n    }\n  }\n\n  /**\n   * Processes the income phase for both player and AI\n   */\n  private processIncomePhase(): void {\n    // Process player income\n    this.economyEngine.calculateIncome(this.gameState.player);\n    this.economyEngine.processConstruction(this.gameState.player);\n    \n    // Process AI income\n    this.economyEngine.calculateIncome(this.gameState.ai);\n    this.economyEngine.processConstruction(this.gameState.ai);\n    \n    // Age intelligence data\n    this.intelligenceEngine.ageIntelligenceData(this.gameState.player, this.gameState.turn);\n    this.intelligenceEngine.ageIntelligenceData(this.gameState.ai, this.gameState.turn);\n  }\n\n  /**\n   * Processes AI decision making and actions\n   */\n  private processAIPhase(): AIDecision {\n    const aiDecision = this.aiEngine.processTurn(this.gameState);\n    \n    // Apply AI decision to game state\n    this.applyAIDecision(aiDecision);\n    \n    return aiDecision;\n  }\n\n  /**\n   * Applies AI decision to the game state\n   */\n  private applyAIDecision(decision: AIDecision): void {\n    switch (decision.type) {\n      case 'build':\n        if (decision.buildType && decision.buildQuantity) {\n          this.applyAIBuildDecision(decision.buildType, decision.buildQuantity);\n        }\n        break;\n\n      case 'attack':\n        if (decision.attackFleet && decision.attackTarget) {\n          this.applyAIAttackDecision(decision.attackFleet, decision.attackTarget);\n        }\n        break;\n\n      case 'scan':\n        if (decision.scanType) {\n          this.applyAIScanDecision(decision.scanType);\n        }\n        break;\n\n      case 'wait':\n        // AI does nothing this turn\n        break;\n    }\n  }\n\n  /**\n   * Applies AI build decision\n   */\n  private applyAIBuildDecision(buildType: BuildableType, quantity: number): void {\n    // Create appropriate build order based on type\n    let buildOrder: BuildOrder;\n\n    if (buildType === 'reactor' || buildType === 'mine') {\n      // Structure build order\n      const currentCount = buildType === 'reactor' ? \n        this.gameState.ai.economy.reactors : \n        this.gameState.ai.economy.mines;\n      \n      buildOrder = this.createStructureBuildOrderInternal(buildType, quantity, currentCount);\n    } else {\n      // Unit build order\n      buildOrder = this.createUnitBuildOrderInternal(buildType, quantity);\n    }\n\n    // Add to AI construction queue\n    this.economyEngine.addBuildOrder(this.gameState.ai, buildOrder);\n  }\n\n  /**\n   * Applies AI attack decision\n   */\n  private applyAIAttackDecision(attackFleet: FleetComposition, target: string): void {\n    // Validate AI has the fleet to send\n    const aiFleet = this.gameState.ai.fleet.homeSystem;\n    if (aiFleet.frigates >= attackFleet.frigates &&\n        aiFleet.cruisers >= attackFleet.cruisers &&\n        aiFleet.battleships >= attackFleet.battleships) {\n      \n      // Deduct fleet from home system\n      aiFleet.frigates -= attackFleet.frigates;\n      aiFleet.cruisers -= attackFleet.cruisers;\n      aiFleet.battleships -= attackFleet.battleships;\n      \n      // Create fleet movement\n      const movement: FleetMovement = {\n        composition: attackFleet,\n        target,\n        arrivalTurn: this.gameState.turn + 1,\n        returnTurn: this.gameState.turn + 3,\n        missionType: 'outbound'\n      };\n      \n      // Add to outbound movements\n      this.gameState.ai.fleet.inTransit.outbound.push(movement);\n    }\n  }\n\n  /**\n   * Applies AI scan decision\n   */\n  private applyAIScanDecision(scanType: ScanType): void {\n    this.intelligenceEngine.performScan(\n      this.gameState.ai,\n      this.gameState.player,\n      scanType,\n      this.gameState.turn\n    );\n  }\n\n  /**\n   * Creates a structure build order with exponential cost scaling\n   */\n  private createStructureBuildOrderInternal(structureType: StructureType, quantity: number, currentCount: number): BuildOrder {\n    return createStructureBuildOrder(structureType, quantity, currentCount);\n  }\n\n  /**\n   * Creates a unit build order\n   */\n  private createUnitBuildOrderInternal(unitType: UnitType, quantity: number): BuildOrder {\n    const unitStats = UNIT_STATS[unitType];\n    return createUnitBuildOrder(unitType, quantity, unitStats);\n  }\n\n  /**\n   * Processes combat phase - resolves all fleet movements and combat\n   */\n  private processCombatPhase(): CombatEvent[] {\n    const combatEvents: CombatEvent[] = [];\n\n    // Process player fleet movements\n    const playerCombatEvents = this.processPlayerFleetMovements();\n    combatEvents.push(...playerCombatEvents);\n\n    // Process AI fleet movements\n    const aiCombatEvents = this.processAIFleetMovements();\n    combatEvents.push(...aiCombatEvents);\n\n    // Store combat events in game state\n    this.gameState.combatLog.push(...combatEvents);\n\n    return combatEvents;\n  }\n\n  /**\n   * Processes player fleet movements and combat\n   */\n  private processPlayerFleetMovements(): CombatEvent[] {\n    const combatEvents: CombatEvent[] = [];\n    const playerMovements = this.gameState.player.fleet.inTransit.outbound;\n    \n    const { updated, combatMovements, returning } = processFleetMovements(\n      playerMovements,\n      this.gameState.turn\n    );\n\n    // Update player movements\n    this.gameState.player.fleet.inTransit.outbound = updated;\n\n    // Process combat movements\n    for (const movement of combatMovements) {\n      const combatResult = processCombatMovement(\n        movement,\n        this.gameState.ai.fleet.homeSystem,\n        this.gameState.turn\n      );\n\n      // Update AI home fleet with combat results\n      this.gameState.ai.fleet.homeSystem = combatResult.updatedDefenderFleet;\n\n      // Add returning fleet if any survivors\n      if (combatResult.returningFleet) {\n        this.gameState.player.fleet.inTransit.outbound.push(combatResult.returningFleet);\n      }\n\n      // Mark AI as having been attacked\n      this.gameState.aiHasBeenAttacked = true;\n\n      // Return operational costs for destroyed ships to both players\n      this.returnOperationalCosts(this.gameState.player, combatResult.combatResult.attackerCasualties);\n      this.returnOperationalCosts(this.gameState.ai, combatResult.combatResult.defenderCasualties);\n\n      // Create combat event\n      const combatEvent: CombatEvent = {\n        turn: this.gameState.turn,\n        attacker: 'player',\n        attackerFleet: movement.composition,\n        defenderFleet: this.gameState.ai.fleet.homeSystem,\n        outcome: combatResult.combatResult.outcome,\n        casualties: {\n          attacker: combatResult.combatResult.attackerCasualties,\n          defender: combatResult.combatResult.defenderCasualties\n        },\n        survivors: {\n          attacker: combatResult.combatResult.attackerSurvivors,\n          defender: combatResult.combatResult.defenderSurvivors\n        }\n      };\n\n      combatEvents.push(combatEvent);\n    }\n\n    // Process returning fleets\n    for (const returningFleet of returning) {\n      if (returningFleet.arrivalTurn <= this.gameState.turn) {\n        // Fleet has returned home\n        const homeFleet = this.gameState.player.fleet.homeSystem;\n        homeFleet.frigates += returningFleet.composition.frigates;\n        homeFleet.cruisers += returningFleet.composition.cruisers;\n        homeFleet.battleships += returningFleet.composition.battleships;\n      } else {\n        // Fleet still returning\n        this.gameState.player.fleet.inTransit.outbound.push(returningFleet);\n      }\n    }\n\n    return combatEvents;\n  }\n\n  /**\n   * Processes AI fleet movements and combat\n   */\n  private processAIFleetMovements(): CombatEvent[] {\n    const combatEvents: CombatEvent[] = [];\n    const aiMovements = this.gameState.ai.fleet.inTransit.outbound;\n    \n    const { updated, combatMovements, returning } = processFleetMovements(\n      aiMovements,\n      this.gameState.turn\n    );\n\n    // Update AI movements\n    this.gameState.ai.fleet.inTransit.outbound = updated;\n\n    // Process combat movements\n    for (const movement of combatMovements) {\n      const combatResult = processCombatMovement(\n        movement,\n        this.gameState.player.fleet.homeSystem,\n        this.gameState.turn\n      );\n\n      // Update player home fleet with combat results\n      this.gameState.player.fleet.homeSystem = combatResult.updatedDefenderFleet;\n\n      // Add returning fleet if any survivors\n      if (combatResult.returningFleet) {\n        this.gameState.ai.fleet.inTransit.outbound.push(combatResult.returningFleet);\n      }\n\n      // Mark player as having been attacked\n      this.gameState.playerHasBeenAttacked = true;\n\n      // Return operational costs for destroyed ships to both players\n      this.returnOperationalCosts(this.gameState.ai, combatResult.combatResult.attackerCasualties);\n      this.returnOperationalCosts(this.gameState.player, combatResult.combatResult.defenderCasualties);\n\n      // Create combat event\n      const combatEvent: CombatEvent = {\n        turn: this.gameState.turn,\n        attacker: 'ai',\n        attackerFleet: movement.composition,\n        defenderFleet: this.gameState.player.fleet.homeSystem,\n        outcome: combatResult.combatResult.outcome,\n        casualties: {\n          attacker: combatResult.combatResult.attackerCasualties,\n          defender: combatResult.combatResult.defenderCasualties\n        },\n        survivors: {\n          attacker: combatResult.combatResult.attackerSurvivors,\n          defender: combatResult.combatResult.defenderSurvivors\n        }\n      };\n\n      combatEvents.push(combatEvent);\n    }\n\n    // Process returning fleets\n    for (const returningFleet of returning) {\n      if (returningFleet.arrivalTurn <= this.gameState.turn) {\n        // Fleet has returned home\n        const homeFleet = this.gameState.ai.fleet.homeSystem;\n        homeFleet.frigates += returningFleet.composition.frigates;\n        homeFleet.cruisers += returningFleet.composition.cruisers;\n        homeFleet.battleships += returningFleet.composition.battleships;\n      } else {\n        // Fleet still returning\n        this.gameState.ai.fleet.inTransit.outbound.push(returningFleet);\n      }\n    }\n\n    return combatEvents;\n  }\n\n  /**\n   * Checks victory conditions and updates game state\n   */\n  private checkVictoryConditions(): {\n    gameEnded: boolean;\n    winner?: 'player' | 'ai';\n    victoryType?: 'military' | 'economic';\n  } {\n    // Check for economic victory first (more definitive)\n    const playerEconomicCollapse = this.isPlayerEconomicallyEliminated(this.gameState.player);\n    const aiEconomicCollapse = this.isPlayerEconomicallyEliminated(this.gameState.ai);\n\n    if (playerEconomicCollapse && !aiEconomicCollapse) {\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'ai';\n      this.gameState.victoryType = 'economic';\n      return { gameEnded: true, winner: 'ai', victoryType: 'economic' };\n    } else if (aiEconomicCollapse && !playerEconomicCollapse) {\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'player';\n      this.gameState.victoryType = 'economic';\n      return { gameEnded: true, winner: 'player', victoryType: 'economic' };\n    } else if (playerEconomicCollapse && aiEconomicCollapse) {\n      // Both economies collapsed - AI wins by default\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'ai';\n      this.gameState.victoryType = 'economic';\n      return { gameEnded: true, winner: 'ai', victoryType: 'economic' };\n    }\n\n    // Check for military victory (only if no economic victory)\n    const playerMilitaryEliminated = this.isPlayerMilitarilyEliminated(this.gameState.player);\n    const aiMilitaryEliminated = this.isPlayerMilitarilyEliminated(this.gameState.ai);\n\n    if (playerMilitaryEliminated && !aiMilitaryEliminated) {\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'ai';\n      this.gameState.victoryType = 'military';\n      return { gameEnded: true, winner: 'ai', victoryType: 'military' };\n    } else if (aiMilitaryEliminated && !playerMilitaryEliminated) {\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'player';\n      this.gameState.victoryType = 'military';\n      return { gameEnded: true, winner: 'player', victoryType: 'military' };\n    } else if (playerMilitaryEliminated && aiMilitaryEliminated) {\n      // Both militarily eliminated - AI wins by default\n      this.gameState.isGameOver = true;\n      this.gameState.winner = 'ai';\n      this.gameState.victoryType = 'military';\n      return { gameEnded: true, winner: 'ai', victoryType: 'military' };\n    }\n\n    return { gameEnded: false };\n  }\n\n  /**\n   * Determines if a player is economically eliminated\n   * A player is economically eliminated if:\n   * 1. Their economy is stalled (income <= 0)\n   * 2. They have no resources left\n   * 3. They cannot recover (no way to generate positive income)\n   */\n  private isPlayerEconomicallyEliminated(player: PlayerState): boolean {\n    const isStalled = this.economyEngine.isEconomyStalled(player);\n    const hasNoResources = player.resources.metal <= 0 && player.resources.energy <= 0;\n    \n    // Only consider economically eliminated if both stalled AND no resources\n    return isStalled && hasNoResources;\n  }\n\n  /**\n   * Determines if a player is militarily eliminated\n   * A player is militarily eliminated if:\n   * 1. They have no fleets (home or in transit)\n   * 2. They have been attacked (victory condition requirement)\n   */\n  private isPlayerMilitarilyEliminated(player: PlayerState): boolean {\n    // Check if player has any fleets\n    const hasFleets = !checkFleetElimination(\n      player.fleet.homeSystem,\n      player.fleet.inTransit.outbound\n    );\n    \n    if (hasFleets) {\n      return false; // Has fleets, not eliminated\n    }\n\n    // No fleets - check if they have been attacked (new victory condition)\n    const hasBeenAttacked = player === this.gameState.player ? \n      (this.gameState.playerHasBeenAttacked || false) : \n      (this.gameState.aiHasBeenAttacked || false);\n    \n    // Victory condition: 0 fleet AND has been attacked\n    return hasBeenAttacked;\n  }\n\n  /**\n   * Returns operational costs to player when ships are destroyed\n   * This helps the economy recover from losses\n   */\n  private returnOperationalCosts(player: PlayerState, casualties: FleetComposition): void {\n    const upkeepCosts = calculateFleetUpkeep(casualties);\n    \n    // Return the upkeep costs to the player's resources\n    player.resources.metal += upkeepCosts.metal;\n    player.resources.energy += upkeepCosts.energy;\n  }\n\n  /**\n   * Prepares for the next turn\n   */\n  private prepareNextTurn(): void {\n    this.gameState.turn += 1;\n  }\n\n  /**\n   * Gets the current game state (read-only copy)\n   */\n  public getGameState(): Readonly<GameState> {\n    return { ...this.gameState };\n  }\n\n  /**\n   * Gets the current turn number\n   */\n  public getCurrentTurn(): number {\n    return this.gameState.turn;\n  }\n\n  /**\n   * Gets the current game phase\n   */\n  public getGamePhase(): GamePhase {\n    return this.gameState.gamePhase;\n  }\n\n  /**\n   * Checks if the game is over\n   */\n  public isGameOver(): boolean {\n    return this.gameState.isGameOver;\n  }\n\n  /**\n   * Gets the winner if the game is over\n   */\n  public getWinner(): 'player' | 'ai' | undefined {\n    return this.gameState.winner;\n  }\n\n  /**\n   * Gets the victory type if the game is over\n   */\n  public getVictoryType(): 'military' | 'economic' | undefined {\n    return this.gameState.victoryType;\n  }\n\n  /**\n   * Gets the combat log\n   */\n  public getCombatLog(): CombatEvent[] {\n    return [...this.gameState.combatLog];\n  }\n\n  /**\n   * Resets the game to initial state\n   */\n  public resetGame(config: GameEngineConfig = {}): void {\n    this.gameState = this.initializeGameState(config);\n    this.aiEngine = new AIEngine(config.aiArchetype || 'hybrid');\n  }\n\n  /**\n   * Validates the current game state for consistency\n   */\n  public validateGameState(): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    // Validate turn number\n    if (this.gameState.turn < 1) {\n      errors.push('Turn number must be positive');\n    }\n\n    // Validate resources are not negative\n    if (this.gameState.player.resources.metal < 0 || this.gameState.player.resources.energy < 0) {\n      errors.push('Player resources cannot be negative');\n    }\n\n    if (this.gameState.ai.resources.metal < 0 || this.gameState.ai.resources.energy < 0) {\n      errors.push('AI resources cannot be negative');\n    }\n\n    // Validate fleet compositions\n    const playerFleet = this.gameState.player.fleet.homeSystem;\n    const aiFleet = this.gameState.ai.fleet.homeSystem;\n\n    if (playerFleet.frigates < 0 || playerFleet.cruisers < 0 || playerFleet.battleships < 0) {\n      errors.push('Player fleet counts cannot be negative');\n    }\n\n    if (aiFleet.frigates < 0 || aiFleet.cruisers < 0 || aiFleet.battleships < 0) {\n      errors.push('AI fleet counts cannot be negative');\n    }\n\n    // Validate game over state consistency\n    if (this.gameState.isGameOver && !this.gameState.winner) {\n      errors.push('Game is over but no winner is set');\n    }\n\n    if (this.gameState.winner && !this.gameState.isGameOver) {\n      errors.push('Winner is set but game is not over');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Gets detailed game statistics\n   */\n  public getGameStatistics(): {\n    turn: number;\n    gamePhase: GamePhase;\n    playerStats: {\n      totalFleetSize: number;\n      netIncome: { metal: number; energy: number };\n      economicStructures: number;\n    };\n    aiStats: {\n      totalFleetSize: number;\n      netIncome: { metal: number; energy: number };\n      economicStructures: number;\n    };\n    combatEvents: number;\n  } {\n    const playerFleet = this.gameState.player.fleet.homeSystem;\n    const aiFleet = this.gameState.ai.fleet.homeSystem;\n\n    return {\n      turn: this.gameState.turn,\n      gamePhase: this.gameState.gamePhase,\n      playerStats: {\n        totalFleetSize: playerFleet.frigates + playerFleet.cruisers + playerFleet.battleships,\n        netIncome: this.economyEngine.getNetIncome(this.gameState.player),\n        economicStructures: this.gameState.player.economy.reactors + this.gameState.player.economy.mines\n      },\n      aiStats: {\n        totalFleetSize: aiFleet.frigates + aiFleet.cruisers + aiFleet.battleships,\n        netIncome: this.economyEngine.getNetIncome(this.gameState.ai),\n        economicStructures: this.gameState.ai.economy.reactors + this.gameState.ai.economy.mines\n      },\n      combatEvents: this.gameState.combatLog.length\n    };\n  }\n}"],"names":["EconomyEngine","calculateIncome","player","structureIncome","calculateStructureIncome","economy","reactors","mines","constructionDrain","calculateConstructionDrain","constructionQueue","fleetUpkeep","calculateFleetUpkeep","fleet","homeSystem","grossIncome","calculateNetIncome","netIncome","resources","metalIncome","metal","energyIncome","energy","Math","max","getNetIncome","isEconomyStalled","this","getIncomeBreakdown","baseIncome","BASE_INCOME","structureBonus","processConstruction","advanceExistingConstruction","completedOrders","remainingQueue","processConstructionQueue","completedOrder","applyCompletedOrder","order","unitType","frigates","quantity","cruisers","battleships","canAffordAndSustainBuildOrder","buildOrder","errors","canAfford","canAffordBuildOrder","totalMetalCost","resourceDrainPerTurn","turnsRemaining","totalEnergyCost","push","canSustain","canSustainBuildOrder","addBuildOrder","validation","validateBuildOrder","isValid","success","affordability","projectedQueue","projectedDrain","projectedNetIncome","cancelBuildOrder","index","length","splice","getTotalConstructionDrain","hasActiveConstruction","getConstructionStatus","map","completionTurn","applyUpkeep","validateEconomicState","warnings","recommendations","breakdown","constructionDrainRatio","upkeepRatio","structureWarnings","validateStructureViability","isStructureViable","getEconomicEfficiency","totalFleetSize","getTotalFleetSize","metalEfficiency","min","energyEfficiency","structureEfficiency","fleetEfficiency","overallEfficiency","getEconomicRecommendations","priority","action","reason","AggressorAI","BaseAIArchetype","constructor","super","militaryFocus","economicFocus","aggressionLevel","deceptionChance","adaptiveVariation","makeDecision","gameState","aiState","threatLevel","calculateThreatLevel","economicAdvantage","calculateEconomicAdvantage","shouldAdaptBehavior","makeDefensiveDecision","random","behaviorProbabilities","makeMilitaryDecision","makeEconomicDecision","canAffordBuild","type","buildType","buildQuantity","floor","currentFleet","playerFleet","attackFleet","planAttackFleet","hasAvailableFleet","attackTarget","buildMilitaryUnits","availableFleet","enemyFleet","attackRatio","EconomistAI","makeDefensiveMilitaryDecision","planConservativeAttack","calculateFleetStrength","scanType","TricksterAI","__publicField","playerLastScan","intelligence","lastScanTurn","turn","makeStraightforwardDecision","makeDeceptiveDecision","makeBalancedDecision","currentTurn","lastDeceptionTurn","deceptionCooldown","buildUnexpectedUnits","getDominantUnitType","unitTypes","randomUnit","planOptimalAttack","buildOptimalUnits","optimalCounter","getOptimalCounter","HybridAI","currentStrategy","selectInitialStrategy","adaptStrategy","strategyChangeTimer","strategyDuration","selectNewStrategy","executeStrategy","strategies","makeAggressiveDecision","makeOpportunisticDecision","planAggressiveAttack","counterUnit","getDefensiveCounter","AIEngine","archetype","aiArchetype","createArchetype","initializeAIState","Error","inTransit","outbound","knownEnemyFleet","scanAccuracy","lastScanData","misinformationActive","getBehaviorProbabilities","processTurn","updateAIState","decision","lastPlayerAction","ai","aiFleet","playerStrength","aiStrength","ratio","playerIncome","aiIncome","getAIState","getArchetype","IntelligenceEngine","canAffordScan","playerState","cost","SCAN_COSTS","deductScanCost","performBasicScan","targetState","actualFleet","totalShips","randomFactor","timestamp","fleetData","round","accuracy","dataAge","performDeepScan","applyAccuracy","value","economicData","performAdvancedScan","strategicIntent","determineStrategicIntent","fleetSizeCategory","categorizeFleetSize","militaryInQueue","filter","includes","economicInQueue","storeScanResult","scanResult","scanHistory","slice","applyMisinformation","misinformationChance","misinformedResult","isMisinformation","variation","ageIntelligenceData","forEach","scan","CONFIDENCE_DECAY_RATE","calculateIntelligenceGap","lastScan","getLatestScan","lastKnownFleet","estimatedInTransit","confidence","turnsSinceLastScan","history","getScansByType","formatScanResult","ageText","misinfoText","result","toUpperCase","formatIntelligenceGap","gap","performScan","MISINFORMATION_BASE_CHANCE","GameEngine","config","economyEngine","aiEngine","intelligenceEngine","initializeGameState","startingResources","createInitialPlayerState","combatLog","gamePhase","isGameOver","playerHasBeenAttacked","aiHasBeenAttacked","playerActions","combatEvents","processIncomePhase","processAIPhase","combatResults","processCombatPhase","victoryResult","checkVictoryConditions","gameEnded","prepareNextTurn","updateGamePhase","winner","victoryType","error","message","aiDecision","applyAIDecision","applyAIBuildDecision","applyAIAttackDecision","applyAIScanDecision","currentCount","createStructureBuildOrderInternal","createUnitBuildOrderInternal","target","movement","composition","arrivalTurn","returnTurn","missionType","structureType","createStructureBuildOrder","unitStats","UNIT_STATS","createUnitBuildOrder","playerCombatEvents","processPlayerFleetMovements","aiCombatEvents","processAIFleetMovements","playerMovements","updated","combatMovements","returning","processFleetMovements","combatResult","processCombatMovement","updatedDefenderFleet","returningFleet","returnOperationalCosts","attackerCasualties","defenderCasualties","combatEvent","attacker","attackerFleet","defenderFleet","outcome","casualties","defender","survivors","attackerSurvivors","defenderSurvivors","homeFleet","aiMovements","playerEconomicCollapse","isPlayerEconomicallyEliminated","aiEconomicCollapse","playerMilitaryEliminated","isPlayerMilitarilyEliminated","aiMilitaryEliminated","isStalled","hasNoResources","checkFleetElimination","upkeepCosts","getGameState","getCurrentTurn","getGamePhase","getWinner","getVictoryType","getCombatLog","resetGame","validateGameState","getGameStatistics","playerStats","economicStructures","aiStats"],"mappings":"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"}